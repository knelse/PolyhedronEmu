name: Godot build

on:
  workflow_run:
    workflows: ["Python lint & test"]
    types:
      - completed
    branches: [master]

jobs:
  Godot:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions: write-all
    strategy:
      matrix:
        platform: [win64]
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Verify and fix py4godot GDExtension
        run: |
          echo "=== Checking py4godot GDExtension setup ==="
          
          # Check if the GDExtension file exists
          if [ ! -f "addons/py4godot/python.gdextension" ]; then
            echo "ERROR: py4godot GDExtension file not found!"
            exit 1
          fi
          
          echo "✅ GDExtension file found"
          echo "GDExtension configuration:"
          cat addons/py4godot/python.gdextension
          
          # Check Windows Python distribution
          if [ ! -d "addons/py4godot/cpython-3.12.4-windows64" ]; then
            echo "ERROR: Windows Python distribution directory not found!"
            exit 1
          fi
          
          echo "✅ Windows Python distribution directory found"
          
          # Check for the specific DLL file that was failing
          echo "Checking for pythonscript.dll..."
          echo "Windows Python directory contents:"
          ls -la addons/py4godot/cpython-3.12.4-windows64/python/ || echo "Windows Python directory not found"
          
          if [ ! -f "addons/py4godot/cpython-3.12.4-windows64/python/pythonscript.dll" ]; then
            echo "⚠️ pythonscript.dll not found, checking for backup file..."
            if [ -f "addons/py4godot/cpython-3.12.4-windows64/python/~pythonscript.dll" ]; then
              echo "✅ Found backup file ~pythonscript.dll, copying to pythonscript.dll"
              cp "addons/py4godot/cpython-3.12.4-windows64/python/~pythonscript.dll" "addons/py4godot/cpython-3.12.4-windows64/python/pythonscript.dll"
            else
              echo "⚠️ Neither pythonscript.dll nor ~pythonscript.dll found!"
              echo "This might be expected if the DLL needs to be built or isn't included in the repository."
              echo "Attempting to continue with export - Godot may handle missing DLL gracefully."
              echo "Directory contents:"
              ls -la addons/py4godot/cpython-3.12.4-windows64/python/ || echo "Directory not accessible"
              # Don't exit with error - let Godot export handle it
            fi
          else
            echo "✅ pythonscript.dll found"
          fi
          
          # Check file permissions and make executable if needed (only if file exists)
          if [ -f "addons/py4godot/cpython-3.12.4-windows64/python/pythonscript.dll" ]; then
            echo "Setting file permissions for pythonscript.dll..."
            chmod +x addons/py4godot/cpython-3.12.4-windows64/python/pythonscript.dll
            chmod +x addons/py4godot/cpython-3.12.4-windows64/python/*.dll 2>/dev/null || echo "No additional DLL files to chmod"
            
            # Verify file is readable
            if [ ! -r "addons/py4godot/cpython-3.12.4-windows64/python/pythonscript.dll" ]; then
              echo "⚠️ pythonscript.dll is not readable!"
              ls -la addons/py4godot/cpython-3.12.4-windows64/python/pythonscript.dll
            else
              echo "✅ pythonscript.dll is readable"
            fi
          else
            echo "⚠️ Skipping file permission check - pythonscript.dll not found"
          fi
          
          # List all DLL files to verify they're present
          echo "Available DLL files:"
          find addons/py4godot -name "*.dll" -type f
          
          # Check Linux distribution for headless build
          if [ -d "addons/py4godot/cpython-3.12.4-linux64" ]; then
            echo "✅ Linux Python distribution found"
            echo "Checking for pythonscript.so..."
            ls -la addons/py4godot/cpython-3.12.4-linux64/python/bin/ | grep pythonscript
            
            if [ -f "addons/py4godot/cpython-3.12.4-linux64/python/bin/pythonscript.so" ]; then
              echo "✅ Linux pythonscript.so found"
              chmod +x addons/py4godot/cpython-3.12.4-linux64/python/bin/pythonscript.so
            else
              echo "pythonscript.so not found, checking for backup file..."
              if [ -f "addons/py4godot/cpython-3.12.4-linux64/python/bin/~pythonscript.so" ]; then
                echo "Found backup file ~pythonscript.so, copying to pythonscript.so"
                cp "addons/py4godot/cpython-3.12.4-linux64/python/bin/~pythonscript.so" "addons/py4godot/cpython-3.12.4-linux64/python/bin/pythonscript.so"
                chmod +x addons/py4godot/cpython-3.12.4-linux64/python/bin/pythonscript.so
              else
                echo "⚠️  Neither pythonscript.so nor ~pythonscript.so found, listing contents:"
                ls -la addons/py4godot/cpython-3.12.4-linux64/python/bin/ 2>/dev/null || echo "bin directory not found"
              fi
            fi
          else
            echo "⚠️  Linux Python distribution not found"
          fi

      - name: Copy necessary project files
        run: |
          echo "=== Copying necessary project files (excluding .tmp/.TMP files) ==="
          
          # Create builds directory structure
          mkdir -p builds/server
          mkdir -p builds/addons/py4godot
          
          # Copy py4godot addon with Windows64 runtime only
          if [ -d "addons/py4godot" ]; then
            echo "Copying py4godot files (Windows64 runtime only)..."
            
            # Copy all py4godot files except unwanted platform runtimes and .tmp/.TMP files
            for item in addons/py4godot/*; do
              item_name=$(basename "$item")
              
              # Skip unwanted platform runtimes
              if [[ "$item_name" == "cpython-3.12.4-linux64" ]] || \
                 [[ "$item_name" == "cpython-3.12.4-linuxarm64" ]] || \
                 [[ "$item_name" == "cpython-3.12.4-darwin64" ]]; then
                echo "⏭️ Skipping $item_name runtime"
                continue
              fi
              
              # Skip .tmp/.TMP files
              if [[ "$item_name" == *.tmp ]] || [[ "$item_name" == *.TMP ]]; then
                echo "⏭️ Skipping $item_name (temp file)"
                continue
              fi
              
              # Copy the item
              if [ -f "$item" ]; then
                cp "$item" "builds/addons/py4godot/"
                echo "✅ Copied $item_name"
              elif [ -d "$item" ]; then
                cp -r "$item" "builds/addons/py4godot/"
                echo "✅ Copied $item_name (directory)"
              fi
            done
            
            echo "✅ Copied py4godot addon (Windows64 runtime only)"
          fi
          
          # Copy server modules (Python files, excluding .tmp/.TMP files)
          if [ -d "server" ]; then
            find server -name "*.py" ! -name "*.tmp" ! -name "*.TMP" -exec cp {} builds/server/ \;
            echo "✅ Copied server modules (excluding .tmp/.TMP files)"
          fi
          
          # Copy root Python files (excluding test files and .tmp/.TMP files)
          find . -maxdepth 1 -name "*.py" ! -name "*test*" ! -name "*.tmp" ! -name "*.TMP" -exec cp {} builds/ \;
          echo "✅ Copied root Python files (excluding test files and .tmp/.TMP files)"
          
          # Copy server_config.json
          if [ -f "server_config.json" ]; then
            cp server_config.json builds/
            echo "✅ Copied server_config.json"
          fi
          
          # Copy project configuration files
          config_files="project.godot export_presets.cfg"
          for config in $config_files; do
            if [ -f "$config" ]; then
              cp "$config" builds/
              echo "✅ Copied $config"
            fi
          done
          
          # Copy Python packages/subdirectories (excluding tests and .tmp/.TMP files)
          for dir in */; do
            dir_name="${dir%/}"
            # Skip certain directories
            if [[ "$dir_name" =~ test ]] || [[ "$dir_name" == "addons" ]] || [[ "$dir_name" == "server" ]] || [[ "$dir_name" == "logs" ]] || [[ "$dir_name" == "builds" ]] || [[ "$dir_name" == ".godot" ]]; then
              continue
            fi
            
            # Check if directory contains Python files
            if find "$dir_name" -maxdepth 1 -name "*.py" | grep -q .; then
              mkdir -p "builds/$dir_name"
              # Copy files excluding .tmp/.TMP files
              find "$dir_name" -type f ! -name "*.tmp" ! -name "*.TMP" -exec cp {} "builds/$dir_name/" \;
              echo "✅ Copied Python package: $dir_name (excluding .tmp/.TMP files)"
            fi
          done
          
          echo "File copying complete!"

      - name: Backup project.godot and disable py4godot for headless import
        run: |
          echo "=== Preparing for headless Godot import ==="
          
          # Backup original project.godot
          cp project.godot project.godot.backup
          echo "✅ Backed up original project.godot"
          
          # Create a version without py4godot addon for headless import
          # This prevents segfault during headless mode
          echo "Creating safe project.godot for headless import..."
          grep -v "py4godot" project.godot > project.godot.safe || cp project.godot project.godot.safe
          
          # Remove any addon configurations that might cause issues
          sed -i '/\[addon\]/,/^$/d' project.godot.safe 2>/dev/null || true
          sed -i '/py4godot/d' project.godot.safe 2>/dev/null || true
          
          # Use the safe version for import
          cp project.godot.safe project.godot
          
          echo "Safe project.godot content for headless import:"
          cat project.godot
          
          # Set permissions
          if [ -d "addons/py4godot" ]; then
            find addons/py4godot -type f -exec chmod 644 {} \;
            find addons/py4godot -type d -exec chmod 755 {} \;
            echo "✅ Set py4godot file permissions"
          fi

      - name: Restore py4godot configuration after export
        run: |
          echo "=== Restoring py4godot configuration ==="
          
          # Restore original project.godot with py4godot configuration
          if [ -f "project.godot.backup" ]; then
            cp project.godot.backup project.godot
            echo "✅ Restored original project.godot"
          fi
          
          # Ensure py4godot addon is properly configured
          if ! grep -q "py4godot" project.godot; then
            echo "Adding py4godot addon configuration..."
            echo "" >> project.godot
            echo "[addon]" >> project.godot
            echo "" >> project.godot
            echo "py4godot/enabled=true" >> project.godot
          fi
          
          echo "Final project.godot content with py4godot:"
          cat project.godot

      - name: Export artifacts
        id: export
        uses: firebelley/godot-export@v6.0.0
        with:
          godot_executable_download_url: https://github.com/godotengine/godot-builds/releases/download/4.4.1-stable/Godot_v4.4.1-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot-builds/releases/download/4.4.1-stable/Godot_v4.4.1-stable_export_templates.tpz
          relative_project_path: ./

      - name: Copy prepared files to export directory
        run: |
          echo "=== Copying prepared files to export directory ==="
          
          if [ -d "${{ steps.export.outputs.build_directory }}" ] && [ -d "builds" ]; then
            echo "Copying prepared runtime files to export directory..."
            
            # Copy our prepared py4godot addon (Windows64 only)
            if [ -d "builds/addons" ]; then
              cp -r builds/addons "${{ steps.export.outputs.build_directory }}/"
              echo "✅ Copied optimized py4godot addon"
            fi
            
            # Copy Python files and server modules
            if [ -d "builds/server" ]; then
              cp -r builds/server "${{ steps.export.outputs.build_directory }}/"
              echo "✅ Copied server modules"
            fi
            
            # Copy root Python files
            find builds -maxdepth 1 -name "*.py" -exec cp {} "${{ steps.export.outputs.build_directory }}/" \;
            echo "✅ Copied Python files"
            
            # Copy configuration files
            if [ -f "builds/server_config.json" ]; then
              cp builds/server_config.json "${{ steps.export.outputs.build_directory }}/"
              echo "✅ Copied server_config.json"
            fi
            
            echo "Final export directory contents:"
            ls -la "${{ steps.export.outputs.build_directory }}"
          else
            echo "⚠️ Export directory or builds directory not found, skipping file copy"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: PolyhedronEmu - ${{ matrix.platform }}
          path: build/*
