name: Godot build

on:
  workflow_run:
    workflows: ["Python lint & test"]
    types:
      - completed
    branches: [master]

jobs:
  Godot:
    runs-on: windows-2022
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions: write-all
    strategy:
      matrix:
        platform: [win64]
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Verify py4godot GDExtension
        run: |
          Write-Host "=== Checking py4godot GDExtension setup ===" -ForegroundColor Green
          
          # Check if the GDExtension file exists
          if (-not (Test-Path "addons\py4godot\python.gdextension")) {
            Write-Host "ERROR: py4godot GDExtension file not found!" -ForegroundColor Red
            exit 1
          }
          
          Write-Host "✅ GDExtension file found" -ForegroundColor Green
          Write-Host "GDExtension configuration:"
          Get-Content "addons\py4godot\python.gdextension"
          
          # Check Windows Python distribution
          if (-not (Test-Path "addons\py4godot\cpython-3.12.4-windows64")) {
            Write-Host "ERROR: Windows Python distribution directory not found!" -ForegroundColor Red
            exit 1
          }
          
          Write-Host "✅ Windows Python distribution directory found" -ForegroundColor Green
          
          # Check for the specific DLL file
          Write-Host "Checking for pythonscript.dll..."
          Write-Host "Windows Python directory contents:"
          if (Test-Path "addons\py4godot\cpython-3.12.4-windows64\python") {
            Get-ChildItem "addons\py4godot\cpython-3.12.4-windows64\python" | Format-Table Name, Length
          }
          
          $dllPath = "addons\py4godot\cpython-3.12.4-windows64\python\pythonscript.dll"
          $backupDllPath = "addons\py4godot\cpython-3.12.4-windows64\python\~pythonscript.dll"
          
          if (-not (Test-Path $dllPath)) {
            Write-Host "⚠️ pythonscript.dll not found, checking for backup file..." -ForegroundColor Yellow
            if (Test-Path $backupDllPath) {
              Write-Host "✅ Found backup file ~pythonscript.dll, copying to pythonscript.dll" -ForegroundColor Green
              Copy-Item $backupDllPath $dllPath
            } else {
              Write-Host "⚠️ Neither pythonscript.dll nor ~pythonscript.dll found!" -ForegroundColor Yellow
              Write-Host "Attempting to continue - Godot may handle missing DLL gracefully."
            }
          } else {
            Write-Host "✅ pythonscript.dll found" -ForegroundColor Green
          }
          
          # List all DLL files
          Write-Host "Available DLL files in py4godot:"
          Get-ChildItem -Path "addons\py4godot" -Recurse -Filter "*.dll" | ForEach-Object { Write-Host "  $($_.FullName)" }

      - name: Copy necessary project files
        run: |
          Write-Host "=== Copying necessary project files (excluding .tmp/.TMP files) ===" -ForegroundColor Green
          
          # Create builds directory structure
          New-Item -ItemType Directory -Path "builds\server" -Force | Out-Null
          New-Item -ItemType Directory -Path "builds\addons\py4godot" -Force | Out-Null
          
          # Copy py4godot addon with Windows64 runtime only
          if (Test-Path "addons\py4godot") {
            Write-Host "Copying py4godot files (Windows64 runtime only)..."
            
            # Copy all py4godot files except unwanted platform runtimes and .tmp/.TMP files
            Get-ChildItem "addons\py4godot" | ForEach-Object {
              $itemName = $_.Name
              
              # Skip unwanted platform runtimes
              if ($itemName -in @("cpython-3.12.4-linux64", "cpython-3.12.4-linuxarm64", "cpython-3.12.4-darwin64")) {
                Write-Host "⏭️ Skipping $itemName runtime" -ForegroundColor Yellow
                return
              }
              
              # Skip .tmp/.TMP files
              if ($itemName -like "*.tmp" -or $itemName -like "*.TMP") {
                Write-Host "⏭️ Skipping $itemName (temp file)" -ForegroundColor Yellow
                return
              }
              
              # Copy the item
              if ($_.PSIsContainer) {
                Copy-Item $_.FullName "builds\addons\py4godot\" -Recurse -Force
                Write-Host "✅ Copied $itemName (directory)" -ForegroundColor Green
              } else {
                Copy-Item $_.FullName "builds\addons\py4godot\" -Force
                Write-Host "✅ Copied $itemName" -ForegroundColor Green
              }
            }
            
            Write-Host "✅ Copied py4godot addon (Windows64 runtime only)" -ForegroundColor Green
          }
          
          # Copy server modules (Python files, excluding .tmp/.TMP files)
          if (Test-Path "server") {
            Get-ChildItem "server\*.py" | Where-Object { $_.Name -notlike "*.tmp" -and $_.Name -notlike "*.TMP" } | ForEach-Object {
              Copy-Item $_.FullName "builds\server\" -Force
            }
            Write-Host "✅ Copied server modules (excluding .tmp/.TMP files)" -ForegroundColor Green
          }
          
          # Copy root Python files (excluding test files and .tmp/.TMP files)
          Get-ChildItem "*.py" | Where-Object { $_.Name -notlike "*test*" -and $_.Name -notlike "*.tmp" -and $_.Name -notlike "*.TMP" } | ForEach-Object {
            Copy-Item $_.FullName "builds\" -Force
            Write-Host "✅ Copied $($_.Name)" -ForegroundColor Green
          }
          
          # Copy server_config.json
          if (Test-Path "server_config.json") {
            Copy-Item "server_config.json" "builds\" -Force
            Write-Host "✅ Copied server_config.json" -ForegroundColor Green
          }
          
          # Copy project configuration files
          $configFiles = @("project.godot", "export_presets.cfg")
          foreach ($config in $configFiles) {
            if (Test-Path $config) {
              Copy-Item $config "builds\" -Force
              Write-Host "✅ Copied $config" -ForegroundColor Green
            }
          }
          
          # Copy Python packages/subdirectories (excluding tests and .tmp/.TMP files)
          $skipDirs = @("addons", "server", "logs", "builds", ".godot")
          Get-ChildItem -Directory | Where-Object { $_.Name -notlike "*test*" -and $_.Name -notin $skipDirs } | ForEach-Object {
            $pyFiles = Get-ChildItem "$($_.FullName)\*.py" -ErrorAction SilentlyContinue
            if ($pyFiles.Count -gt 0) {
              $destDir = "builds\$($_.Name)"
              New-Item -ItemType Directory -Path $destDir -Force | Out-Null
              
              # Copy files excluding .tmp/.TMP files
              Get-ChildItem $_.FullName -Recurse | Where-Object { $_.Name -notlike "*.tmp" -and $_.Name -notlike "*.TMP" } | ForEach-Object {
                $relativePath = $_.FullName.Substring($($_.FullName).IndexOf($_.Directory.Parent.Name))
                $destPath = Join-Path $destDir (Split-Path $relativePath -Leaf)
                Copy-Item $_.FullName $destPath -Force
              }
              Write-Host "✅ Copied Python package: $($_.Name) (excluding .tmp/.TMP files)" -ForegroundColor Green
            }
          }
          
          Write-Host "File copying complete!" -ForegroundColor Green

      - name: Setup project for export
        run: |
          Write-Host "=== Setting up project for export ===" -ForegroundColor Green
          
          # Create .godot directory if it doesn't exist
          New-Item -ItemType Directory -Path ".godot" -Force | Out-Null
          
          # Ensure project settings recognize the GDExtension
          Write-Host "Checking project.godot for GDExtension configuration..."
          $projectContent = Get-Content "project.godot" -Raw
          if ($projectContent -notmatch "py4godot") {
            Write-Host "Adding py4godot addon to project.godot"
            Add-Content "project.godot" "`n[addon]`n`npy4godot/enabled=true"
          }
          
          # Show final project.godot content for debugging
          Write-Host "Final project.godot content:"
          Get-Content "project.godot"

      - name: Export with Godot (Multi-version approach)
        run: |
          Write-Host "=== Exporting with Godot (Multi-version approach) ===" -ForegroundColor Green
          
          # Create build directory
          New-Item -ItemType Directory -Path "build" -Force | Out-Null
          
          # Test multiple Godot versions
          $godotVersions = @(
            @{Version="4.3-stable"; Url="https://github.com/godotengine/godot-builds/releases/download/4.3-stable/Godot_v4.3-stable_win64.exe.zip"; Templates="https://github.com/godotengine/godot-builds/releases/download/4.3-stable/Godot_v4.3-stable_export_templates.tpz"; TemplateDir="4.3.stable"},
            @{Version="4.4-stable"; Url="https://github.com/godotengine/godot-builds/releases/download/4.4-stable/Godot_v4.4-stable_win64.exe.zip"; Templates="https://github.com/godotengine/godot-builds/releases/download/4.4-stable/Godot_v4.4-stable_export_templates.tpz"; TemplateDir="4.4.stable"},
            @{Version="4.4.1-stable"; Url="https://github.com/godotengine/godot-builds/releases/download/4.4.1-stable/Godot_v4.4.1-stable_win64.exe.zip"; Templates="https://github.com/godotengine/godot-builds/releases/download/4.4.1-stable/Godot_v4.4.1-stable_export_templates.tpz"; TemplateDir="4.4.1.stable"}
          )
          
          $exportSuccess = $false
          
          foreach ($version in $godotVersions) {
            if ($exportSuccess) { break }
            
                         Write-Host "=== Trying Godot $($version.Version) ===" -ForegroundColor Cyan
             $py4godotBackupPath = "py4godot_backup_$($version.Version.Replace('.', '_').Replace('-', '_'))"
             
             try {
               # Download Godot
               Write-Host "Downloading Godot $($version.Version)..."
               Invoke-WebRequest -Uri $version.Url -OutFile "godot_$($version.Version).zip"
               Expand-Archive "godot_$($version.Version).zip" -DestinationPath "godot_$($version.Version)" -Force
               
               # Download export templates
               Write-Host "Downloading export templates..."
               Invoke-WebRequest -Uri $version.Templates -OutFile "templates_$($version.Version).tpz"
               
               # Extract and install templates
               $templatesDir = "$env:APPDATA\Godot\export_templates\$($version.TemplateDir)"
               New-Item -ItemType Directory -Path $templatesDir -Force | Out-Null
               Add-Type -AssemblyName System.IO.Compression.FileSystem
               [System.IO.Compression.ZipFile]::ExtractToDirectory("templates_$($version.Version).tpz", $templatesDir)
               
               # Find Godot executable
               $godotExe = Get-ChildItem -Path "godot_$($version.Version)" -Filter "*.exe" -Recurse | Select-Object -First 1
               
               if (-not $godotExe) {
                 Write-Host "❌ Godot executable not found in extracted files" -ForegroundColor Red
                 continue
               }
               
               Write-Host "Found Godot executable: $($godotExe.FullName)"
               Write-Host "Testing Godot version..."
               & $godotExe.FullName --version
              
                             # Try export WITHOUT py4godot first (to test if base project works)
               Write-Host "Testing export WITHOUT py4godot..." -ForegroundColor Yellow
               
               if (Test-Path "addons\py4godot") {
                 Write-Host "Moving py4godot to temporary backup location..."
                 try {
                   Move-Item "addons\py4godot" $py4godotBackupPath -Force
                   Write-Host "✅ py4godot temporarily moved" -ForegroundColor Green
                 } catch {
                   Write-Host "⚠️ Could not move py4godot: $($_.Exception.Message)" -ForegroundColor Yellow
                   Write-Host "Trying copy and remove instead..."
                   Copy-Item "addons\py4godot" $py4godotBackupPath -Recurse -Force
                   Remove-Item "addons\py4godot" -Recurse -Force
                 }
               }
               
               # Try basic export
               $exportCmd = "& `"$($godotExe.FullName)`" --headless --export-release `"win64`" `"build\PolyhedronEmu_base.exe`" `"project.godot`""
               Write-Host "Running: $exportCmd"
               Invoke-Expression $exportCmd
               
               if (Test-Path "build\PolyhedronEmu_base.exe") {
                 Write-Host "✅ Base project export successful!" -ForegroundColor Green
                 
                 # Now try WITH py4godot
                 Write-Host "Testing export WITH py4godot..." -ForegroundColor Yellow
                 if (Test-Path $py4godotBackupPath) {
                   Write-Host "Restoring py4godot..."
                   try {
                     Move-Item $py4godotBackupPath "addons\py4godot" -Force
                     Write-Host "✅ py4godot restored" -ForegroundColor Green
                   } catch {
                     Write-Host "⚠️ Could not move py4godot back: $($_.Exception.Message)" -ForegroundColor Yellow
                     Copy-Item $py4godotBackupPath "addons\py4godot" -Recurse -Force
                     Remove-Item $py4godotBackupPath -Recurse -Force
                   }
                 }
                
                $exportCmd = "& `"$($godotExe.FullName)`" --headless --export-release `"win64`" `"build\PolyhedronEmu.exe`" `"project.godot`""
                Write-Host "Running: $exportCmd"
                try {
                  Invoke-Expression $exportCmd
                  if (Test-Path "build\PolyhedronEmu.exe") {
                    Write-Host "✅ Full export with py4godot successful!" -ForegroundColor Green
                    $exportSuccess = $true
                  } else {
                    Write-Host "⚠️ Export with py4godot failed, using base export" -ForegroundColor Yellow
                    Copy-Item "build\PolyhedronEmu_base.exe" "build\PolyhedronEmu.exe"
                    $exportSuccess = $true
                  }
                } catch {
                  Write-Host "⚠️ py4godot export crashed: $($_.Exception.Message)" -ForegroundColor Yellow
                  Write-Host "Using base export without py4godot" -ForegroundColor Yellow
                  Copy-Item "build\PolyhedronEmu_base.exe" "build\PolyhedronEmu.exe"
                  $exportSuccess = $true
                }
              } else {
                Write-Host "❌ Base project export failed" -ForegroundColor Red
              }
                         }
             catch {
               Write-Host "❌ Godot $($version.Version) failed: $($_.Exception.Message)" -ForegroundColor Red
               # Restore py4godot if it was backed up
               if (Test-Path $py4godotBackupPath) {
                 Write-Host "Restoring py4godot from backup due to error..."
                 try {
                   Move-Item $py4godotBackupPath "addons\py4godot" -Force
                 } catch {
                   Copy-Item $py4godotBackupPath "addons\py4godot" -Recurse -Force
                   Remove-Item $py4godotBackupPath -Recurse -Force
                 }
               }
               continue
             }
          }
          
          if (-not $exportSuccess) {
            Write-Host "❌ All Godot versions failed. Creating minimal build..." -ForegroundColor Red
            # Create a minimal executable placeholder
            "# PolyhedronEmu - Build failed, manual setup required" | Out-File "build\README.txt"
          }
          
          # Copy our prepared files regardless
          if (Test-Path "builds") {
            Copy-Item "builds\*" "build\" -Recurse -Force
            Write-Host "✅ Copied additional runtime files" -ForegroundColor Green
          }
          
          Write-Host "Final build directory contents:"
          Get-ChildItem "build" | Format-Table Name, Length

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: PolyhedronEmu - ${{ matrix.platform }}
          path: build/*
