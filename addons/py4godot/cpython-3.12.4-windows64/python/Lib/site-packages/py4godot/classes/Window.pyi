from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SystemFont as __systemfont__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.Theme as __theme__
import py4godot.classes.Window as __window__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.AcceptDialog as __acceptdialog__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.Popup as __popup__
import py4godot.classes.DisplayServer as __displayserver__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.PopupPanel as __popuppanel__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.EditorFileDialog as __editorfiledialog__
import py4godot.classes.FileDialog as __filedialog__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.ScriptCreateDialog as __scriptcreatedialog__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.StyleBoxFlat as __styleboxflat__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.StyleBox as __stylebox__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.ConfirmationDialog as __confirmationdialog__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.FontFile as __fontfile__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.Node as __node__
import py4godot.classes.Font as __font__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.StyleBoxTexture as __styleboxtexture__
import py4godot.classes.StyleBoxEmpty as __styleboxempty__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.Viewport as __viewport__
import py4godot.classes.StyleBoxLine as __styleboxline__
import py4godot.classes.FontVariation as __fontvariation__
import py4godot.classes.EditorCommandPalette as __editorcommandpalette__
import py4godot.classes.Texture2DRD as __texture2drd__


class Mode:
  MODE_WINDOWED:int = 0
  MODE_MINIMIZED:int = 1
  MODE_MAXIMIZED:int = 2
  MODE_FULLSCREEN:int = 3
  MODE_EXCLUSIVE_FULLSCREEN:int = 4
class Flags:
  FLAG_RESIZE_DISABLED:int = 0
  FLAG_BORDERLESS:int = 1
  FLAG_ALWAYS_ON_TOP:int = 2
  FLAG_TRANSPARENT:int = 3
  FLAG_NO_FOCUS:int = 4
  FLAG_POPUP:int = 5
  FLAG_EXTEND_TO_TITLE:int = 6
  FLAG_MOUSE_PASSTHROUGH:int = 7
  FLAG_SHARP_CORNERS:int = 8
  FLAG_EXCLUDE_FROM_CAPTURE:int = 9
  FLAG_MAX:int = 10
class ContentScaleMode:
  CONTENT_SCALE_MODE_DISABLED:int = 0
  CONTENT_SCALE_MODE_CANVAS_ITEMS:int = 1
  CONTENT_SCALE_MODE_VIEWPORT:int = 2
class ContentScaleAspect:
  CONTENT_SCALE_ASPECT_IGNORE:int = 0
  CONTENT_SCALE_ASPECT_KEEP:int = 1
  CONTENT_SCALE_ASPECT_KEEP_WIDTH:int = 2
  CONTENT_SCALE_ASPECT_KEEP_HEIGHT:int = 3
  CONTENT_SCALE_ASPECT_EXPAND:int = 4
class ContentScaleStretch:
  CONTENT_SCALE_STRETCH_FRACTIONAL:int = 0
  CONTENT_SCALE_STRETCH_INTEGER:int = 1
class LayoutDirection:
  LAYOUT_DIRECTION_INHERITED:int = 0
  LAYOUT_DIRECTION_APPLICATION_LOCALE:int = 1
  LAYOUT_DIRECTION_LTR:int = 2
  LAYOUT_DIRECTION_RTL:int = 3
  LAYOUT_DIRECTION_SYSTEM_LOCALE:int = 4
  LAYOUT_DIRECTION_MAX:int = 5
  LAYOUT_DIRECTION_LOCALE:int = 1
class WindowInitialPosition:
  WINDOW_INITIAL_POSITION_ABSOLUTE:int = 0
  WINDOW_INITIAL_POSITION_CENTER_PRIMARY_SCREEN:int = 1
  WINDOW_INITIAL_POSITION_CENTER_MAIN_WINDOW_SCREEN:int = 2
  WINDOW_INITIAL_POSITION_CENTER_OTHER_SCREEN:int = 3
  WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_MOUSE_FOCUS:int = 4
  WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_KEYBOARD_FOCUS:int = 5


class Window(__viewport__.Viewport):
  window_input: BuiltinSignal
  files_dropped: BuiltinSignal
  mouse_entered: BuiltinSignal
  mouse_exited: BuiltinSignal
  focus_entered: BuiltinSignal
  focus_exited: BuiltinSignal
  close_requested: BuiltinSignal
  go_back_requested: BuiltinSignal
  visibility_changed: BuiltinSignal
  about_to_popup: BuiltinSignal
  theme_changed: BuiltinSignal
  dpi_changed: BuiltinSignal
  titlebar_changed: BuiltinSignal
  title_changed: BuiltinSignal

  @staticmethod
  def constructor()->Window:pass



  @staticmethod
  def cast(other:__object__.Object)->Window:pass


  @property
  def mode(self)->int: pass
  @mode.setter
  def mode(self,  value:int)->None: pass
  @property
  def title(self)->str: pass
  @title.setter
  def title(self,  value:str)->None: pass
  @property
  def initial_position(self)->int: pass
  @initial_position.setter
  def initial_position(self,  value:int)->None: pass
  @property
  def position(self)->__core__.Vector2i: pass
  @position.setter
  def position(self,  value:__core__.Vector2i)->None: pass
  @property
  def size(self)->__core__.Vector2i: pass
  @size.setter
  def size(self,  value:__core__.Vector2i)->None: pass
  @property
  def current_screen(self)->int: pass
  @current_screen.setter
  def current_screen(self,  value:int)->None: pass
  @property
  def mouse_passthrough_polygon(self)->__core__.PackedVector2Array: pass
  @mouse_passthrough_polygon.setter
  def mouse_passthrough_polygon(self,  value:__core__.PackedVector2Array)->None: pass
  @property
  def visible(self)->bool: pass
  @visible.setter
  def visible(self,  value:bool)->None: pass
  @property
  def wrap_controls(self)->bool: pass
  @wrap_controls.setter
  def wrap_controls(self,  value:bool)->None: pass
  @property
  def transient(self)->bool: pass
  @transient.setter
  def transient(self,  value:bool)->None: pass
  @property
  def transient_to_focused(self)->bool: pass
  @transient_to_focused.setter
  def transient_to_focused(self,  value:bool)->None: pass
  @property
  def exclusive(self)->bool: pass
  @exclusive.setter
  def exclusive(self,  value:bool)->None: pass
  @property
  def unresizable(self)->bool: pass
  @unresizable.setter
  def unresizable(self,  value:bool)->None: pass
  @property
  def borderless(self)->bool: pass
  @borderless.setter
  def borderless(self,  value:bool)->None: pass
  @property
  def always_on_top(self)->bool: pass
  @always_on_top.setter
  def always_on_top(self,  value:bool)->None: pass
  @property
  def transparent(self)->bool: pass
  @transparent.setter
  def transparent(self,  value:bool)->None: pass
  @property
  def unfocusable(self)->bool: pass
  @unfocusable.setter
  def unfocusable(self,  value:bool)->None: pass
  @property
  def popup_window(self)->bool: pass
  @popup_window.setter
  def popup_window(self,  value:bool)->None: pass
  @property
  def extend_to_title(self)->bool: pass
  @extend_to_title.setter
  def extend_to_title(self,  value:bool)->None: pass
  @property
  def mouse_passthrough(self)->bool: pass
  @mouse_passthrough.setter
  def mouse_passthrough(self,  value:bool)->None: pass
  @property
  def sharp_corners(self)->bool: pass
  @sharp_corners.setter
  def sharp_corners(self,  value:bool)->None: pass
  @property
  def exclude_from_capture(self)->bool: pass
  @exclude_from_capture.setter
  def exclude_from_capture(self,  value:bool)->None: pass
  @property
  def force_native(self)->bool: pass
  @force_native.setter
  def force_native(self,  value:bool)->None: pass
  @property
  def min_size(self)->__core__.Vector2i: pass
  @min_size.setter
  def min_size(self,  value:__core__.Vector2i)->None: pass
  @property
  def max_size(self)->__core__.Vector2i: pass
  @max_size.setter
  def max_size(self,  value:__core__.Vector2i)->None: pass
  @property
  def keep_title_visible(self)->bool: pass
  @keep_title_visible.setter
  def keep_title_visible(self,  value:bool)->None: pass
  @property
  def content_scale_size(self)->__core__.Vector2i: pass
  @content_scale_size.setter
  def content_scale_size(self,  value:__core__.Vector2i)->None: pass
  @property
  def content_scale_mode(self)->int: pass
  @content_scale_mode.setter
  def content_scale_mode(self,  value:int)->None: pass
  @property
  def content_scale_aspect(self)->int: pass
  @content_scale_aspect.setter
  def content_scale_aspect(self,  value:int)->None: pass
  @property
  def content_scale_stretch(self)->int: pass
  @content_scale_stretch.setter
  def content_scale_stretch(self,  value:int)->None: pass
  @property
  def content_scale_factor(self)->float: pass
  @content_scale_factor.setter
  def content_scale_factor(self,  value:float)->None: pass
  @property
  def auto_translate(self)->bool: pass
  @auto_translate.setter
  def auto_translate(self,  value:bool)->None: pass
  @property
  def theme(self)->__theme__.Theme: pass
  @theme.setter
  def theme(self,  value:__theme__.Theme)->None: pass
  @property
  def theme_type_variation(self)->str: pass
  @theme_type_variation.setter
  def theme_type_variation(self,  value:str)->None: pass
  def _get_contents_minimum_size(self)->__core__.Vector2: pass

  def set_title(self, title:str)->None: pass

  def get_title(self)->str: pass

  def get_window_id(self)->int: pass

  def set_initial_position(self, initial_position:int )->None: pass

  def get_initial_position(self)->int: pass

  def set_current_screen(self, index:int)->None: pass

  def get_current_screen(self)->int: pass

  def set_position(self, position:__core__.Vector2i)->None: pass

  def get_position(self)->__core__.Vector2i: pass

  def move_to_center(self)->None: pass

  def set_size(self, size:__core__.Vector2i)->None: pass

  def get_size(self)->__core__.Vector2i: pass

  def reset_size(self)->None: pass

  def get_position_with_decorations(self)->__core__.Vector2i: pass

  def get_size_with_decorations(self)->__core__.Vector2i: pass

  def set_max_size(self, max_size:__core__.Vector2i)->None: pass

  def get_max_size(self)->__core__.Vector2i: pass

  def set_min_size(self, min_size:__core__.Vector2i)->None: pass

  def get_min_size(self)->__core__.Vector2i: pass

  def set_mode(self, mode:int )->None: pass

  def get_mode(self)->int: pass

  def set_flag(self, flag:int , enabled:bool)->None: pass

  def get_flag(self, flag:int )->bool: pass

  def is_maximize_allowed(self)->bool: pass

  def request_attention(self)->None: pass

  def move_to_foreground(self)->None: pass

  def set_visible(self, visible:bool)->None: pass

  def is_visible(self)->bool: pass

  def hide(self)->None: pass

  def show(self)->None: pass

  def set_transient(self, transient:bool)->None: pass

  def is_transient(self)->bool: pass

  def set_transient_to_focused(self, enable:bool)->None: pass

  def is_transient_to_focused(self)->bool: pass

  def set_exclusive(self, exclusive:bool)->None: pass

  def is_exclusive(self)->bool: pass

  def set_unparent_when_invisible(self, unparent:bool)->None: pass

  def can_draw(self)->bool: pass

  def has_focus(self)->bool: pass

  def grab_focus(self)->None: pass

  def start_drag(self)->None: pass

  def start_resize(self, edge:int )->None: pass

  def set_ime_active(self, active:bool)->None: pass

  def set_ime_position(self, position:__core__.Vector2i)->None: pass

  def is_embedded(self)->bool: pass

  def get_contents_minimum_size(self)->__core__.Vector2: pass

  def set_force_native(self, force_native:bool)->None: pass

  def get_force_native(self)->bool: pass

  def set_content_scale_size(self, size:__core__.Vector2i)->None: pass

  def get_content_scale_size(self)->__core__.Vector2i: pass

  def set_content_scale_mode(self, mode:int )->None: pass

  def get_content_scale_mode(self)->int: pass

  def set_content_scale_aspect(self, aspect:int )->None: pass

  def get_content_scale_aspect(self)->int: pass

  def set_content_scale_stretch(self, stretch:int )->None: pass

  def get_content_scale_stretch(self)->int: pass

  def set_keep_title_visible(self, title_visible:bool)->None: pass

  def get_keep_title_visible(self)->bool: pass

  def set_content_scale_factor(self, factor:float)->None: pass

  def get_content_scale_factor(self)->float: pass

  def set_use_font_oversampling(self, enable:bool)->None: pass

  def is_using_font_oversampling(self)->bool: pass

  def set_mouse_passthrough_polygon(self, polygon:__core__.PackedVector2Array)->None: pass

  def get_mouse_passthrough_polygon(self)->__core__.PackedVector2Array: pass

  def set_wrap_controls(self, enable:bool)->None: pass

  def is_wrapping_controls(self)->bool: pass

  def child_controls_changed(self)->None: pass

  def set_theme(self, theme:__theme__.Theme)->None: pass

  def get_theme(self)->__theme__.Theme: pass

  def set_theme_type_variation(self, theme_type:__core__.StringName|str)->None: pass

  def get_theme_type_variation(self)->__core__.StringName: pass

  def begin_bulk_theme_override(self)->None: pass

  def end_bulk_theme_override(self)->None: pass

  def add_theme_icon_override(self, name:__core__.StringName|str, texture:__texture2d__.Texture2D)->None: pass

  def add_theme_stylebox_override(self, name:__core__.StringName|str, stylebox:__stylebox__.StyleBox)->None: pass

  def add_theme_font_override(self, name:__core__.StringName|str, font:__font__.Font)->None: pass

  def add_theme_font_size_override(self, name:__core__.StringName|str, font_size:int)->None: pass

  def add_theme_color_override(self, name:__core__.StringName|str, color:__core__.Color)->None: pass

  def add_theme_constant_override(self, name:__core__.StringName|str, constant:int)->None: pass

  def remove_theme_icon_override(self, name:__core__.StringName|str)->None: pass

  def remove_theme_stylebox_override(self, name:__core__.StringName|str)->None: pass

  def remove_theme_font_override(self, name:__core__.StringName|str)->None: pass

  def remove_theme_font_size_override(self, name:__core__.StringName|str)->None: pass

  def remove_theme_color_override(self, name:__core__.StringName|str)->None: pass

  def remove_theme_constant_override(self, name:__core__.StringName|str)->None: pass

  def get_theme_icon(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__gradienttexture2d__.GradientTexture2D|__imagetexture__.ImageTexture|__atlastexture__.AtlasTexture|__animatedtexture__.AnimatedTexture|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__cameratexture__.CameraTexture|__externaltexture__.ExternalTexture|__placeholdertexture2d__.PlaceholderTexture2D|__compressedtexture2d__.CompressedTexture2D|__curvexyztexture__.CurveXYZTexture|__meshtexture__.MeshTexture|__viewporttexture__.ViewportTexture|__curvetexture__.CurveTexture|__gradienttexture1d__.GradientTexture1D|__texture2drd__.Texture2DRD: pass

  def get_theme_stylebox(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->__styleboxline__.StyleBoxLine|__styleboxflat__.StyleBoxFlat|__stylebox__.StyleBox|__styleboxtexture__.StyleBoxTexture|__styleboxempty__.StyleBoxEmpty: pass

  def get_theme_font(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->__fontfile__.FontFile|__font__.Font|__fontvariation__.FontVariation|__systemfont__.SystemFont: pass

  def get_theme_font_size(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->int: pass

  def get_theme_color(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->__core__.Color: pass

  def get_theme_constant(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->int: pass

  def has_theme_icon_override(self, name:__core__.StringName|str)->bool: pass

  def has_theme_stylebox_override(self, name:__core__.StringName|str)->bool: pass

  def has_theme_font_override(self, name:__core__.StringName|str)->bool: pass

  def has_theme_font_size_override(self, name:__core__.StringName|str)->bool: pass

  def has_theme_color_override(self, name:__core__.StringName|str)->bool: pass

  def has_theme_constant_override(self, name:__core__.StringName|str)->bool: pass

  def has_theme_icon(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->bool: pass

  def has_theme_stylebox(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->bool: pass

  def has_theme_font(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->bool: pass

  def has_theme_font_size(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->bool: pass

  def has_theme_color(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->bool: pass

  def has_theme_constant(self, name:__core__.StringName|str, theme_type:__core__.StringName|str= __core__.StringName.new0())->bool: pass

  def get_theme_default_base_scale(self)->float: pass

  def get_theme_default_font(self)->__fontfile__.FontFile|__font__.Font|__fontvariation__.FontVariation|__systemfont__.SystemFont: pass

  def get_theme_default_font_size(self)->int: pass

  def set_layout_direction(self, direction:int )->None: pass

  def get_layout_direction(self)->int: pass

  def is_layout_rtl(self)->bool: pass

  def set_auto_translate(self, enable:bool)->None: pass

  def is_auto_translating(self)->bool: pass

  def popup(self, rect:__core__.Rect2i= __core__.Rect2i.new0())->None: pass

  def popup_on_parent(self, parent_rect:__core__.Rect2i)->None: pass

  def popup_centered(self, minsize:__core__.Vector2i= __core__.Vector2i.new0())->None: pass

  def popup_centered_ratio(self, ratio:float=0.8)->None: pass

  def popup_centered_clamped(self, minsize:__core__.Vector2i= __core__.Vector2i.new0(), fallback_ratio:float=0.75)->None: pass

  def popup_exclusive(self, from_node:__node__.Node, rect:__core__.Rect2i= __core__.Rect2i.new0())->None: pass

  def popup_exclusive_on_parent(self, from_node:__node__.Node, parent_rect:__core__.Rect2i)->None: pass

  def popup_exclusive_centered(self, from_node:__node__.Node, minsize:__core__.Vector2i= __core__.Vector2i.new0())->None: pass

  def popup_exclusive_centered_ratio(self, from_node:__node__.Node, ratio:float=0.8)->None: pass

  def popup_exclusive_centered_clamped(self, from_node:__node__.Node, minsize:__core__.Vector2i= __core__.Vector2i.new0(), fallback_ratio:float=0.75)->None: pass


