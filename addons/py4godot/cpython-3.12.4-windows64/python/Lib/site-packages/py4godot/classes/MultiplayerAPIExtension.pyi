from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.MultiplayerAPI as __multiplayerapi__
import py4godot.classes.WebSocketMultiplayerPeer as __websocketmultiplayerpeer__
import py4godot.classes.OfflineMultiplayerPeer as __offlinemultiplayerpeer__
import py4godot.classes.MultiplayerPeer as __multiplayerpeer__
import py4godot.classes.Object as __object__
import py4godot.classes.MultiplayerPeerExtension as __multiplayerpeerextension__
import py4godot.classes.WebRTCMultiplayerPeer as __webrtcmultiplayerpeer__
import py4godot.classes.ENetMultiplayerPeer as __enetmultiplayerpeer__



class MultiplayerAPIExtension(__multiplayerapi__.MultiplayerAPI):

  @staticmethod
  def constructor()->MultiplayerAPIExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->MultiplayerAPIExtension:pass


  def _poll(self)->int: pass

  def _set_multiplayer_peer(self, multiplayer_peer:__multiplayerpeer__.MultiplayerPeer)->None: pass

  def _get_multiplayer_peer(self)->__multiplayerpeer__.MultiplayerPeer|__websocketmultiplayerpeer__.WebSocketMultiplayerPeer|__multiplayerpeerextension__.MultiplayerPeerExtension|__offlinemultiplayerpeer__.OfflineMultiplayerPeer|__webrtcmultiplayerpeer__.WebRTCMultiplayerPeer|__enetmultiplayerpeer__.ENetMultiplayerPeer: pass

  def _get_unique_id(self)->int: pass

  def _get_peer_ids(self)->__core__.PackedInt32Array: pass

  def _rpc(self, peer:int, object:__object__.Object, method:__core__.StringName|str, args:__core__.Array)->int: pass

  def _get_remote_sender_id(self)->int: pass

  def _object_configuration_add(self, object:__object__.Object, configuration:object)->int: pass

  def _object_configuration_remove(self, object:__object__.Object, configuration:object)->int: pass


