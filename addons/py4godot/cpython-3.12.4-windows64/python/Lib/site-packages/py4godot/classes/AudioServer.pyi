from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioEffectEQ10 as __audioeffecteq10__
import py4godot.classes.AudioEffectInstance as __audioeffectinstance__
import py4godot.classes.AudioEffectPitchShift as __audioeffectpitchshift__
import py4godot.classes.AudioEffectEQ6 as __audioeffecteq6__
import py4godot.classes.AudioEffectBandLimitFilter as __audioeffectbandlimitfilter__
import py4godot.classes.AudioEffectHighShelfFilter as __audioeffecthighshelffilter__
import py4godot.classes.AudioBusLayout as __audiobuslayout__
import py4godot.classes.AudioEffect as __audioeffect__
import py4godot.classes.AudioEffectCompressor as __audioeffectcompressor__
import py4godot.classes.AudioEffectLimiter as __audioeffectlimiter__
import py4godot.classes.AudioEffectPanner as __audioeffectpanner__
import py4godot.classes.AudioEffectPhaser as __audioeffectphaser__
import py4godot.classes.AudioEffectSpectrumAnalyzerInstance as __audioeffectspectrumanalyzerinstance__
import py4godot.classes.AudioEffectSpectrumAnalyzer as __audioeffectspectrumanalyzer__
import py4godot.classes.AudioEffectDistortion as __audioeffectdistortion__
import py4godot.classes.AudioStream as __audiostream__
import py4godot.classes.AudioEffectNotchFilter as __audioeffectnotchfilter__
import py4godot.classes.AudioEffectAmplify as __audioeffectamplify__
import py4godot.classes.AudioEffectFilter as __audioeffectfilter__
import py4godot.classes.AudioEffectRecord as __audioeffectrecord__
import py4godot.classes.AudioEffectEQ21 as __audioeffecteq21__
import py4godot.classes.AudioEffectReverb as __audioeffectreverb__
import py4godot.classes.AudioEffectDelay as __audioeffectdelay__
import py4godot.classes.AudioServer as __audioserver__
import py4godot.classes.Object as __object__
import py4godot.classes.AudioEffectChorus as __audioeffectchorus__
import py4godot.classes.AudioEffectStereoEnhance as __audioeffectstereoenhance__
import py4godot.classes.AudioEffectLowPassFilter as __audioeffectlowpassfilter__
import py4godot.classes.AudioEffectLowShelfFilter as __audioeffectlowshelffilter__
import py4godot.classes.AudioEffectCapture as __audioeffectcapture__
import py4godot.classes.AudioEffectBandPassFilter as __audioeffectbandpassfilter__
import py4godot.classes.AudioEffectEQ as __audioeffecteq__
import py4godot.classes.AudioEffectHardLimiter as __audioeffecthardlimiter__
import py4godot.classes.AudioEffectHighPassFilter as __audioeffecthighpassfilter__


class SpeakerMode:
  SPEAKER_MODE_STEREO:int = 0
  SPEAKER_SURROUND_31:int = 1
  SPEAKER_SURROUND_51:int = 2
  SPEAKER_SURROUND_71:int = 3
class PlaybackType:
  PLAYBACK_KIND_DEFAULT:int = 0
  PLAYBACK_KIND_STREAM:int = 1
  PLAYBACK_KIND_SAMPLE:int = 2
  PLAYBACK_KIND_MAX:int = 3


class AudioServer(__object__.Object):
  bus_layout_changed: BuiltinSignal
  bus_renamed: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->AudioServer:pass

  @staticmethod
  def instance()->AudioServer:pass

  @property
  def bus_count(self)->int: pass
  @bus_count.setter
  def bus_count(self,  value:int)->None: pass
  @property
  def output_device(self)->str: pass
  @output_device.setter
  def output_device(self,  value:str)->None: pass
  @property
  def input_device(self)->str: pass
  @input_device.setter
  def input_device(self,  value:str)->None: pass
  @property
  def playback_speed_scale(self)->float: pass
  @playback_speed_scale.setter
  def playback_speed_scale(self,  value:float)->None: pass
  def set_bus_count(self, amount:int)->None: pass

  def get_bus_count(self)->int: pass

  def remove_bus(self, index:int)->None: pass

  def add_bus(self, at_position:int=-1)->None: pass

  def move_bus(self, index:int, to_index:int)->None: pass

  def set_bus_name(self, bus_idx:int, name:str)->None: pass

  def get_bus_name(self, bus_idx:int)->str: pass

  def get_bus_index(self, bus_name:__core__.StringName|str)->int: pass

  def get_bus_channels(self, bus_idx:int)->int: pass

  def set_bus_volume_db(self, bus_idx:int, volume_db:float)->None: pass

  def get_bus_volume_db(self, bus_idx:int)->float: pass

  def set_bus_volume_linear(self, bus_idx:int, volume_linear:float)->None: pass

  def get_bus_volume_linear(self, bus_idx:int)->float: pass

  def set_bus_send(self, bus_idx:int, send:__core__.StringName|str)->None: pass

  def get_bus_send(self, bus_idx:int)->__core__.StringName: pass

  def set_bus_solo(self, bus_idx:int, enable:bool)->None: pass

  def is_bus_solo(self, bus_idx:int)->bool: pass

  def set_bus_mute(self, bus_idx:int, enable:bool)->None: pass

  def is_bus_mute(self, bus_idx:int)->bool: pass

  def set_bus_bypass_effects(self, bus_idx:int, enable:bool)->None: pass

  def is_bus_bypassing_effects(self, bus_idx:int)->bool: pass

  def add_bus_effect(self, bus_idx:int, effect:__audioeffect__.AudioEffect, at_position:int=-1)->None: pass

  def remove_bus_effect(self, bus_idx:int, effect_idx:int)->None: pass

  def get_bus_effect_count(self, bus_idx:int)->int: pass

  def get_bus_effect(self, bus_idx:int, effect_idx:int)->__audioeffecteq10__.AudioEffectEQ10|__audioeffectpitchshift__.AudioEffectPitchShift|__audioeffecteq6__.AudioEffectEQ6|__audioeffectbandlimitfilter__.AudioEffectBandLimitFilter|__audioeffecthighshelffilter__.AudioEffectHighShelfFilter|__audioeffectcompressor__.AudioEffectCompressor|__audioeffect__.AudioEffect|__audioeffectlimiter__.AudioEffectLimiter|__audioeffectpanner__.AudioEffectPanner|__audioeffectphaser__.AudioEffectPhaser|__audioeffectspectrumanalyzer__.AudioEffectSpectrumAnalyzer|__audioeffectdistortion__.AudioEffectDistortion|__audioeffectnotchfilter__.AudioEffectNotchFilter|__audioeffectamplify__.AudioEffectAmplify|__audioeffectfilter__.AudioEffectFilter|__audioeffectrecord__.AudioEffectRecord|__audioeffecteq21__.AudioEffectEQ21|__audioeffectreverb__.AudioEffectReverb|__audioeffectdelay__.AudioEffectDelay|__audioeffectchorus__.AudioEffectChorus|__audioeffectstereoenhance__.AudioEffectStereoEnhance|__audioeffectlowpassfilter__.AudioEffectLowPassFilter|__audioeffectlowshelffilter__.AudioEffectLowShelfFilter|__audioeffectcapture__.AudioEffectCapture|__audioeffectbandpassfilter__.AudioEffectBandPassFilter|__audioeffecteq__.AudioEffectEQ|__audioeffecthardlimiter__.AudioEffectHardLimiter|__audioeffecthighpassfilter__.AudioEffectHighPassFilter: pass

  def get_bus_effect_instance(self, bus_idx:int, effect_idx:int, channel:int=0)->__audioeffectspectrumanalyzerinstance__.AudioEffectSpectrumAnalyzerInstance|__audioeffectinstance__.AudioEffectInstance: pass

  def swap_bus_effects(self, bus_idx:int, effect_idx:int, by_effect_idx:int)->None: pass

  def set_bus_effect_enabled(self, bus_idx:int, effect_idx:int, enabled:bool)->None: pass

  def is_bus_effect_enabled(self, bus_idx:int, effect_idx:int)->bool: pass

  def get_bus_peak_volume_left_db(self, bus_idx:int, channel:int)->float: pass

  def get_bus_peak_volume_right_db(self, bus_idx:int, channel:int)->float: pass

  def set_playback_speed_scale(self, scale:float)->None: pass

  def get_playback_speed_scale(self)->float: pass

  def lock(self)->None: pass

  def unlock(self)->None: pass

  def get_speaker_mode(self)->int: pass

  def get_mix_rate(self)->float: pass

  def get_input_mix_rate(self)->float: pass

  def get_driver_name(self)->str: pass

  def get_output_device_list(self)->__core__.PackedStringArray: pass

  def get_output_device(self)->str: pass

  def set_output_device(self, name:str)->None: pass

  def get_time_to_next_mix(self)->float: pass

  def get_time_since_last_mix(self)->float: pass

  def get_output_latency(self)->float: pass

  def get_input_device_list(self)->__core__.PackedStringArray: pass

  def get_input_device(self)->str: pass

  def set_input_device(self, name:str)->None: pass

  def set_bus_layout(self, bus_layout:__audiobuslayout__.AudioBusLayout)->None: pass

  def generate_bus_layout(self)->__audiobuslayout__.AudioBusLayout: pass

  def set_enable_tagging_used_audio_streams(self, enable:bool)->None: pass

  def is_stream_registered_as_sample(self, stream:__audiostream__.AudioStream)->bool: pass

  def register_stream_as_sample(self, stream:__audiostream__.AudioStream)->None: pass


