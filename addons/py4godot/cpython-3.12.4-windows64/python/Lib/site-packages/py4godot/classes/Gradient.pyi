from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Gradient as __gradient__
import py4godot.classes.Resource as __resource__


class InterpolationMode:
  GRADIENT_INTERPOLATE_LINEAR:int = 0
  GRADIENT_INTERPOLATE_CONSTANT:int = 1
  GRADIENT_INTERPOLATE_CUBIC:int = 2
class ColorSpace:
  GRADIENT_COLOR_SPACE_SRGB:int = 0
  GRADIENT_COLOR_SPACE_LINEAR_SRGB:int = 1
  GRADIENT_COLOR_SPACE_OKLAB:int = 2


class Gradient(__resource__.Resource):

  @staticmethod
  def constructor()->Gradient:pass



  @staticmethod
  def cast(other:__object__.Object)->Gradient:pass


  @property
  def interpolation_mode(self)->int: pass
  @interpolation_mode.setter
  def interpolation_mode(self,  value:int)->None: pass
  @property
  def interpolation_color_space(self)->int: pass
  @interpolation_color_space.setter
  def interpolation_color_space(self,  value:int)->None: pass
  @property
  def offsets(self)->__core__.PackedFloat32Array: pass
  @offsets.setter
  def offsets(self,  value:__core__.PackedFloat32Array)->None: pass
  @property
  def colors(self)->__core__.PackedColorArray: pass
  @colors.setter
  def colors(self,  value:__core__.PackedColorArray)->None: pass
  def add_point(self, offset:float, color:__core__.Color)->None: pass

  def remove_point(self, point:int)->None: pass

  def set_offset(self, point:int, offset:float)->None: pass

  def get_offset(self, point:int)->float: pass

  def reverse(self)->None: pass

  def set_color(self, point:int, color:__core__.Color)->None: pass

  def get_color(self, point:int)->__core__.Color: pass

  def sample(self, offset:float)->__core__.Color: pass

  def get_point_count(self)->int: pass

  def set_offsets(self, offsets:__core__.PackedFloat32Array)->None: pass

  def get_offsets(self)->__core__.PackedFloat32Array: pass

  def set_colors(self, colors:__core__.PackedColorArray)->None: pass

  def get_colors(self)->__core__.PackedColorArray: pass

  def set_interpolation_mode(self, interpolation_mode:int )->None: pass

  def get_interpolation_mode(self)->int: pass

  def set_interpolation_color_space(self, interpolation_color_space:int )->None: pass

  def get_interpolation_color_space(self)->int: pass


