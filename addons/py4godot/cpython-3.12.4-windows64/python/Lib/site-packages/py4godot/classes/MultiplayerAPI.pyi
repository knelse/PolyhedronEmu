from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.MultiplayerAPI as __multiplayerapi__
import py4godot.classes.WebSocketMultiplayerPeer as __websocketmultiplayerpeer__
import py4godot.classes.OfflineMultiplayerPeer as __offlinemultiplayerpeer__
import py4godot.classes.MultiplayerAPIExtension as __multiplayerapiextension__
import py4godot.classes.MultiplayerPeer as __multiplayerpeer__
import py4godot.classes.SceneMultiplayer as __scenemultiplayer__
import py4godot.classes.Object as __object__
import py4godot.classes.MultiplayerPeerExtension as __multiplayerpeerextension__
import py4godot.classes.WebRTCMultiplayerPeer as __webrtcmultiplayerpeer__
import py4godot.classes.ENetMultiplayerPeer as __enetmultiplayerpeer__


class RPCMode:
  RPC_MODE_DISABLED:int = 0
  RPC_MODE_ANY_PEER:int = 1
  RPC_MODE_AUTHORITY:int = 2


class MultiplayerAPI(__refcounted__.RefCounted):
  peer_connected: BuiltinSignal
  peer_disconnected: BuiltinSignal
  connected_to_server: BuiltinSignal
  connection_failed: BuiltinSignal
  server_disconnected: BuiltinSignal

  @staticmethod
  def constructor()->MultiplayerAPI:pass



  @staticmethod
  def cast(other:__object__.Object)->MultiplayerAPI:pass


  @property
  def multiplayer_peer(self)->__multiplayerpeer__.MultiplayerPeer|__websocketmultiplayerpeer__.WebSocketMultiplayerPeer|__multiplayerpeerextension__.MultiplayerPeerExtension|__offlinemultiplayerpeer__.OfflineMultiplayerPeer|__webrtcmultiplayerpeer__.WebRTCMultiplayerPeer|__enetmultiplayerpeer__.ENetMultiplayerPeer: pass
  @multiplayer_peer.setter
  def multiplayer_peer(self,  value:__multiplayerpeer__.MultiplayerPeer)->None: pass
  def has_multiplayer_peer(self)->bool: pass

  def get_multiplayer_peer(self)->__multiplayerpeer__.MultiplayerPeer|__websocketmultiplayerpeer__.WebSocketMultiplayerPeer|__multiplayerpeerextension__.MultiplayerPeerExtension|__offlinemultiplayerpeer__.OfflineMultiplayerPeer|__webrtcmultiplayerpeer__.WebRTCMultiplayerPeer|__enetmultiplayerpeer__.ENetMultiplayerPeer: pass

  def set_multiplayer_peer(self, peer:__multiplayerpeer__.MultiplayerPeer)->None: pass

  def get_unique_id(self)->int: pass

  def is_server(self)->bool: pass

  def get_remote_sender_id(self)->int: pass

  def poll(self)->int: pass

  def rpc(self, peer:int, object:__object__.Object, method:__core__.StringName|str, arguments:__core__.Array= __core__.Array.new0())->int: pass

  def object_configuration_add(self, object:__object__.Object, configuration:object)->int: pass

  def object_configuration_remove(self, object:__object__.Object, configuration:object)->int: pass

  def get_peers(self)->__core__.PackedInt32Array: pass

  @staticmethod
  def set_default_interface(interface_name:__core__.StringName|str)->None: pass

  @staticmethod
  def get_default_interface()->__core__.StringName: pass

  @staticmethod
  def create_default_interface()->__multiplayerapi__.MultiplayerAPI|__scenemultiplayer__.SceneMultiplayer|__multiplayerapiextension__.MultiplayerAPIExtension: pass


