from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.c as __c__
import py4godot.classes.p as __p__
import py4godot.classes.d as __d__
import py4godot.classes.a as __a__
import py4godot.classes.o as __o__
import py4godot.classes.r as __r__
import py4godot.classes.V as __v__
import py4godot.classes.e as __e__
import py4godot.classes.2 as __2__
import py4godot.classes.y as __y__
import py4godot.classes.T as __t__
import py4godot.classes.Image as __image__
import py4godot.classes.Resource as __resource__
import py4godot.classes.t as __t__
import py4godot.classes.A as __a__
import py4godot.classes.P as __p__
import py4godot.classes.k as __k__



class BitMap(__resource__.Resource):

  @staticmethod
  def constructor()->BitMap:pass



  @staticmethod
  def cast(other:__object__.Object)->BitMap:pass


  @property
  def data(self)->__core__.Dictionary: pass
  @data.setter
  def data(self,  value:__core__.Dictionary)->None: pass
  def create(self, size:__core__.Vector2i)->None: pass

  def create_from_image_alpha(self, image:__image__.Image, threshold:float=0.1)->None: pass

  def set_bitv(self, position:__core__.Vector2i, bit:bool)->None: pass

  def set_bit(self, x:int, y:int, bit:bool)->None: pass

  def get_bitv(self, position:__core__.Vector2i)->bool: pass

  def get_bit(self, x:int, y:int)->bool: pass

  def set_bit_rect(self, rect:__core__.Rect2i, bit:bool)->None: pass

  def get_true_bit_count(self)->int: pass

  def get_size(self)->__core__.Vector2i: pass

  def resize(self, new_size:__core__.Vector2i)->None: pass

  def grow_mask(self, pixels:int, rect:__core__.Rect2i)->None: pass

  def convert_to_image(self)->__image__.Image: pass

  def opaque_to_polygons(self, rect:__core__.Rect2i, epsilon:float=2.0)->typedarray::PackedVector2Array: pass


