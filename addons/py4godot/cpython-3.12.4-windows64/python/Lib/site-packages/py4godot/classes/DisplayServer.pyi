from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.R as __r__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.d as __d__
import py4godot.classes.y as __y__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.t as __t__
import py4godot.classes.DisplayServer as __displayserver__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.Object as __object__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.Image as __image__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.Resource as __resource__
import py4godot.classes.A as __a__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.D as __d__
import py4godot.classes.o as __o__
import py4godot.classes.r as __r__
import py4godot.classes.T as __t__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.c as __c__
import py4godot.classes.p as __p__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.i as __i__
import py4godot.classes.a as __a__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.2 as __2__
import py4godot.classes.e as __e__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.n as __n__


class Feature:
  FEATURE_GLOBAL_MENU:int = 0
  FEATURE_SUBWINDOWS:int = 1
  FEATURE_TOUCHSCREEN:int = 2
  FEATURE_MOUSE:int = 3
  FEATURE_MOUSE_WARP:int = 4
  FEATURE_CLIPBOARD:int = 5
  FEATURE_VIRTUAL_KEYBOARD:int = 6
  FEATURE_CURSOR_SHAPE:int = 7
  FEATURE_CUSTOM_CURSOR_SHAPE:int = 8
  FEATURE_NATIVE_DIALOG:int = 9
  FEATURE_IME:int = 10
  FEATURE_WINDOW_TRANSPARENCY:int = 11
  FEATURE_HIDPI:int = 12
  FEATURE_ICON:int = 13
  FEATURE_NATIVE_ICON:int = 14
  FEATURE_ORIENTATION:int = 15
  FEATURE_SWAP_BUFFERS:int = 16
  FEATURE_CLIPBOARD_PRIMARY:int = 18
  FEATURE_TEXT_TO_SPEECH:int = 19
  FEATURE_EXTEND_TO_TITLE:int = 20
  FEATURE_SCREEN_CAPTURE:int = 21
  FEATURE_STATUS_INDICATOR:int = 22
  FEATURE_NATIVE_HELP:int = 23
  FEATURE_NATIVE_DIALOG_INPUT:int = 24
  FEATURE_NATIVE_DIALOG_FILE:int = 25
  FEATURE_NATIVE_DIALOG_FILE_EXTRA:int = 26
  FEATURE_WINDOW_DRAG:int = 27
  FEATURE_SCREEN_EXCLUDE_FROM_CAPTURE:int = 28
  FEATURE_WINDOW_EMBEDDING:int = 29
  FEATURE_NATIVE_DIALOG_FILE_MIME:int = 30
  FEATURE_EMOJI_AND_SYMBOL_PICKER:int = 31
class MouseMode:
  MOUSE_MODE_VISIBLE:int = 0
  MOUSE_MODE_HIDDEN:int = 1
  MOUSE_MODE_CAPTURED:int = 2
  MOUSE_MODE_CONFINED:int = 3
  MOUSE_MODE_CONFINED_HIDDEN:int = 4
  MOUSE_MODE_MAX:int = 5
class ScreenOrientation:
  SCREEN_LANDSCAPE:int = 0
  SCREEN_PORTRAIT:int = 1
  SCREEN_REVERSE_LANDSCAPE:int = 2
  SCREEN_REVERSE_PORTRAIT:int = 3
  SCREEN_SENSOR_LANDSCAPE:int = 4
  SCREEN_SENSOR_PORTRAIT:int = 5
  SCREEN_SENSOR:int = 6
class VirtualKeyboardType:
  KEYBOARD_KIND_DEFAULT:int = 0
  KEYBOARD_KIND_MULTILINE:int = 1
  KEYBOARD_KIND_NUMBER:int = 2
  KEYBOARD_KIND_NUMBER_DECIMAL:int = 3
  KEYBOARD_KIND_PHONE:int = 4
  KEYBOARD_KIND_EMAIL_ADDRESS:int = 5
  KEYBOARD_KIND_PASSWORD:int = 6
  KEYBOARD_KIND_URL:int = 7
class CursorShape:
  CURSOR_ARROW:int = 0
  CURSOR_IBEAM:int = 1
  CURSOR_POINTING_HAND:int = 2
  CURSOR_CROSS:int = 3
  CURSOR_WAIT:int = 4
  CURSOR_BUSY:int = 5
  CURSOR_DRAG:int = 6
  CURSOR_CAN_DROP:int = 7
  CURSOR_FORBIDDEN:int = 8
  CURSOR_VSIZE:int = 9
  CURSOR_HSIZE:int = 10
  CURSOR_BDIAGSIZE:int = 11
  CURSOR_FDIAGSIZE:int = 12
  CURSOR_MOVE:int = 13
  CURSOR_VSPLIT:int = 14
  CURSOR_HSPLIT:int = 15
  CURSOR_HELP:int = 16
  CURSOR_MAX:int = 17
class FileDialogMode:
  FILE_DIALOG_MODE_OPEN_FILE:int = 0
  FILE_DIALOG_MODE_OPEN_FILES:int = 1
  FILE_DIALOG_MODE_OPEN_DIR:int = 2
  FILE_DIALOG_MODE_OPEN_ANY:int = 3
  FILE_DIALOG_MODE_SAVE_FILE:int = 4
class WindowMode:
  WINDOW_MODE_WINDOWED:int = 0
  WINDOW_MODE_MINIMIZED:int = 1
  WINDOW_MODE_MAXIMIZED:int = 2
  WINDOW_MODE_FULLSCREEN:int = 3
  WINDOW_MODE_EXCLUSIVE_FULLSCREEN:int = 4
class WindowFlags:
  WINDOW_FLAG_RESIZE_DISABLED:int = 0
  WINDOW_FLAG_BORDERLESS:int = 1
  WINDOW_FLAG_ALWAYS_ON_TOP:int = 2
  WINDOW_FLAG_TRANSPARENT:int = 3
  WINDOW_FLAG_NO_FOCUS:int = 4
  WINDOW_FLAG_POPUP:int = 5
  WINDOW_FLAG_EXTEND_TO_TITLE:int = 6
  WINDOW_FLAG_MOUSE_PASSTHROUGH:int = 7
  WINDOW_FLAG_SHARP_CORNERS:int = 8
  WINDOW_FLAG_EXCLUDE_FROM_CAPTURE:int = 9
  WINDOW_FLAG_MAX:int = 10
class WindowEvent:
  WINDOW_EVENT_MOUSE_ENTER:int = 0
  WINDOW_EVENT_MOUSE_EXIT:int = 1
  WINDOW_EVENT_FOCUS_IN:int = 2
  WINDOW_EVENT_FOCUS_OUT:int = 3
  WINDOW_EVENT_CLOSE_REQUEST:int = 4
  WINDOW_EVENT_GO_BACK_REQUEST:int = 5
  WINDOW_EVENT_DPI_CHANGE:int = 6
  WINDOW_EVENT_TITLEBAR_CHANGE:int = 7
class WindowResizeEdge:
  WINDOW_EDGE_TOPERATOR_LEFT:int = 0
  WINDOW_EDGE_TOP:int = 1
  WINDOW_EDGE_TOPERATOR_RIGHT:int = 2
  WINDOW_EDGE_LEFT:int = 3
  WINDOW_EDGE_RIGHT:int = 4
  WINDOW_EDGE_BOTTOM_LEFT:int = 5
  WINDOW_EDGE_BOTTOM:int = 6
  WINDOW_EDGE_BOTTOM_RIGHT:int = 7
  WINDOW_EDGE_MAX:int = 8
class VSyncMode:
  VSYNC_DISABLED:int = 0
  VSYNC_ENABLED:int = 1
  VSYNC_ADAPTIVE:int = 2
  VSYNC_MAILBOX:int = 3
class HandleType:
  DISPLAY_HANDLE:int = 0
  WINDOW_HANDLE:int = 1
  WINDOW_VIEW:int = 2
  OPENGL_CONTEXT:int = 3
  EGL_DISPLAY:int = 4
  EGL_CONFIG:int = 5
class TTSUtteranceEvent:
  TTS_UTTERANCE_STARTED:int = 0
  TTS_UTTERANCE_ENDED:int = 1
  TTS_UTTERANCE_CANCELED:int = 2
  TTS_UTTERANCE_BOUNDARY:int = 3


class DisplayServer(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->DisplayServer:pass

  @staticmethod
  def instance()->DisplayServer:pass

  def has_feature(self, feature:int )->bool: pass

  def get_name(self)->str: pass

  def help_set_search_callbacks(self, search_callback:__core__.Callable, action_callback:__core__.Callable)->None: pass

  def global_menu_set_popup_callbacks(self, menu_root:str, open_callback:__core__.Callable, close_callback:__core__.Callable)->None: pass

  def global_menu_add_submenu_item(self, menu_root:str, label:str, submenu:str, index:int=-1)->int: pass

  def global_menu_add_item(self, menu_root:str, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def global_menu_add_check_item(self, menu_root:str, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def global_menu_add_icon_item(self, menu_root:str, icon:__texture2d__.Texture2D, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def global_menu_add_icon_check_item(self, menu_root:str, icon:__texture2d__.Texture2D, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def global_menu_add_radio_check_item(self, menu_root:str, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def global_menu_add_icon_radio_check_item(self, menu_root:str, icon:__texture2d__.Texture2D, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def global_menu_add_multistate_item(self, menu_root:str, label:str, max_states:int, default_state:int, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def global_menu_add_separator(self, menu_root:str, index:int=-1)->int: pass

  def global_menu_get_item_index_from_text(self, menu_root:str, text:str)->int: pass

  def global_menu_get_item_index_from_tag(self, menu_root:str, tag:object)->int: pass

  def global_menu_is_item_checked(self, menu_root:str, idx:int)->bool: pass

  def global_menu_is_item_checkable(self, menu_root:str, idx:int)->bool: pass

  def global_menu_is_item_radio_checkable(self, menu_root:str, idx:int)->bool: pass

  def global_menu_get_item_callback(self, menu_root:str, idx:int)->__core__.Callable: pass

  def global_menu_get_item_key_callback(self, menu_root:str, idx:int)->__core__.Callable: pass

  def global_menu_get_item_tag(self, menu_root:str, idx:int)->object: pass

  def global_menu_get_item_text(self, menu_root:str, idx:int)->str: pass

  def global_menu_get_item_submenu(self, menu_root:str, idx:int)->str: pass

  def global_menu_get_item_accelerator(self, menu_root:str, idx:int)->int: pass

  def global_menu_is_item_disabled(self, menu_root:str, idx:int)->bool: pass

  def global_menu_is_item_hidden(self, menu_root:str, idx:int)->bool: pass

  def global_menu_get_item_tooltip(self, menu_root:str, idx:int)->str: pass

  def global_menu_get_item_state(self, menu_root:str, idx:int)->int: pass

  def global_menu_get_item_max_states(self, menu_root:str, idx:int)->int: pass

  def global_menu_get_item_icon(self, menu_root:str, idx:int)->__noisetexture2d__.NoiseTexture2D|__texture2d__.Texture2D|__gradienttexture2d__.GradientTexture2D|__imagetexture__.ImageTexture|__atlastexture__.AtlasTexture|__animatedtexture__.AnimatedTexture|__canvastexture__.CanvasTexture|__portablecompressedtexture2d__.PortableCompressedTexture2D|__cameratexture__.CameraTexture|__externaltexture__.ExternalTexture|__placeholdertexture2d__.PlaceholderTexture2D|__compressedtexture2d__.CompressedTexture2D|__curvexyztexture__.CurveXYZTexture|__meshtexture__.MeshTexture|__viewporttexture__.ViewportTexture|__curvetexture__.CurveTexture|__gradienttexture1d__.GradientTexture1D|__texture2drd__.Texture2DRD: pass

  def global_menu_get_item_indentation_level(self, menu_root:str, idx:int)->int: pass

  def global_menu_set_item_checked(self, menu_root:str, idx:int, checked:bool)->None: pass

  def global_menu_set_item_checkable(self, menu_root:str, idx:int, checkable:bool)->None: pass

  def global_menu_set_item_radio_checkable(self, menu_root:str, idx:int, checkable:bool)->None: pass

  def global_menu_set_item_callback(self, menu_root:str, idx:int, callback:__core__.Callable)->None: pass

  def global_menu_set_item_hover_callbacks(self, menu_root:str, idx:int, callback:__core__.Callable)->None: pass

  def global_menu_set_item_key_callback(self, menu_root:str, idx:int, key_callback:__core__.Callable)->None: pass

  def global_menu_set_item_tag(self, menu_root:str, idx:int, tag:object)->None: pass

  def global_menu_set_item_text(self, menu_root:str, idx:int, text:str)->None: pass

  def global_menu_set_item_submenu(self, menu_root:str, idx:int, submenu:str)->None: pass

  def global_menu_set_item_accelerator(self, menu_root:str, idx:int, keycode:int )->None: pass

  def global_menu_set_item_disabled(self, menu_root:str, idx:int, disabled:bool)->None: pass

  def global_menu_set_item_hidden(self, menu_root:str, idx:int, hidden:bool)->None: pass

  def global_menu_set_item_tooltip(self, menu_root:str, idx:int, tooltip:str)->None: pass

  def global_menu_set_item_state(self, menu_root:str, idx:int, state:int)->None: pass

  def global_menu_set_item_max_states(self, menu_root:str, idx:int, max_states:int)->None: pass

  def global_menu_set_item_icon(self, menu_root:str, idx:int, icon:__texture2d__.Texture2D)->None: pass

  def global_menu_set_item_indentation_level(self, menu_root:str, idx:int, level:int)->None: pass

  def global_menu_get_item_count(self, menu_root:str)->int: pass

  def global_menu_remove_item(self, menu_root:str, idx:int)->None: pass

  def global_menu_clear(self, menu_root:str)->None: pass

  def global_menu_get_system_menu_roots(self)->__core__.Dictionary: pass

  def tts_is_speaking(self)->bool: pass

  def tts_is_paused(self)->bool: pass

  def tts_get_voices(self)->typedarray::Dictionary: pass

  def tts_get_voices_for_language(self, language:str)->__core__.PackedStringArray: pass

  def tts_speak(self, text:str, voice:str, volume:int=50, pitch:float=1.0, rate:float=1.0, utterance_id:int=0, interrupt:bool=False)->None: pass

  def tts_pause(self)->None: pass

  def tts_resume(self)->None: pass

  def tts_stop(self)->None: pass

  def tts_set_utterance_callback(self, event:int , callable:__core__.Callable)->None: pass

  def is_dark_mode_supported(self)->bool: pass

  def is_dark_mode(self)->bool: pass

  def get_accent_color(self)->__core__.Color: pass

  def get_base_color(self)->__core__.Color: pass

  def set_system_theme_change_callback(self, callable:__core__.Callable)->None: pass

  def mouse_set_mode(self, mouse_mode:int )->None: pass

  def mouse_get_mode(self)->int: pass

  def warp_mouse(self, position:__core__.Vector2i)->None: pass

  def mouse_get_position(self)->__core__.Vector2i: pass

  def mouse_get_button_state(self)->int: pass

  def clipboard_set(self, clipboard:str)->None: pass

  def clipboard_get(self)->str: pass

  def clipboard_get_image(self)->__image__.Image: pass

  def clipboard_has(self)->bool: pass

  def clipboard_has_image(self)->bool: pass

  def clipboard_set_primary(self, clipboard_primary:str)->None: pass

  def clipboard_get_primary(self)->str: pass

  def get_display_cutouts(self)->typedarray::Rect2: pass

  def get_display_safe_area(self)->__core__.Rect2i: pass

  def get_screen_count(self)->int: pass

  def get_primary_screen(self)->int: pass

  def get_keyboard_focus_screen(self)->int: pass

  def get_screen_from_rect(self, rect:__core__.Rect2)->int: pass

  def screen_get_position(self, screen:int=-1)->__core__.Vector2i: pass

  def screen_get_size(self, screen:int=-1)->__core__.Vector2i: pass

  def screen_get_usable_rect(self, screen:int=-1)->__core__.Rect2i: pass

  def screen_get_dpi(self, screen:int=-1)->int: pass

  def screen_get_scale(self, screen:int=-1)->float: pass

  def is_touchscreen_available(self)->bool: pass

  def screen_get_max_scale(self)->float: pass

  def screen_get_refresh_rate(self, screen:int=-1)->float: pass

  def screen_get_pixel(self, position:__core__.Vector2i)->__core__.Color: pass

  def screen_get_image(self, screen:int=-1)->__image__.Image: pass

  def screen_get_image_rect(self, rect:__core__.Rect2i)->__image__.Image: pass

  def screen_set_orientation(self, orientation:int , screen:int=-1)->None: pass

  def screen_get_orientation(self, screen:int=-1)->int: pass

  def screen_set_keep_on(self, enable:bool)->None: pass

  def screen_is_kept_on(self)->bool: pass

  def get_window_list(self)->__core__.PackedInt32Array: pass

  def get_window_at_screen_position(self, position:__core__.Vector2i)->int: pass

  def window_get_native_handle(self, handle_type:int , window_id:int=0)->int: pass

  def window_get_active_popup(self)->int: pass

  def window_set_popup_safe_rect(self, window:int, rect:__core__.Rect2i)->None: pass

  def window_get_popup_safe_rect(self, window:int)->__core__.Rect2i: pass

  def window_set_title(self, title:str, window_id:int=0)->None: pass

  def window_get_title_size(self, title:str, window_id:int=0)->__core__.Vector2i: pass

  def window_set_mouse_passthrough(self, region:__core__.PackedVector2Array, window_id:int=0)->None: pass

  def window_get_current_screen(self, window_id:int=0)->int: pass

  def window_set_current_screen(self, screen:int, window_id:int=0)->None: pass

  def window_get_position(self, window_id:int=0)->__core__.Vector2i: pass

  def window_get_position_with_decorations(self, window_id:int=0)->__core__.Vector2i: pass

  def window_set_position(self, position:__core__.Vector2i, window_id:int=0)->None: pass

  def window_get_size(self, window_id:int=0)->__core__.Vector2i: pass

  def window_set_size(self, size:__core__.Vector2i, window_id:int=0)->None: pass

  def window_set_rect_changed_callback(self, callback:__core__.Callable, window_id:int=0)->None: pass

  def window_set_window_event_callback(self, callback:__core__.Callable, window_id:int=0)->None: pass

  def window_set_input_event_callback(self, callback:__core__.Callable, window_id:int=0)->None: pass

  def window_set_input_text_callback(self, callback:__core__.Callable, window_id:int=0)->None: pass

  def window_set_drop_files_callback(self, callback:__core__.Callable, window_id:int=0)->None: pass

  def window_get_attached_instance_id(self, window_id:int=0)->int: pass

  def window_get_max_size(self, window_id:int=0)->__core__.Vector2i: pass

  def window_set_max_size(self, max_size:__core__.Vector2i, window_id:int=0)->None: pass

  def window_get_min_size(self, window_id:int=0)->__core__.Vector2i: pass

  def window_set_min_size(self, min_size:__core__.Vector2i, window_id:int=0)->None: pass

  def window_get_size_with_decorations(self, window_id:int=0)->__core__.Vector2i: pass

  def window_get_mode(self, window_id:int=0)->int: pass

  def window_set_mode(self, mode:int , window_id:int=0)->None: pass

  def window_set_flag(self, flag:int , enabled:bool, window_id:int=0)->None: pass

  def window_get_flag(self, flag:int , window_id:int=0)->bool: pass

  def window_set_window_buttons_offset(self, offset:__core__.Vector2i, window_id:int=0)->None: pass

  def window_get_safe_title_margins(self, window_id:int=0)->__core__.Vector3i: pass

  def window_request_attention(self, window_id:int=0)->None: pass

  def window_move_to_foreground(self, window_id:int=0)->None: pass

  def window_is_focused(self, window_id:int=0)->bool: pass

  def window_can_draw(self, window_id:int=0)->bool: pass

  def window_set_transient(self, window_id:int, parent_window_id:int)->None: pass

  def window_set_exclusive(self, window_id:int, exclusive:bool)->None: pass

  def window_set_ime_active(self, active:bool, window_id:int=0)->None: pass

  def window_set_ime_position(self, position:__core__.Vector2i, window_id:int=0)->None: pass

  def window_set_vsync_mode(self, vsync_mode:int , window_id:int=0)->None: pass

  def window_get_vsync_mode(self, window_id:int=0)->int: pass

  def window_is_maximize_allowed(self, window_id:int=0)->bool: pass

  def window_maximize_on_title_dbl_click(self)->bool: pass

  def window_minimize_on_title_dbl_click(self)->bool: pass

  def window_start_drag(self, window_id:int=0)->None: pass

  def window_start_resize(self, edge:int , window_id:int=0)->None: pass

  def ime_get_selection(self)->__core__.Vector2i: pass

  def ime_get_text(self)->str: pass

  def virtual_keyboard_show(self, existing_text:str, position:__core__.Rect2= __core__.Rect2.new0(), type:int =0, max_length:int=-1, cursor_start:int=-1, cursor_end:int=-1)->None: pass

  def virtual_keyboard_hide(self)->None: pass

  def virtual_keyboard_get_height(self)->int: pass

  def has_hardware_keyboard(self)->bool: pass

  def cursor_set_shape(self, shape:int )->None: pass

  def cursor_get_shape(self)->int: pass

  def cursor_set_custom_image(self, cursor:__resource__.Resource, shape:int =0, hotspot:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def get_swap_cancel_ok(self)->bool: pass

  def enable_for_stealing_focus(self, process_id:int)->None: pass

  def dialog_show(self, title:str, description:str, buttons:__core__.PackedStringArray, callback:__core__.Callable)->int: pass

  def dialog_input_text(self, title:str, description:str, existing_text:str, callback:__core__.Callable)->int: pass

  def file_dialog_show(self, title:str, current_directory:str, filename:str, show_hidden:bool, mode:int , filters:__core__.PackedStringArray, callback:__core__.Callable)->int: pass

  def file_dialog_with_options_show(self, title:str, current_directory:str, root:str, filename:str, show_hidden:bool, mode:int , filters:__core__.PackedStringArray, options:__core__.Array, callback:__core__.Callable)->int: pass

  def beep(self)->None: pass

  def keyboard_get_layout_count(self)->int: pass

  def keyboard_get_current_layout(self)->int: pass

  def keyboard_set_current_layout(self, index:int)->None: pass

  def keyboard_get_layout_language(self, index:int)->str: pass

  def keyboard_get_layout_name(self, index:int)->str: pass

  def keyboard_get_keycode_from_physical(self, keycode:int )->int: pass

  def keyboard_get_label_from_physical(self, keycode:int )->int: pass

  def show_emoji_and_symbol_picker(self)->None: pass

  def process_events(self)->None: pass

  def force_process_and_drop_events(self)->None: pass

  def set_native_icon(self, filename:str)->None: pass

  def set_icon(self, image:__image__.Image)->None: pass

  def create_status_indicator(self, icon:__texture2d__.Texture2D, tooltip:str, callback:__core__.Callable)->int: pass

  def status_indicator_set_icon(self, id:int, icon:__texture2d__.Texture2D)->None: pass

  def status_indicator_set_tooltip(self, id:int, tooltip:str)->None: pass

  def status_indicator_set_menu(self, id:int, menu_rid:__core__.RID)->None: pass

  def status_indicator_set_callback(self, id:int, callback:__core__.Callable)->None: pass

  def status_indicator_get_rect(self, id:int)->__core__.Rect2: pass

  def delete_status_indicator(self, id:int)->None: pass

  def tablet_get_driver_count(self)->int: pass

  def tablet_get_driver_name(self, idx:int)->str: pass

  def tablet_get_current_driver(self)->str: pass

  def tablet_set_current_driver(self, name:str)->None: pass

  def is_window_transparency_available(self)->bool: pass

  def register_additional_output(self, object:__object__.Object)->None: pass

  def unregister_additional_output(self, object:__object__.Object)->None: pass

  def has_additional_outputs(self)->bool: pass


