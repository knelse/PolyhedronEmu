from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.EditorExportPreset as __editorexportpreset__


class ExportFilter:
  EXPORT_ALL_RESOURCES:int = 0
  EXPORT_SELECTED_SCENES:int = 1
  EXPORT_SELECTED_RESOURCES:int = 2
  EXCLUDE_SELECTED_RESOURCES:int = 3
  EXPORT_CUSTOMIZED:int = 4
class FileExportMode:
  MODE_FILE_NOT_CUSTOMIZED:int = 0
  MODE_FILE_STRIP:int = 1
  MODE_FILE_KEEP:int = 2
  MODE_FILE_REMOVE:int = 3
class ScriptExportMode:
  MODE_SCRIPT_TEXT:int = 0
  MODE_SCRIPT_BINARY_TOKENS:int = 1
  MODE_SCRIPT_BINARY_TOKENS_COMPRESSED:int = 2


class EditorExportPreset(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->EditorExportPreset:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorExportPreset:pass


  def has(self, property:__core__.StringName|str)->bool: pass

  def get_files_to_export(self)->__core__.PackedStringArray: pass

  def get_customized_files(self)->__core__.Dictionary: pass

  def get_customized_files_count(self)->int: pass

  def has_export_file(self, path:str)->bool: pass

  def get_file_export_mode(self, path:str, default:int =0)->int: pass

  def get_preset_name(self)->str: pass

  def is_runnable(self)->bool: pass

  def are_advanced_options_enabled(self)->bool: pass

  def is_dedicated_server(self)->bool: pass

  def get_export_filter(self)->int: pass

  def get_include_filter(self)->str: pass

  def get_exclude_filter(self)->str: pass

  def get_custom_features(self)->str: pass

  def get_patches(self)->__core__.PackedStringArray: pass

  def get_export_path(self)->str: pass

  def get_encryption_in_filter(self)->str: pass

  def get_encryption_ex_filter(self)->str: pass

  def get_encrypt_pck(self)->bool: pass

  def get_encrypt_directory(self)->bool: pass

  def get_encryption_key(self)->str: pass

  def get_script_export_mode(self)->int: pass

  def get_or_env(self, name:__core__.StringName|str, env_var:str)->object: pass

  def get_version(self, name:__core__.StringName|str, windows_version:bool)->str: pass


