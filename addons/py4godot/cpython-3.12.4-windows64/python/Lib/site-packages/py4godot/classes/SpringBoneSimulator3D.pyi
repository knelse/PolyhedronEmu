from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModifier3D as __skeletonmodifier3d__
import py4godot.classes.SpringBoneSimulator3D as __springbonesimulator3d__
import py4godot.classes.Curve as __curve__


class BoneDirection:
  BONE_DIRECTION_PLUS_X:int = 0
  BONE_DIRECTION_MINUS_X:int = 1
  BONE_DIRECTION_PLUS_Y:int = 2
  BONE_DIRECTION_MINUS_Y:int = 3
  BONE_DIRECTION_PLUS_Z:int = 4
  BONE_DIRECTION_MINUS_Z:int = 5
  BONE_DIRECTION_FROM_PARENT:int = 6
class CenterFrom:
  CENTER_FROM_WORLD_ORIGIN:int = 0
  CENTER_FROM_NODE:int = 1
  CENTER_FROM_BONE:int = 2
class RotationAxis:
  ROTATION_AXIS_X:int = 0
  ROTATION_AXIS_Y:int = 1
  ROTATION_AXIS_Z:int = 2
  ROTATION_AXIS_ALL:int = 3


class SpringBoneSimulator3D(__skeletonmodifier3d__.SkeletonModifier3D):

  @staticmethod
  def constructor()->SpringBoneSimulator3D:pass



  @staticmethod
  def cast(other:__object__.Object)->SpringBoneSimulator3D:pass


  @property
  def setting_count(self)->int: pass
  @setting_count.setter
  def setting_count(self,  value:int)->None: pass
  def set_root_bone_name(self, index:int, bone_name:str)->None: pass

  def get_root_bone_name(self, index:int)->str: pass

  def set_root_bone(self, index:int, bone:int)->None: pass

  def get_root_bone(self, index:int)->int: pass

  def set_end_bone_name(self, index:int, bone_name:str)->None: pass

  def get_end_bone_name(self, index:int)->str: pass

  def set_end_bone(self, index:int, bone:int)->None: pass

  def get_end_bone(self, index:int)->int: pass

  def set_extend_end_bone(self, index:int, enabled:bool)->None: pass

  def is_end_bone_extended(self, index:int)->bool: pass

  def set_end_bone_direction(self, index:int, bone_direction:int )->None: pass

  def get_end_bone_direction(self, index:int)->int: pass

  def set_end_bone_length(self, index:int, length:float)->None: pass

  def get_end_bone_length(self, index:int)->float: pass

  def set_center_from(self, index:int, center_from:int )->None: pass

  def get_center_from(self, index:int)->int: pass

  def set_center_node(self, index:int, node_path:__core__.NodePath|str)->None: pass

  def get_center_node(self, index:int)->__core__.NodePath: pass

  def set_center_bone_name(self, index:int, bone_name:str)->None: pass

  def get_center_bone_name(self, index:int)->str: pass

  def set_center_bone(self, index:int, bone:int)->None: pass

  def get_center_bone(self, index:int)->int: pass

  def set_radius(self, index:int, radius:float)->None: pass

  def get_radius(self, index:int)->float: pass

  def set_rotation_axis(self, index:int, axis:int )->None: pass

  def get_rotation_axis(self, index:int)->int: pass

  def set_radius_damping_curve(self, index:int, curve:__curve__.Curve)->None: pass

  def get_radius_damping_curve(self, index:int)->__curve__.Curve: pass

  def set_stiffness(self, index:int, stiffness:float)->None: pass

  def get_stiffness(self, index:int)->float: pass

  def set_stiffness_damping_curve(self, index:int, curve:__curve__.Curve)->None: pass

  def get_stiffness_damping_curve(self, index:int)->__curve__.Curve: pass

  def set_drag(self, index:int, drag:float)->None: pass

  def get_drag(self, index:int)->float: pass

  def set_drag_damping_curve(self, index:int, curve:__curve__.Curve)->None: pass

  def get_drag_damping_curve(self, index:int)->__curve__.Curve: pass

  def set_gravity(self, index:int, gravity:float)->None: pass

  def get_gravity(self, index:int)->float: pass

  def set_gravity_damping_curve(self, index:int, curve:__curve__.Curve)->None: pass

  def get_gravity_damping_curve(self, index:int)->__curve__.Curve: pass

  def set_gravity_direction(self, index:int, gravity_direction:__core__.Vector3)->None: pass

  def get_gravity_direction(self, index:int)->__core__.Vector3: pass

  def set_setting_count(self, count:int)->None: pass

  def get_setting_count(self)->int: pass

  def clear_settings(self)->None: pass

  def set_individual_config(self, index:int, enabled:bool)->None: pass

  def is_config_individual(self, index:int)->bool: pass

  def get_joint_bone_name(self, index:int, joint:int)->str: pass

  def get_joint_bone(self, index:int, joint:int)->int: pass

  def set_joint_rotation_axis(self, index:int, joint:int, axis:int )->None: pass

  def get_joint_rotation_axis(self, index:int, joint:int)->int: pass

  def set_joint_radius(self, index:int, joint:int, radius:float)->None: pass

  def get_joint_radius(self, index:int, joint:int)->float: pass

  def set_joint_stiffness(self, index:int, joint:int, stiffness:float)->None: pass

  def get_joint_stiffness(self, index:int, joint:int)->float: pass

  def set_joint_drag(self, index:int, joint:int, drag:float)->None: pass

  def get_joint_drag(self, index:int, joint:int)->float: pass

  def set_joint_gravity(self, index:int, joint:int, gravity:float)->None: pass

  def get_joint_gravity(self, index:int, joint:int)->float: pass

  def set_joint_gravity_direction(self, index:int, joint:int, gravity_direction:__core__.Vector3)->None: pass

  def get_joint_gravity_direction(self, index:int, joint:int)->__core__.Vector3: pass

  def get_joint_count(self, index:int)->int: pass

  def set_enable_all_child_collisions(self, index:int, enabled:bool)->None: pass

  def are_all_child_collisions_enabled(self, index:int)->bool: pass

  def set_exclude_collision_path(self, index:int, collision:int, node_path:__core__.NodePath|str)->None: pass

  def get_exclude_collision_path(self, index:int, collision:int)->__core__.NodePath: pass

  def set_exclude_collision_count(self, index:int, count:int)->None: pass

  def get_exclude_collision_count(self, index:int)->int: pass

  def clear_exclude_collisions(self, index:int)->None: pass

  def set_collision_path(self, index:int, collision:int, node_path:__core__.NodePath|str)->None: pass

  def get_collision_path(self, index:int, collision:int)->__core__.NodePath: pass

  def set_collision_count(self, index:int, count:int)->None: pass

  def get_collision_count(self, index:int)->int: pass

  def clear_collisions(self, index:int)->None: pass

  def reset(self)->None: pass


