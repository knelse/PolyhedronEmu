from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.p as __p__
import py4godot.classes.i as __i__
import py4godot.classes.d as __d__
import py4godot.classes.a as __a__
import py4godot.classes.r as __r__
import py4godot.classes.T as __t__
import py4godot.classes.Object as __object__
import py4godot.classes.y as __y__
import py4godot.classes.e as __e__
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.Input as __input__
import py4godot.classes.Resource as __resource__
import py4godot.classes.t as __t__
import py4godot.classes.n as __n__
import py4godot.classes.A as __a__


class MouseMode:
  MOUSE_MODE_VISIBLE:int = 0
  MOUSE_MODE_HIDDEN:int = 1
  MOUSE_MODE_CAPTURED:int = 2
  MOUSE_MODE_CONFINED:int = 3
  MOUSE_MODE_CONFINED_HIDDEN:int = 4
  MOUSE_MODE_MAX:int = 5
class CursorShape:
  CURSOR_ARROW:int = 0
  CURSOR_IBEAM:int = 1
  CURSOR_POINTING_HAND:int = 2
  CURSOR_CROSS:int = 3
  CURSOR_WAIT:int = 4
  CURSOR_BUSY:int = 5
  CURSOR_DRAG:int = 6
  CURSOR_CAN_DROP:int = 7
  CURSOR_FORBIDDEN:int = 8
  CURSOR_VSIZE:int = 9
  CURSOR_HSIZE:int = 10
  CURSOR_BDIAGSIZE:int = 11
  CURSOR_FDIAGSIZE:int = 12
  CURSOR_MOVE:int = 13
  CURSOR_VSPLIT:int = 14
  CURSOR_HSPLIT:int = 15
  CURSOR_HELP:int = 16


class Input(__object__.Object):
  joy_connection_changed: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->Input:pass

  @staticmethod
  def instance()->Input:pass

  @property
  def mouse_mode(self)->int: pass
  @mouse_mode.setter
  def mouse_mode(self,  value:int)->None: pass
  @property
  def use_accumulated_input(self)->bool: pass
  @use_accumulated_input.setter
  def use_accumulated_input(self,  value:bool)->None: pass
  @property
  def emulate_mouse_from_touch(self)->bool: pass
  @emulate_mouse_from_touch.setter
  def emulate_mouse_from_touch(self,  value:bool)->None: pass
  @property
  def emulate_touch_from_mouse(self)->bool: pass
  @emulate_touch_from_mouse.setter
  def emulate_touch_from_mouse(self,  value:bool)->None: pass
  def is_anything_pressed(self)->bool: pass

  def is_key_pressed(self, keycode:int )->bool: pass

  def is_physical_key_pressed(self, keycode:int )->bool: pass

  def is_key_label_pressed(self, keycode:int )->bool: pass

  def is_mouse_button_pressed(self, button:int )->bool: pass

  def is_joy_button_pressed(self, device:int, button:int )->bool: pass

  def is_action_pressed(self, action:__core__.StringName|str, exact_match:bool=False)->bool: pass

  def is_action_just_pressed(self, action:__core__.StringName|str, exact_match:bool=False)->bool: pass

  def is_action_just_released(self, action:__core__.StringName|str, exact_match:bool=False)->bool: pass

  def get_action_strength(self, action:__core__.StringName|str, exact_match:bool=False)->float: pass

  def get_action_raw_strength(self, action:__core__.StringName|str, exact_match:bool=False)->float: pass

  def get_axis(self, negative_action:__core__.StringName|str, positive_action:__core__.StringName|str)->float: pass

  def get_vector(self, negative_x:__core__.StringName|str, positive_x:__core__.StringName|str, negative_y:__core__.StringName|str, positive_y:__core__.StringName|str, deadzone:float=-1.0)->__core__.Vector2: pass

  def add_joy_mapping(self, mapping:str, update_existing:bool=False)->None: pass

  def remove_joy_mapping(self, guid:str)->None: pass

  def is_joy_known(self, device:int)->bool: pass

  def get_joy_axis(self, device:int, axis:int )->float: pass

  def get_joy_name(self, device:int)->str: pass

  def get_joy_guid(self, device:int)->str: pass

  def get_joy_info(self, device:int)->__core__.Dictionary: pass

  def should_ignore_device(self, vendor_id:int, product_id:int)->bool: pass

  def get_connected_joypads(self)->typedarray::int: pass

  def get_joy_vibration_strength(self, device:int)->__core__.Vector2: pass

  def get_joy_vibration_duration(self, device:int)->float: pass

  def start_joy_vibration(self, device:int, weak_magnitude:float, strong_magnitude:float, duration:float=0)->None: pass

  def stop_joy_vibration(self, device:int)->None: pass

  def vibrate_handheld(self, duration_ms:int=500, amplitude:float=-1.0)->None: pass

  def get_gravity(self)->__core__.Vector3: pass

  def get_accelerometer(self)->__core__.Vector3: pass

  def get_magnetometer(self)->__core__.Vector3: pass

  def get_gyroscope(self)->__core__.Vector3: pass

  def set_gravity(self, value:__core__.Vector3)->None: pass

  def set_accelerometer(self, value:__core__.Vector3)->None: pass

  def set_magnetometer(self, value:__core__.Vector3)->None: pass

  def set_gyroscope(self, value:__core__.Vector3)->None: pass

  def get_last_mouse_velocity(self)->__core__.Vector2: pass

  def get_last_mouse_screen_velocity(self)->__core__.Vector2: pass

  def get_mouse_button_mask(self)->int: pass

  def set_mouse_mode(self, mode:int )->None: pass

  def get_mouse_mode(self)->int: pass

  def warp_mouse(self, position:__core__.Vector2)->None: pass

  def action_press(self, action:__core__.StringName|str, strength:float=1.0)->None: pass

  def action_release(self, action:__core__.StringName|str)->None: pass

  def set_default_cursor_shape(self, shape:int =0)->None: pass

  def get_current_cursor_shape(self)->int: pass

  def set_custom_mouse_cursor(self, image:__resource__.Resource, shape:int =0, hotspot:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def parse_input_event(self, event:__inputevent__.InputEvent)->None: pass

  def set_use_accumulated_input(self, enable:bool)->None: pass

  def is_using_accumulated_input(self)->bool: pass

  def flush_buffered_events(self)->None: pass

  def set_emulate_mouse_from_touch(self, enable:bool)->None: pass

  def is_emulating_mouse_from_touch(self)->bool: pass

  def set_emulate_touch_from_mouse(self, enable:bool)->None: pass

  def is_emulating_touch_from_mouse(self)->bool: pass


