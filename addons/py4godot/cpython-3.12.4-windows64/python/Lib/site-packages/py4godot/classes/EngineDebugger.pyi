from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object as __object__
import py4godot.classes.ScriptLanguage as __scriptlanguage__
import py4godot.classes.EngineProfiler as __engineprofiler__



class EngineDebugger(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->EngineDebugger:pass

  @staticmethod
  def instance()->EngineDebugger:pass

  def is_active(self)->bool: pass

  def register_profiler(self, name:__core__.StringName|str, profiler:__engineprofiler__.EngineProfiler)->None: pass

  def unregister_profiler(self, name:__core__.StringName|str)->None: pass

  def is_profiling(self, name:__core__.StringName|str)->bool: pass

  def has_profiler(self, name:__core__.StringName|str)->bool: pass

  def profiler_add_frame_data(self, name:__core__.StringName|str, data:__core__.Array)->None: pass

  def profiler_enable(self, name:__core__.StringName|str, enable:bool, arguments:__core__.Array= __core__.Array.new0())->None: pass

  def register_message_capture(self, name:__core__.StringName|str, callable:__core__.Callable)->None: pass

  def unregister_message_capture(self, name:__core__.StringName|str)->None: pass

  def has_capture(self, name:__core__.StringName|str)->bool: pass

  def line_poll(self)->None: pass

  def send_message(self, message:str, data:__core__.Array)->None: pass

  def debug(self, can_continue:bool=True, is_error_breakpoint:bool=False)->None: pass

  def script_debug(self, language:__scriptlanguage__.ScriptLanguage, can_continue:bool=True, is_error_breakpoint:bool=False)->None: pass

  def set_lines_left(self, lines:int)->None: pass

  def get_lines_left(self)->int: pass

  def set_depth(self, depth:int)->None: pass

  def get_depth(self)->int: pass

  def is_breakpoint(self, line:int, source:__core__.StringName|str)->bool: pass

  def is_skipping_breakpoints(self)->bool: pass

  def insert_breakpoint(self, line:int, source:__core__.StringName|str)->None: pass

  def remove_breakpoint(self, line:int, source:__core__.StringName|str)->None: pass

  def clear_breakpoints(self)->None: pass


