from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.Window as __window__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.Label as __label__
import py4godot.classes.Button as __button__



class AcceptDialog(__window__.Window):
  confirmed: BuiltinSignal
  canceled: BuiltinSignal
  custom_action: BuiltinSignal

  @staticmethod
  def constructor()->AcceptDialog:pass



  @staticmethod
  def cast(other:__object__.Object)->AcceptDialog:pass


  @property
  def ok_button_text(self)->str: pass
  @ok_button_text.setter
  def ok_button_text(self,  value:str)->None: pass
  @property
  def dialog_text(self)->str: pass
  @dialog_text.setter
  def dialog_text(self,  value:str)->None: pass
  @property
  def dialog_hide_on_ok(self)->bool: pass
  @dialog_hide_on_ok.setter
  def dialog_hide_on_ok(self,  value:bool)->None: pass
  @property
  def dialog_close_on_escape(self)->bool: pass
  @dialog_close_on_escape.setter
  def dialog_close_on_escape(self,  value:bool)->None: pass
  @property
  def dialog_autowrap(self)->bool: pass
  @dialog_autowrap.setter
  def dialog_autowrap(self,  value:bool)->None: pass
  def get_ok_button(self)->__checkbox__.CheckBox|__optionbutton__.OptionButton|__menubutton__.MenuButton|__colorpickerbutton__.ColorPickerButton|__button__.Button|__checkbutton__.CheckButton: pass

  def get_label(self)->__label__.Label: pass

  def set_hide_on_ok(self, enabled:bool)->None: pass

  def get_hide_on_ok(self)->bool: pass

  def set_close_on_escape(self, enabled:bool)->None: pass

  def get_close_on_escape(self)->bool: pass

  def add_button(self, text:str, right:bool=False, action:str= __core__.String.new0())->__checkbox__.CheckBox|__optionbutton__.OptionButton|__menubutton__.MenuButton|__colorpickerbutton__.ColorPickerButton|__button__.Button|__checkbutton__.CheckButton: pass

  def add_cancel_button(self, name:str)->__checkbox__.CheckBox|__optionbutton__.OptionButton|__menubutton__.MenuButton|__colorpickerbutton__.ColorPickerButton|__button__.Button|__checkbutton__.CheckButton: pass

  def remove_button(self, button:__button__.Button)->None: pass

  def register_text_enter(self, line_edit:__lineedit__.LineEdit)->None: pass

  def set_text(self, text:str)->None: pass

  def get_text(self)->str: pass

  def set_autowrap(self, autowrap:bool)->None: pass

  def has_autowrap(self)->bool: pass

  def set_ok_button_text(self, text:str)->None: pass

  def get_ok_button_text(self)->str: pass


