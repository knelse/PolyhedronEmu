from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.d as __d__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.y as __y__
import py4godot.classes.t as __t__
import py4godot.classes.S as __s__
import py4godot.classes.Resource as __resource__
import py4godot.classes.A as __a__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.D as __d__
import py4godot.classes.o as __o__
import py4godot.classes.r as __r__
import py4godot.classes.T as __t__
import py4godot.classes.g as __g__
import py4godot.classes.c as __c__
import py4godot.classes.p as __p__
import py4godot.classes.i as __i__
import py4godot.classes.a as __a__
import py4godot.classes.e as __e__
import py4godot.classes.n as __n__


class CodeCompletionKind:
  KIND_CLASS:int = 0
  KIND_FUNCTION:int = 1
  KIND_SIGNAL:int = 2
  KIND_VARIABLE:int = 3
  KIND_MEMBER:int = 4
  KIND_ENUM:int = 5
  KIND_CONSTANT:int = 6
  KIND_NODE_PATH:int = 7
  KIND_FILE_PATH:int = 8
  KIND_PLAIN_TEXT:int = 9
class CodeCompletionLocation:
  LOCATION_LOCAL:int = 0
  LOCATION_PARENT_MASK:int = 256
  LOCATION_OTHER_USER_CODE:int = 512
  LOCATION_OTHER:int = 1024


class CodeEdit(__textedit__.TextEdit):
  breakpoint_toggled: BuiltinSignal
  code_completion_requested: BuiltinSignal
  symbol_lookup: BuiltinSignal
  symbol_validate: BuiltinSignal
  symbol_hovered: BuiltinSignal

  @staticmethod
  def constructor()->CodeEdit:pass



  @staticmethod
  def cast(other:__object__.Object)->CodeEdit:pass


  @property
  def symbol_lookup_on_click(self)->bool: pass
  @symbol_lookup_on_click.setter
  def symbol_lookup_on_click(self,  value:bool)->None: pass
  @property
  def symbol_tooltip_on_hover(self)->bool: pass
  @symbol_tooltip_on_hover.setter
  def symbol_tooltip_on_hover(self,  value:bool)->None: pass
  @property
  def line_folding(self)->bool: pass
  @line_folding.setter
  def line_folding(self,  value:bool)->None: pass
  @property
  def line_length_guidelines(self)->__core__.PackedInt32Array: pass
  @line_length_guidelines.setter
  def line_length_guidelines(self,  value:__core__.PackedInt32Array)->None: pass
  @property
  def gutters_draw_breakpoints_gutter(self)->bool: pass
  @gutters_draw_breakpoints_gutter.setter
  def gutters_draw_breakpoints_gutter(self,  value:bool)->None: pass
  @property
  def gutters_draw_bookmarks(self)->bool: pass
  @gutters_draw_bookmarks.setter
  def gutters_draw_bookmarks(self,  value:bool)->None: pass
  @property
  def gutters_draw_executing_lines(self)->bool: pass
  @gutters_draw_executing_lines.setter
  def gutters_draw_executing_lines(self,  value:bool)->None: pass
  @property
  def gutters_draw_line_numbers(self)->bool: pass
  @gutters_draw_line_numbers.setter
  def gutters_draw_line_numbers(self,  value:bool)->None: pass
  @property
  def gutters_zero_pad_line_numbers(self)->bool: pass
  @gutters_zero_pad_line_numbers.setter
  def gutters_zero_pad_line_numbers(self,  value:bool)->None: pass
  @property
  def gutters_draw_fold_gutter(self)->bool: pass
  @gutters_draw_fold_gutter.setter
  def gutters_draw_fold_gutter(self,  value:bool)->None: pass
  @property
  def delimiter_strings(self)->__core__.PackedStringArray: pass
  @delimiter_strings.setter
  def delimiter_strings(self,  value:__core__.PackedStringArray)->None: pass
  @property
  def delimiter_comments(self)->__core__.PackedStringArray: pass
  @delimiter_comments.setter
  def delimiter_comments(self,  value:__core__.PackedStringArray)->None: pass
  @property
  def code_completion_enabled(self)->bool: pass
  @code_completion_enabled.setter
  def code_completion_enabled(self,  value:bool)->None: pass
  @property
  def code_completion_prefixes(self)->__core__.PackedStringArray: pass
  @code_completion_prefixes.setter
  def code_completion_prefixes(self,  value:__core__.PackedStringArray)->None: pass
  @property
  def indent_size(self)->int: pass
  @indent_size.setter
  def indent_size(self,  value:int)->None: pass
  @property
  def indent_use_spaces(self)->bool: pass
  @indent_use_spaces.setter
  def indent_use_spaces(self,  value:bool)->None: pass
  @property
  def indent_automatic(self)->bool: pass
  @indent_automatic.setter
  def indent_automatic(self,  value:bool)->None: pass
  @property
  def indent_automatic_prefixes(self)->__core__.PackedStringArray: pass
  @indent_automatic_prefixes.setter
  def indent_automatic_prefixes(self,  value:__core__.PackedStringArray)->None: pass
  @property
  def auto_brace_completion_enabled(self)->bool: pass
  @auto_brace_completion_enabled.setter
  def auto_brace_completion_enabled(self,  value:bool)->None: pass
  @property
  def auto_brace_completion_highlight_matching(self)->bool: pass
  @auto_brace_completion_highlight_matching.setter
  def auto_brace_completion_highlight_matching(self,  value:bool)->None: pass
  @property
  def auto_brace_completion_pairs(self)->__core__.Dictionary: pass
  @auto_brace_completion_pairs.setter
  def auto_brace_completion_pairs(self,  value:__core__.Dictionary)->None: pass
  def _confirm_code_completion(self, replace:bool)->None: pass

  def _request_code_completion(self, force:bool)->None: pass

  def _filter_code_completion_candidates(self, candidates:__core__.Array)->typedarray::Dictionary: pass

  def set_indent_size(self, size:int)->None: pass

  def get_indent_size(self)->int: pass

  def set_indent_using_spaces(self, use_spaces:bool)->None: pass

  def is_indent_using_spaces(self)->bool: pass

  def set_auto_indent_enabled(self, enable:bool)->None: pass

  def is_auto_indent_enabled(self)->bool: pass

  def set_auto_indent_prefixes(self, prefixes:__core__.Array)->None: pass

  def get_auto_indent_prefixes(self)->typedarray::String: pass

  def do_indent(self)->None: pass

  def indent_lines(self)->None: pass

  def unindent_lines(self)->None: pass

  def convert_indent(self, from_line:int=-1, to_line:int=-1)->None: pass

  def set_auto_brace_completion_enabled(self, enable:bool)->None: pass

  def is_auto_brace_completion_enabled(self)->bool: pass

  def set_highlight_matching_braces_enabled(self, enable:bool)->None: pass

  def is_highlight_matching_braces_enabled(self)->bool: pass

  def add_auto_brace_completion_pair(self, start_key:str, end_key:str)->None: pass

  def set_auto_brace_completion_pairs(self, pairs:__core__.Dictionary)->None: pass

  def get_auto_brace_completion_pairs(self)->__core__.Dictionary: pass

  def has_auto_brace_completion_open_key(self, open_key:str)->bool: pass

  def has_auto_brace_completion_close_key(self, close_key:str)->bool: pass

  def get_auto_brace_completion_close_key(self, open_key:str)->str: pass

  def set_draw_breakpoints_gutter(self, enable:bool)->None: pass

  def is_drawing_breakpoints_gutter(self)->bool: pass

  def set_draw_bookmarks_gutter(self, enable:bool)->None: pass

  def is_drawing_bookmarks_gutter(self)->bool: pass

  def set_draw_executing_lines_gutter(self, enable:bool)->None: pass

  def is_drawing_executing_lines_gutter(self)->bool: pass

  def set_line_as_breakpoint(self, line:int, breakpointed:bool)->None: pass

  def is_line_breakpointed(self, line:int)->bool: pass

  def clear_breakpointed_lines(self)->None: pass

  def get_breakpointed_lines(self)->__core__.PackedInt32Array: pass

  def set_line_as_bookmarked(self, line:int, bookmarked:bool)->None: pass

  def is_line_bookmarked(self, line:int)->bool: pass

  def clear_bookmarked_lines(self)->None: pass

  def get_bookmarked_lines(self)->__core__.PackedInt32Array: pass

  def set_line_as_executing(self, line:int, executing:bool)->None: pass

  def is_line_executing(self, line:int)->bool: pass

  def clear_executing_lines(self)->None: pass

  def get_executing_lines(self)->__core__.PackedInt32Array: pass

  def set_draw_line_numbers(self, enable:bool)->None: pass

  def is_draw_line_numbers_enabled(self)->bool: pass

  def set_line_numbers_zero_padded(self, enable:bool)->None: pass

  def is_line_numbers_zero_padded(self)->bool: pass

  def set_draw_fold_gutter(self, enable:bool)->None: pass

  def is_drawing_fold_gutter(self)->bool: pass

  def set_line_folding_enabled(self, enabled:bool)->None: pass

  def is_line_folding_enabled(self)->bool: pass

  def can_fold_line(self, line:int)->bool: pass

  def fold_line(self, line:int)->None: pass

  def unfold_line(self, line:int)->None: pass

  def fold_all_lines(self)->None: pass

  def unfold_all_lines(self)->None: pass

  def toggle_foldable_line(self, line:int)->None: pass

  def toggle_foldable_lines_at_carets(self)->None: pass

  def is_line_folded(self, line:int)->bool: pass

  def get_folded_lines(self)->typedarray::int: pass

  def create_code_region(self)->None: pass

  def get_code_region_start_tag(self)->str: pass

  def get_code_region_end_tag(self)->str: pass

  def set_code_region_tags(self, start:str= __core__.String.new0(), end:str= __core__.String.new0())->None: pass

  def is_line_code_region_start(self, line:int)->bool: pass

  def is_line_code_region_end(self, line:int)->bool: pass

  def add_string_delimiter(self, start_key:str, end_key:str, line_only:bool=False)->None: pass

  def remove_string_delimiter(self, start_key:str)->None: pass

  def has_string_delimiter(self, start_key:str)->bool: pass

  def set_string_delimiters(self, string_delimiters:__core__.Array)->None: pass

  def clear_string_delimiters(self)->None: pass

  def get_string_delimiters(self)->typedarray::String: pass

  def is_in_string(self, line:int, column:int=-1)->int: pass

  def add_comment_delimiter(self, start_key:str, end_key:str, line_only:bool=False)->None: pass

  def remove_comment_delimiter(self, start_key:str)->None: pass

  def has_comment_delimiter(self, start_key:str)->bool: pass

  def set_comment_delimiters(self, comment_delimiters:__core__.Array)->None: pass

  def clear_comment_delimiters(self)->None: pass

  def get_comment_delimiters(self)->typedarray::String: pass

  def is_in_comment(self, line:int, column:int=-1)->int: pass

  def get_delimiter_start_key(self, delimiter_index:int)->str: pass

  def get_delimiter_end_key(self, delimiter_index:int)->str: pass

  def get_delimiter_start_position(self, line:int, column:int)->__core__.Vector2: pass

  def get_delimiter_end_position(self, line:int, column:int)->__core__.Vector2: pass

  def set_code_hint(self, code_hint:str)->None: pass

  def set_code_hint_draw_below(self, draw_below:bool)->None: pass

  def get_text_for_code_completion(self)->str: pass

  def request_code_completion(self, force:bool=False)->None: pass

  def add_code_completion_option(self, type:int , display_text:str, insert_text:str, text_color:__core__.Color= __core__.Color.new0(), icon:__resource__.Resource= __resource__.Resource.constructor(), value:object=None, location:int=1024)->None: pass

  def update_code_completion_options(self, force:bool)->None: pass

  def get_code_completion_options(self)->typedarray::Dictionary: pass

  def get_code_completion_option(self, index:int)->__core__.Dictionary: pass

  def get_code_completion_selected_index(self)->int: pass

  def set_code_completion_selected_index(self, index:int)->None: pass

  def confirm_code_completion(self, replace:bool=False)->None: pass

  def cancel_code_completion(self)->None: pass

  def set_code_completion_enabled(self, enable:bool)->None: pass

  def is_code_completion_enabled(self)->bool: pass

  def set_code_completion_prefixes(self, prefixes:__core__.Array)->None: pass

  def get_code_completion_prefixes(self)->typedarray::String: pass

  def set_line_length_guidelines(self, guideline_columns:__core__.Array)->None: pass

  def get_line_length_guidelines(self)->typedarray::int: pass

  def set_symbol_lookup_on_click_enabled(self, enable:bool)->None: pass

  def is_symbol_lookup_on_click_enabled(self)->bool: pass

  def get_text_for_symbol_lookup(self)->str: pass

  def get_text_with_cursor_char(self, line:int, column:int)->str: pass

  def set_symbol_lookup_word_as_valid(self, valid:bool)->None: pass

  def set_symbol_tooltip_on_hover_enabled(self, enable:bool)->None: pass

  def is_symbol_tooltip_on_hover_enabled(self)->bool: pass

  def move_lines_up(self)->None: pass

  def move_lines_down(self)->None: pass

  def delete_lines(self)->None: pass

  def duplicate_selection(self)->None: pass

  def duplicate_lines(self)->None: pass


