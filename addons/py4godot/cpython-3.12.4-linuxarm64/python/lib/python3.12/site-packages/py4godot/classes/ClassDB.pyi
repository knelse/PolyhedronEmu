from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.e as __e__
import py4godot.classes.n as __n__
import py4godot.classes.ClassDB as __classdb__
import py4godot.classes.d as __d__
import py4godot.classes.t as __t__
import py4godot.classes.i as __i__
import py4godot.classes.D as __d__
import py4godot.classes.p as __p__
import py4godot.classes.y as __y__
import py4godot.classes.A as __a__
import py4godot.classes.Object as __object__
import py4godot.classes.c as __c__
import py4godot.classes.r as __r__
import py4godot.classes.T as __t__
import py4godot.classes.a as __a__
import py4godot.classes.o as __o__


class APIType:
  API_CORE:int = 0
  API_EDITOR:int = 1
  API_EXTENSION:int = 2
  API_EDITOR_EXTENSION:int = 3
  API_NONE:int = 4


class ClassDB(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->ClassDB:pass

  @staticmethod
  def instance()->ClassDB:pass

  def get_class_list(self)->__core__.PackedStringArray: pass

  def get_inheriters_from_class(self, class_:__core__.StringName|str)->__core__.PackedStringArray: pass

  def get_parent_class(self, class_:__core__.StringName|str)->__core__.StringName: pass

  def class_exists(self, class_:__core__.StringName|str)->bool: pass

  def is_parent_class(self, class_:__core__.StringName|str, inherits:__core__.StringName|str)->bool: pass

  def can_instantiate(self, class_:__core__.StringName|str)->bool: pass

  def instantiate(self, class_:__core__.StringName|str)->object: pass

  def class_get_api_type(self, class_:__core__.StringName|str)->int: pass

  def class_has_signal(self, class_:__core__.StringName|str, signal:__core__.StringName|str)->bool: pass

  def class_get_signal(self, class_:__core__.StringName|str, signal:__core__.StringName|str)->__core__.Dictionary: pass

  def class_get_signal_list(self, class_:__core__.StringName|str, no_inheritance:bool=False)->typedarray::Dictionary: pass

  def class_get_property_list(self, class_:__core__.StringName|str, no_inheritance:bool=False)->typedarray::Dictionary: pass

  def class_get_property_getter(self, class_:__core__.StringName|str, property:__core__.StringName|str)->__core__.StringName: pass

  def class_get_property_setter(self, class_:__core__.StringName|str, property:__core__.StringName|str)->__core__.StringName: pass

  def class_get_property(self, object:__object__.Object, property:__core__.StringName|str)->object: pass

  def class_set_property(self, object:__object__.Object, property:__core__.StringName|str, value:object)->int: pass

  def class_get_property_default_value(self, class_:__core__.StringName|str, property:__core__.StringName|str)->object: pass

  def class_has_method(self, class_:__core__.StringName|str, method:__core__.StringName|str, no_inheritance:bool=False)->bool: pass

  def class_get_method_argument_count(self, class_:__core__.StringName|str, method:__core__.StringName|str, no_inheritance:bool=False)->int: pass

  def class_get_method_list(self, class_:__core__.StringName|str, no_inheritance:bool=False)->typedarray::Dictionary: pass

  def class_call_static(self, class_:__core__.StringName|str, method:__core__.StringName|str)->object: pass

  def class_get_integer_constant_list(self, class_:__core__.StringName|str, no_inheritance:bool=False)->__core__.PackedStringArray: pass

  def class_has_integer_constant(self, class_:__core__.StringName|str, name:__core__.StringName|str)->bool: pass

  def class_get_integer_constant(self, class_:__core__.StringName|str, name:__core__.StringName|str)->int: pass

  def class_has_enum(self, class_:__core__.StringName|str, name:__core__.StringName|str, no_inheritance:bool=False)->bool: pass

  def class_get_enum_list(self, class_:__core__.StringName|str, no_inheritance:bool=False)->__core__.PackedStringArray: pass

  def class_get_enum_constants(self, class_:__core__.StringName|str, enum:__core__.StringName|str, no_inheritance:bool=False)->__core__.PackedStringArray: pass

  def class_get_integer_constant_enum(self, class_:__core__.StringName|str, name:__core__.StringName|str, no_inheritance:bool=False)->__core__.StringName: pass

  def is_class_enum_bitfield(self, class_:__core__.StringName|str, enum:__core__.StringName|str, no_inheritance:bool=False)->bool: pass

  def is_class_enabled(self, class_:__core__.StringName|str)->bool: pass


