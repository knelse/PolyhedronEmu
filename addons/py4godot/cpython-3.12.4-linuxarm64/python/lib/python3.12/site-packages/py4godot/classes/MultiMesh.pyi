from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.ArrayMesh as __arraymesh__
import py4godot.classes.PrismMesh as __prismmesh__
import py4godot.classes.PointMesh as __pointmesh__
import py4godot.classes.Mesh as __mesh__
import py4godot.classes.BoxMesh as __boxmesh__
import py4godot.classes.TorusMesh as __torusmesh__
import py4godot.classes.ImmediateMesh as __immediatemesh__
import py4godot.classes.TextMesh as __textmesh__
import py4godot.classes.CylinderMesh as __cylindermesh__
import py4godot.classes.PlaneMesh as __planemesh__
import py4godot.classes.PrimitiveMesh as __primitivemesh__
import py4godot.classes.MultiMesh as __multimesh__
import py4godot.classes.QuadMesh as __quadmesh__
import py4godot.classes.RibbonTrailMesh as __ribbontrailmesh__
import py4godot.classes.CapsuleMesh as __capsulemesh__
import py4godot.classes.SphereMesh as __spheremesh__
import py4godot.classes.TubeTrailMesh as __tubetrailmesh__
import py4godot.classes.PlaceholderMesh as __placeholdermesh__


class TransformFormat:
  TRANSFORM_2D:int = 0
  TRANSFORM_3D:int = 1
class PhysicsInterpolationQuality:
  INTERP_QUALITY_FAST:int = 0
  INTERP_QUALITY_HIGH:int = 1


class MultiMesh(__resource__.Resource):

  @staticmethod
  def constructor()->MultiMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->MultiMesh:pass


  @property
  def transform_format(self)->int: pass
  @transform_format.setter
  def transform_format(self,  value:int)->None: pass
  @property
  def use_colors(self)->bool: pass
  @use_colors.setter
  def use_colors(self,  value:bool)->None: pass
  @property
  def use_custom_data(self)->bool: pass
  @use_custom_data.setter
  def use_custom_data(self,  value:bool)->None: pass
  @property
  def custom_aabb(self)->__core__.AABB: pass
  @custom_aabb.setter
  def custom_aabb(self,  value:__core__.AABB)->None: pass
  @property
  def instance_count(self)->int: pass
  @instance_count.setter
  def instance_count(self,  value:int)->None: pass
  @property
  def visible_instance_count(self)->int: pass
  @visible_instance_count.setter
  def visible_instance_count(self,  value:int)->None: pass
  @property
  def mesh(self)->__arraymesh__.ArrayMesh|__prismmesh__.PrismMesh|__pointmesh__.PointMesh|__mesh__.Mesh|__boxmesh__.BoxMesh|__torusmesh__.TorusMesh|__immediatemesh__.ImmediateMesh|__textmesh__.TextMesh|__cylindermesh__.CylinderMesh|__planemesh__.PlaneMesh|__primitivemesh__.PrimitiveMesh|__quadmesh__.QuadMesh|__ribbontrailmesh__.RibbonTrailMesh|__capsulemesh__.CapsuleMesh|__spheremesh__.SphereMesh|__tubetrailmesh__.TubeTrailMesh|__placeholdermesh__.PlaceholderMesh: pass
  @mesh.setter
  def mesh(self,  value:__mesh__.Mesh)->None: pass
  @property
  def buffer(self)->__core__.PackedFloat32Array: pass
  @buffer.setter
  def buffer(self,  value:__core__.PackedFloat32Array)->None: pass
  @property
  def transform_array(self)->__core__.PackedVector3Array: pass
  @transform_array.setter
  def transform_array(self,  value:__core__.PackedVector3Array)->None: pass
  @property
  def transform_2d_array(self)->__core__.PackedVector2Array: pass
  @transform_2d_array.setter
  def transform_2d_array(self,  value:__core__.PackedVector2Array)->None: pass
  @property
  def color_array(self)->__core__.PackedColorArray: pass
  @color_array.setter
  def color_array(self,  value:__core__.PackedColorArray)->None: pass
  @property
  def custom_data_array(self)->__core__.PackedColorArray: pass
  @custom_data_array.setter
  def custom_data_array(self,  value:__core__.PackedColorArray)->None: pass
  @property
  def physics_interpolation_quality(self)->int: pass
  @physics_interpolation_quality.setter
  def physics_interpolation_quality(self,  value:int)->None: pass
  def set_mesh(self, mesh:__mesh__.Mesh)->None: pass

  def get_mesh(self)->__arraymesh__.ArrayMesh|__prismmesh__.PrismMesh|__pointmesh__.PointMesh|__mesh__.Mesh|__boxmesh__.BoxMesh|__torusmesh__.TorusMesh|__immediatemesh__.ImmediateMesh|__textmesh__.TextMesh|__cylindermesh__.CylinderMesh|__planemesh__.PlaneMesh|__primitivemesh__.PrimitiveMesh|__quadmesh__.QuadMesh|__ribbontrailmesh__.RibbonTrailMesh|__capsulemesh__.CapsuleMesh|__spheremesh__.SphereMesh|__tubetrailmesh__.TubeTrailMesh|__placeholdermesh__.PlaceholderMesh: pass

  def set_use_colors(self, enable:bool)->None: pass

  def is_using_colors(self)->bool: pass

  def set_use_custom_data(self, enable:bool)->None: pass

  def is_using_custom_data(self)->bool: pass

  def set_transform_format(self, format:int )->None: pass

  def get_transform_format(self)->int: pass

  def set_instance_count(self, count:int)->None: pass

  def get_instance_count(self)->int: pass

  def set_visible_instance_count(self, count:int)->None: pass

  def get_visible_instance_count(self)->int: pass

  def set_physics_interpolation_quality(self, quality:int )->None: pass

  def get_physics_interpolation_quality(self)->int: pass

  def set_instance_transform(self, instance:int, transform:__core__.Transform3D)->None: pass

  def set_instance_transform_2d(self, instance:int, transform:__core__.Transform2D)->None: pass

  def get_instance_transform(self, instance:int)->__core__.Transform3D: pass

  def get_instance_transform_2d(self, instance:int)->__core__.Transform2D: pass

  def set_instance_color(self, instance:int, color:__core__.Color)->None: pass

  def get_instance_color(self, instance:int)->__core__.Color: pass

  def set_instance_custom_data(self, instance:int, custom_data:__core__.Color)->None: pass

  def get_instance_custom_data(self, instance:int)->__core__.Color: pass

  def reset_instance_physics_interpolation(self, instance:int)->None: pass

  def set_custom_aabb(self, aabb:__core__.AABB)->None: pass

  def get_custom_aabb(self)->__core__.AABB: pass

  def get_aabb(self)->__core__.AABB: pass

  def get_buffer(self)->__core__.PackedFloat32Array: pass

  def set_buffer(self, buffer:__core__.PackedFloat32Array)->None: pass

  def set_buffer_interpolated(self, buffer_curr:__core__.PackedFloat32Array, buffer_prev:__core__.PackedFloat32Array)->None: pass


