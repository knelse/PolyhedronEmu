from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.StreamPeer as __streampeer__
import py4godot.classes.StreamPeerGZIP as __streampeergzip__
import py4godot.classes.TLSOptions as __tlsoptions__
import py4godot.classes.StreamPeerTCP as __streampeertcp__
import py4godot.classes.StreamPeerTLS as __streampeertls__
import py4godot.classes.StreamPeerBuffer as __streampeerbuffer__
import py4godot.classes.StreamPeerExtension as __streampeerextension__


class Status:
  STATUS_DISCONNECTED:int = 0
  STATUS_HANDSHAKING:int = 1
  STATUS_CONNECTED:int = 2
  STATUS_ERROR:int = 3
  STATUS_ERROR_HOSTNAME_MISMATCH:int = 4


class StreamPeerTLS(__streampeer__.StreamPeer):

  @staticmethod
  def constructor()->StreamPeerTLS:pass



  @staticmethod
  def cast(other:__object__.Object)->StreamPeerTLS:pass


  def poll(self)->None: pass

  def accept_stream(self, stream:__streampeer__.StreamPeer, server_options:__tlsoptions__.TLSOptions)->int: pass

  def connect_to_stream(self, stream:__streampeer__.StreamPeer, common_name:str, client_options:__tlsoptions__.TLSOptions= __tlsoptions__.TLSOptions.constructor())->int: pass

  def get_status(self)->int: pass

  def get_stream(self)->__streampeer__.StreamPeer|__streampeertls__.StreamPeerTLS|__streampeergzip__.StreamPeerGZIP|__streampeertcp__.StreamPeerTCP|__streampeerbuffer__.StreamPeerBuffer|__streampeerextension__.StreamPeerExtension: pass

  def disconnect_from_stream(self)->None: pass


