from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.EditorExportPlatformWindows as __editorexportplatformwindows__
import py4godot.classes.EditorExportPlatformMacOS as __editorexportplatformmacos__
import py4godot.classes.EditorExportPlatformWeb as __editorexportplatformweb__
import py4godot.classes.EditorExportPlatform as __editorexportplatform__
import py4godot.classes.EditorExportPlatformPC as __editorexportplatformpc__
import py4godot.classes.EditorExportPlatformExtension as __editorexportplatformextension__
import py4godot.classes.EditorExportPlatformIOS as __editorexportplatformios__
import py4godot.classes.EditorExportPreset as __editorexportpreset__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.EditorExportPlatformLinuxBSD as __editorexportplatformlinuxbsd__
import py4godot.classes.EditorExportPlatformAndroid as __editorexportplatformandroid__


class ExportMessageType:
  EXPORT_MESSAGE_NONE:int = 0
  EXPORT_MESSAGE_INFO:int = 1
  EXPORT_MESSAGE_WARNING:int = 2
  EXPORT_MESSAGE_ERROR:int = 3
class DebugFlags:
  DEBUG_FLAG_DUMB_CLIENT:int = 1
  DEBUG_FLAG_REMOTE_DEBUG:int = 2
  DEBUG_FLAG_REMOTE_DEBUG_LOCALHOST:int = 4
  DEBUG_FLAG_VIEW_COLLISIONS:int = 8
  DEBUG_FLAG_VIEW_NAVIGATION:int = 16


class EditorExportPlatform(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->EditorExportPlatform:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorExportPlatform:pass


  def get_os_name(self)->str: pass

  def create_preset(self)->__editorexportpreset__.EditorExportPreset: pass

  def find_export_template(self, template_file_name:str)->__core__.Dictionary: pass

  def get_current_presets(self)->__core__.Array: pass

  def save_pack(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, embed:bool=False)->__core__.Dictionary: pass

  def save_zip(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str)->__core__.Dictionary: pass

  def save_pack_patch(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str)->__core__.Dictionary: pass

  def save_zip_patch(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str)->__core__.Dictionary: pass

  def gen_export_flags(self, flags:int)->__core__.PackedStringArray: pass

  def export_project_files(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, save_cb:__core__.Callable, shared_cb:__core__.Callable= __core__.Callable.new0())->int: pass

  def export_project(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, flags:int=0)->int: pass

  def export_pack(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, flags:int=0)->int: pass

  def export_zip(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, flags:int=0)->int: pass

  def export_pack_patch(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, patches:__core__.PackedStringArray= __core__.PackedStringArray.new0(), flags:int=0)->int: pass

  def export_zip_patch(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool, path:str, patches:__core__.PackedStringArray= __core__.PackedStringArray.new0(), flags:int=0)->int: pass

  def clear_messages(self)->None: pass

  def add_message(self, type:int , category:str, message:str)->None: pass

  def get_message_count(self)->int: pass

  def get_message_type(self, index:int)->int: pass

  def get_message_category(self, index:int)->str: pass

  def get_message_text(self, index:int)->str: pass

  def get_worst_message_type(self)->int: pass

  def ssh_run_on_remote(self, host:str, port:str, ssh_arg:__core__.PackedStringArray, cmd_args:str, output:__core__.Array= __core__.Array.new0(), port_fwd:int=-1)->int: pass

  def ssh_run_on_remote_no_wait(self, host:str, port:str, ssh_args:__core__.PackedStringArray, cmd_args:str, port_fwd:int=-1)->int: pass

  def ssh_push_to_remote(self, host:str, port:str, scp_args:__core__.PackedStringArray, src_file:str, dst_file:str)->int: pass

  def get_internal_export_files(self, preset:__editorexportpreset__.EditorExportPreset, debug:bool)->__core__.Dictionary: pass

  @staticmethod
  def get_forced_export_files()->__core__.PackedStringArray: pass


