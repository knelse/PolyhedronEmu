from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualShaderNode as __visualshadernode__
import py4godot.classes.Resource as __resource__


class PortType:
  PORT_KIND_SCALAR:int = 0
  PORT_KIND_SCALAR_INT:int = 1
  PORT_KIND_SCALAR_UINT:int = 2
  PORT_KIND_VECTOR_2D:int = 3
  PORT_KIND_VECTOR_3D:int = 4
  PORT_KIND_VECTOR_4D:int = 5
  PORT_KIND_BOOLEAN:int = 6
  PORT_KIND_TRANSFORM:int = 7
  PORT_KIND_SAMPLER:int = 8
  PORT_KIND_MAX:int = 9


class VisualShaderNode(__resource__.Resource):

  @staticmethod
  def constructor()->VisualShaderNode:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNode:pass


  @property
  def output_port_for_preview(self)->int: pass
  @output_port_for_preview.setter
  def output_port_for_preview(self,  value:int)->None: pass
  @property
  def default_input_values(self)->__core__.Array: pass
  @default_input_values.setter
  def default_input_values(self,  value:__core__.Array)->None: pass
  @property
  def expanded_output_ports(self)->__core__.Array: pass
  @expanded_output_ports.setter
  def expanded_output_ports(self,  value:__core__.Array)->None: pass
  @property
  def linked_parent_graph_frame(self)->int: pass
  @linked_parent_graph_frame.setter
  def linked_parent_graph_frame(self,  value:int)->None: pass
  def get_default_input_port(self, type:int )->int: pass

  def set_output_port_for_preview(self, port:int)->None: pass

  def get_output_port_for_preview(self)->int: pass

  def set_input_port_default_value(self, port:int, value:object, prev_value:object=None)->None: pass

  def get_input_port_default_value(self, port:int)->object: pass

  def remove_input_port_default_value(self, port:int)->None: pass

  def clear_default_input_values(self)->None: pass

  def set_default_input_values(self, values:__core__.Array)->None: pass

  def get_default_input_values(self)->__core__.Array: pass

  def set_frame(self, frame:int)->None: pass

  def get_frame(self)->int: pass


