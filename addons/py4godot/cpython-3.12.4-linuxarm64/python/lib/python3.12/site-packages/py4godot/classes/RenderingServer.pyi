from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.n as __n__
import py4godot.classes.g as __g__
import py4godot.classes.i as __i__
import py4godot.classes.p as __p__
import py4godot.classes.f as __f__
import py4godot.classes.y as __y__
import py4godot.classes.S as __s__
import py4godot.classes.T as __t__
import py4godot.classes.I as __i__
import py4godot.classes.o as __o__
import py4godot.classes.e as __e__
import py4godot.classes.l as __l__
import py4godot.classes.RenderingDevice as __renderingdevice__
import py4godot.classes.P as __p__
import py4godot.classes.RenderingServer as __renderingserver__
import py4godot.classes.t as __t__
import py4godot.classes.Object as __object__
import py4godot.classes.c as __c__
import py4godot.classes.R as __r__
import py4godot.classes.a as __a__
import py4godot.classes.d as __d__
import py4godot.classes.3 as __3__
import py4godot.classes.N as __n__
import py4godot.classes.r as __r__
import py4godot.classes.s as __s__
import py4godot.classes.m as __m__
import py4godot.classes.Image as __image__
import py4godot.classes.D as __d__
import py4godot.classes.A as __a__


class TextureType:
  TEXTURE_KIND_2D:int = 0
  TEXTURE_KIND_LAYERED:int = 1
  TEXTURE_KIND_3D:int = 2
class TextureLayeredType:
  TEXTURE_LAYERED_2D_ARRAY:int = 0
  TEXTURE_LAYERED_CUBEMAP:int = 1
  TEXTURE_LAYERED_CUBEMAP_ARRAY:int = 2
class CubeMapLayer:
  CUBEMAP_LAYER_LEFT:int = 0
  CUBEMAP_LAYER_RIGHT:int = 1
  CUBEMAP_LAYER_BOTTOM:int = 2
  CUBEMAP_LAYER_TOP:int = 3
  CUBEMAP_LAYER_FRONT:int = 4
  CUBEMAP_LAYER_BACK:int = 5
class ShaderMode:
  SHADER_SPATIAL:int = 0
  SHADER_CANVAS_ITEM:int = 1
  SHADER_PARTICLES:int = 2
  SHADER_SKY:int = 3
  SHADER_FOG:int = 4
  SHADER_MAX:int = 5
class ArrayType:
  ARRAY_VERTEX:int = 0
  ARRAY_NORMAL:int = 1
  ARRAY_TANGENT:int = 2
  ARRAY_COLOR:int = 3
  ARRAY_TEX_UV:int = 4
  ARRAY_TEX_UV2:int = 5
  ARRAY_CUSTOM0:int = 6
  ARRAY_CUSTOM1:int = 7
  ARRAY_CUSTOM2:int = 8
  ARRAY_CUSTOM3:int = 9
  ARRAY_BONES:int = 10
  ARRAY_WEIGHTS:int = 11
  ARRAY_INDEX:int = 12
  ARRAY_MAX:int = 13
class ArrayCustomFormat:
  ARRAY_CUSTOM_RGBA8_UNORM:int = 0
  ARRAY_CUSTOM_RGBA8_SNORM:int = 1
  ARRAY_CUSTOM_RG_HALF:int = 2
  ARRAY_CUSTOM_RGBA_HALF:int = 3
  ARRAY_CUSTOM_R_FLOAT:int = 4
  ARRAY_CUSTOM_RG_FLOAT:int = 5
  ARRAY_CUSTOM_RGB_FLOAT:int = 6
  ARRAY_CUSTOM_RGBA_FLOAT:int = 7
  ARRAY_CUSTOM_MAX:int = 8
class ArrayFormat:
  ARRAY_FORMAT_VERTEX:int = 1
  ARRAY_FORMAT_NORMAL:int = 2
  ARRAY_FORMAT_TANGENT:int = 4
  ARRAY_FORMAT_COLOR:int = 8
  ARRAY_FORMAT_TEX_UV:int = 16
  ARRAY_FORMAT_TEX_UV2:int = 32
  ARRAY_FORMAT_CUSTOM0:int = 64
  ARRAY_FORMAT_CUSTOM1:int = 128
  ARRAY_FORMAT_CUSTOM2:int = 256
  ARRAY_FORMAT_CUSTOM3:int = 512
  ARRAY_FORMAT_BONES:int = 1024
  ARRAY_FORMAT_WEIGHTS:int = 2048
  ARRAY_FORMAT_INDEX:int = 4096
  ARRAY_FORMAT_BLEND_SHAPE_MASK:int = 7
  ARRAY_FORMAT_CUSTOM_BASE:int = 13
  ARRAY_FORMAT_CUSTOM_BITS:int = 3
  ARRAY_FORMAT_CUSTOM0_SHIFT:int = 13
  ARRAY_FORMAT_CUSTOM1_SHIFT:int = 16
  ARRAY_FORMAT_CUSTOM2_SHIFT:int = 19
  ARRAY_FORMAT_CUSTOM3_SHIFT:int = 22
  ARRAY_FORMAT_CUSTOM_MASK:int = 7
  ARRAY_COMPRESS_FLAGS_BASE:int = 25
  ARRAY_FLAG_USE_2D_VERTICES:int = 33554432
  ARRAY_FLAG_USE_DYNAMIC_UPDATE:int = 67108864
  ARRAY_FLAG_USE_8_BONE_WEIGHTS:int = 134217728
  ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY:int = 268435456
  ARRAY_FLAG_COMPRESS_ATTRIBUTES:int = 536870912
  ARRAY_FLAG_FORMAT_VERSION_BASE:int = 35
  ARRAY_FLAG_FORMAT_VERSION_SHIFT:int = 35
  ARRAY_FLAG_FORMAT_VERSION_1:int = 0
  ARRAY_FLAG_FORMAT_VERSION_2:int = 34359738368
  ARRAY_FLAG_FORMAT_CURRENT_VERSION:int = 34359738368
  ARRAY_FLAG_FORMAT_VERSION_MASK:int = 255
class PrimitiveType:
  PRIMITIVE_POINTS:int = 0
  PRIMITIVE_LINES:int = 1
  PRIMITIVE_LINE_STRIP:int = 2
  PRIMITIVE_TRIANGLES:int = 3
  PRIMITIVE_TRIANGLE_STRIP:int = 4
  PRIMITIVE_MAX:int = 5
class BlendShapeMode:
  BLEND_SHAPE_MODE_NORMALIZED:int = 0
  BLEND_SHAPE_MODE_RELATIVE:int = 1
class MultimeshTransformFormat:
  MULTIMESH_TRANSFORM_2D:int = 0
  MULTIMESH_TRANSFORM_3D:int = 1
class MultimeshPhysicsInterpolationQuality:
  MULTIMESH_INTERP_QUALITY_FAST:int = 0
  MULTIMESH_INTERP_QUALITY_HIGH:int = 1
class LightProjectorFilter:
  LIGHT_PROJECTOR_FILTER_NEAREST:int = 0
  LIGHT_PROJECTOR_FILTER_LINEAR:int = 1
  LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS:int = 2
  LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS:int = 3
  LIGHT_PROJECTOR_FILTER_NEAREST_MIPMAPS_ANISOTROPIC:int = 4
  LIGHT_PROJECTOR_FILTER_LINEAR_MIPMAPS_ANISOTROPIC:int = 5
class LightType:
  LIGHT_DIRECTIONAL:int = 0
  LIGHT_OMNI:int = 1
  LIGHT_SPOT:int = 2
class LightParam:
  LIGHT_PARAM_ENERGY:int = 0
  LIGHT_PARAM_INDIRECT_ENERGY:int = 1
  LIGHT_PARAM_VOLUMETRIC_FOG_ENERGY:int = 2
  LIGHT_PARAM_SPECULAR:int = 3
  LIGHT_PARAM_RANGE:int = 4
  LIGHT_PARAM_SIZE:int = 5
  LIGHT_PARAM_ATTENUATION:int = 6
  LIGHT_PARAM_SPOT_ANGLE:int = 7
  LIGHT_PARAM_SPOT_ATTENUATION:int = 8
  LIGHT_PARAM_SHADOW_MAX_DISTANCE:int = 9
  LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET:int = 10
  LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET:int = 11
  LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET:int = 12
  LIGHT_PARAM_SHADOW_FADE_START:int = 13
  LIGHT_PARAM_SHADOW_NORMAL_BIAS:int = 14
  LIGHT_PARAM_SHADOW_BIAS:int = 15
  LIGHT_PARAM_SHADOW_PANCAKE_SIZE:int = 16
  LIGHT_PARAM_SHADOW_OPACITY:int = 17
  LIGHT_PARAM_SHADOW_BLUR:int = 18
  LIGHT_PARAM_TRANSMITTANCE_BIAS:int = 19
  LIGHT_PARAM_INTENSITY:int = 20
  LIGHT_PARAM_MAX:int = 21
class LightBakeMode:
  LIGHT_BAKE_DISABLED:int = 0
  LIGHT_BAKE_STATIC:int = 1
  LIGHT_BAKE_DYNAMIC:int = 2
class LightOmniShadowMode:
  LIGHT_OMNI_SHADOW_DUAL_PARABOLOID:int = 0
  LIGHT_OMNI_SHADOW_CUBE:int = 1
class LightDirectionalShadowMode:
  LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL:int = 0
  LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS:int = 1
  LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS:int = 2
class LightDirectionalSkyMode:
  LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_AND_SKY:int = 0
  LIGHT_DIRECTIONAL_SKY_MODE_LIGHT_ONLY:int = 1
  LIGHT_DIRECTIONAL_SKY_MODE_SKY_ONLY:int = 2
class ShadowQuality:
  SHADOW_QUALITY_HARD:int = 0
  SHADOW_QUALITY_SOFT_VERY_LOW:int = 1
  SHADOW_QUALITY_SOFT_LOW:int = 2
  SHADOW_QUALITY_SOFT_MEDIUM:int = 3
  SHADOW_QUALITY_SOFT_HIGH:int = 4
  SHADOW_QUALITY_SOFT_ULTRA:int = 5
  SHADOW_QUALITY_MAX:int = 6
class ReflectionProbeUpdateMode:
  REFLECTION_PROBE_UPDATE_ONCE:int = 0
  REFLECTION_PROBE_UPDATE_ALWAYS:int = 1
class ReflectionProbeAmbientMode:
  REFLECTION_PROBE_AMBIENT_DISABLED:int = 0
  REFLECTION_PROBE_AMBIENT_ENVIRONMENT:int = 1
  REFLECTION_PROBE_AMBIENT_COLOR:int = 2
class DecalTexture:
  DECAL_TEXTURE_ALBEDO:int = 0
  DECAL_TEXTURE_NORMAL:int = 1
  DECAL_TEXTURE_ORM:int = 2
  DECAL_TEXTURE_EMISSION:int = 3
  DECAL_TEXTURE_MAX:int = 4
class DecalFilter:
  DECAL_FILTER_NEAREST:int = 0
  DECAL_FILTER_LINEAR:int = 1
  DECAL_FILTER_NEAREST_MIPMAPS:int = 2
  DECAL_FILTER_LINEAR_MIPMAPS:int = 3
  DECAL_FILTER_NEAREST_MIPMAPS_ANISOTROPIC:int = 4
  DECAL_FILTER_LINEAR_MIPMAPS_ANISOTROPIC:int = 5
class VoxelGIQuality:
  VOXEL_GI_QUALITY_LOW:int = 0
  VOXEL_GI_QUALITY_HIGH:int = 1
class ParticlesMode:
  PARTICLES_MODE_2D:int = 0
  PARTICLES_MODE_3D:int = 1
class ParticlesTransformAlign:
  PARTICLES_TRANSFORM_ALIGN_DISABLED:int = 0
  PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD:int = 1
  PARTICLES_TRANSFORM_ALIGN_Y_TO_VELOCITY:int = 2
  PARTICLES_TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY:int = 3
class ParticlesDrawOrder:
  PARTICLES_DRAW_ORDER_INDEX:int = 0
  PARTICLES_DRAW_ORDER_LIFETIME:int = 1
  PARTICLES_DRAW_ORDER_REVERSE_LIFETIME:int = 2
  PARTICLES_DRAW_ORDER_VIEW_DEPTH:int = 3
class ParticlesCollisionType:
  PARTICLES_COLLISION_KIND_SPHERE_ATTRACT:int = 0
  PARTICLES_COLLISION_KIND_BOX_ATTRACT:int = 1
  PARTICLES_COLLISION_KIND_VECTOR_FIELD_ATTRACT:int = 2
  PARTICLES_COLLISION_KIND_SPHERE_COLLIDE:int = 3
  PARTICLES_COLLISION_KIND_BOX_COLLIDE:int = 4
  PARTICLES_COLLISION_KIND_SDF_COLLIDE:int = 5
  PARTICLES_COLLISION_KIND_HEIGHTFIELD_COLLIDE:int = 6
class ParticlesCollisionHeightfieldResolution:
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_256:int = 0
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_512:int = 1
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_1024:int = 2
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_2048:int = 3
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_4096:int = 4
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_8192:int = 5
  PARTICLES_COLLISION_HEIGHTFIELD_RESOLUTION_MAX:int = 6
class FogVolumeShape:
  FOG_VOLUME_SHAPE_ELLIPSOID:int = 0
  FOG_VOLUME_SHAPE_CONE:int = 1
  FOG_VOLUME_SHAPE_CYLINDER:int = 2
  FOG_VOLUME_SHAPE_BOX:int = 3
  FOG_VOLUME_SHAPE_WORLD:int = 4
  FOG_VOLUME_SHAPE_MAX:int = 5
class ViewportScaling3DMode:
  VIEWPORT_SCALING_3D_MODE_BILINEAR:int = 0
  VIEWPORT_SCALING_3D_MODE_FSR:int = 1
  VIEWPORT_SCALING_3D_MODE_FSR2:int = 2
  VIEWPORT_SCALING_3D_MODE_METALFX_SPATIAL:int = 3
  VIEWPORT_SCALING_3D_MODE_METALFX_TEMPORAL:int = 4
  VIEWPORT_SCALING_3D_MODE_MAX:int = 5
class ViewportUpdateMode:
  VIEWPORT_UPDATE_DISABLED:int = 0
  VIEWPORT_UPDATE_ONCE:int = 1
  VIEWPORT_UPDATE_WHEN_VISIBLE:int = 2
  VIEWPORT_UPDATE_WHEN_PARENT_VISIBLE:int = 3
  VIEWPORT_UPDATE_ALWAYS:int = 4
class ViewportClearMode:
  VIEWPORT_CLEAR_ALWAYS:int = 0
  VIEWPORT_CLEAR_NEVER:int = 1
  VIEWPORT_CLEAR_ONLY_NEXT_FRAME:int = 2
class ViewportEnvironmentMode:
  VIEWPORT_ENVIRONMENT_DISABLED:int = 0
  VIEWPORT_ENVIRONMENT_ENABLED:int = 1
  VIEWPORT_ENVIRONMENT_INHERIT:int = 2
  VIEWPORT_ENVIRONMENT_MAX:int = 3
class ViewportSDFOversize:
  VIEWPORT_SDF_OVERSIZE_100_PERCENT:int = 0
  VIEWPORT_SDF_OVERSIZE_120_PERCENT:int = 1
  VIEWPORT_SDF_OVERSIZE_150_PERCENT:int = 2
  VIEWPORT_SDF_OVERSIZE_200_PERCENT:int = 3
  VIEWPORT_SDF_OVERSIZE_MAX:int = 4
class ViewportSDFScale:
  VIEWPORT_SDF_SCALE_100_PERCENT:int = 0
  VIEWPORT_SDF_SCALE_50_PERCENT:int = 1
  VIEWPORT_SDF_SCALE_25_PERCENT:int = 2
  VIEWPORT_SDF_SCALE_MAX:int = 3
class ViewportMSAA:
  VIEWPORT_MSAA_DISABLED:int = 0
  VIEWPORT_MSAA_2X:int = 1
  VIEWPORT_MSAA_4X:int = 2
  VIEWPORT_MSAA_8X:int = 3
  VIEWPORT_MSAA_MAX:int = 4
class ViewportAnisotropicFiltering:
  VIEWPORT_ANISOTROPY_DISABLED:int = 0
  VIEWPORT_ANISOTROPY_2X:int = 1
  VIEWPORT_ANISOTROPY_4X:int = 2
  VIEWPORT_ANISOTROPY_8X:int = 3
  VIEWPORT_ANISOTROPY_16X:int = 4
  VIEWPORT_ANISOTROPY_MAX:int = 5
class ViewportScreenSpaceAA:
  VIEWPORT_SCREEN_SPACE_AA_DISABLED:int = 0
  VIEWPORT_SCREEN_SPACE_AA_FXAA:int = 1
  VIEWPORT_SCREEN_SPACE_AA_MAX:int = 2
class ViewportOcclusionCullingBuildQuality:
  VIEWPORT_OCCLUSION_BUILD_QUALITY_LOW:int = 0
  VIEWPORT_OCCLUSION_BUILD_QUALITY_MEDIUM:int = 1
  VIEWPORT_OCCLUSION_BUILD_QUALITY_HIGH:int = 2
class ViewportRenderInfo:
  VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME:int = 0
  VIEWPORT_RENDER_INFO_PRIMITIVES_IN_FRAME:int = 1
  VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME:int = 2
  VIEWPORT_RENDER_INFO_MAX:int = 3
class ViewportRenderInfoType:
  VIEWPORT_RENDER_INFO_KIND_VISIBLE:int = 0
  VIEWPORT_RENDER_INFO_KIND_SHADOW:int = 1
  VIEWPORT_RENDER_INFO_KIND_CANVAS:int = 2
  VIEWPORT_RENDER_INFO_KIND_MAX:int = 3
class ViewportDebugDraw:
  VIEWPORT_DEBUG_DRAW_DISABLED:int = 0
  VIEWPORT_DEBUG_DRAW_UNSHADED:int = 1
  VIEWPORT_DEBUG_DRAW_LIGHTING:int = 2
  VIEWPORT_DEBUG_DRAW_OVERDRAW:int = 3
  VIEWPORT_DEBUG_DRAW_WIREFRAME:int = 4
  VIEWPORT_DEBUG_DRAW_NORMAL_BUFFER:int = 5
  VIEWPORT_DEBUG_DRAW_VOXEL_GI_ALBEDO:int = 6
  VIEWPORT_DEBUG_DRAW_VOXEL_GI_LIGHTING:int = 7
  VIEWPORT_DEBUG_DRAW_VOXEL_GI_EMISSION:int = 8
  VIEWPORT_DEBUG_DRAW_SHADOW_ATLAS:int = 9
  VIEWPORT_DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS:int = 10
  VIEWPORT_DEBUG_DRAW_SCENE_LUMINANCE:int = 11
  VIEWPORT_DEBUG_DRAW_SSAO:int = 12
  VIEWPORT_DEBUG_DRAW_SSIL:int = 13
  VIEWPORT_DEBUG_DRAW_PSSM_SPLITS:int = 14
  VIEWPORT_DEBUG_DRAW_DECAL_ATLAS:int = 15
  VIEWPORT_DEBUG_DRAW_SDFGI:int = 16
  VIEWPORT_DEBUG_DRAW_SDFGI_PROBES:int = 17
  VIEWPORT_DEBUG_DRAW_GI_BUFFER:int = 18
  VIEWPORT_DEBUG_DRAW_DISABLE_LOD:int = 19
  VIEWPORT_DEBUG_DRAW_CLUSTER_OMNI_LIGHTS:int = 20
  VIEWPORT_DEBUG_DRAW_CLUSTER_SPOT_LIGHTS:int = 21
  VIEWPORT_DEBUG_DRAW_CLUSTER_DECALS:int = 22
  VIEWPORT_DEBUG_DRAW_CLUSTER_REFLECTION_PROBES:int = 23
  VIEWPORT_DEBUG_DRAW_OCCLUDERS:int = 24
  VIEWPORT_DEBUG_DRAW_MOTION_VECTORS:int = 25
  VIEWPORT_DEBUG_DRAW_INTERNAL_BUFFER:int = 26
class ViewportVRSMode:
  VIEWPORT_VRS_DISABLED:int = 0
  VIEWPORT_VRS_TEXTURE:int = 1
  VIEWPORT_VRS_XR:int = 2
  VIEWPORT_VRS_MAX:int = 3
class ViewportVRSUpdateMode:
  VIEWPORT_VRS_UPDATE_DISABLED:int = 0
  VIEWPORT_VRS_UPDATE_ONCE:int = 1
  VIEWPORT_VRS_UPDATE_ALWAYS:int = 2
  VIEWPORT_VRS_UPDATE_MAX:int = 3
class SkyMode:
  SKY_MODE_AUTOMATIC:int = 0
  SKY_MODE_QUALITY:int = 1
  SKY_MODE_INCREMENTAL:int = 2
  SKY_MODE_REALTIME:int = 3
class CompositorEffectFlags:
  COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_COLOR:int = 1
  COMPOSITOR_EFFECT_FLAG_ACCESS_RESOLVED_DEPTH:int = 2
  COMPOSITOR_EFFECT_FLAG_NEEDS_MOTION_VECTORS:int = 4
  COMPOSITOR_EFFECT_FLAG_NEEDS_ROUGHNESS:int = 8
  COMPOSITOR_EFFECT_FLAG_NEEDS_SEPARATE_SPECULAR:int = 16
class CompositorEffectCallbackType:
  COMPOSITOR_EFFECT_CALLBACK_KIND_PRE_OPAQUE:int = 0
  COMPOSITOR_EFFECT_CALLBACK_KIND_POST_OPAQUE:int = 1
  COMPOSITOR_EFFECT_CALLBACK_KIND_POST_SKY:int = 2
  COMPOSITOR_EFFECT_CALLBACK_KIND_PRE_TRANSPARENT:int = 3
  COMPOSITOR_EFFECT_CALLBACK_KIND_POST_TRANSPARENT:int = 4
  COMPOSITOR_EFFECT_CALLBACK_KIND_ANY:int = -1
class EnvironmentBG:
  ENV_BG_CLEAR_COLOR:int = 0
  ENV_BG_COLOR:int = 1
  ENV_BG_SKY:int = 2
  ENV_BG_CANVAS:int = 3
  ENV_BG_KEEP:int = 4
  ENV_BG_CAMERA_FEED:int = 5
  ENV_BG_MAX:int = 6
class EnvironmentAmbientSource:
  ENV_AMBIENT_SOURCE_BG:int = 0
  ENV_AMBIENT_SOURCE_DISABLED:int = 1
  ENV_AMBIENT_SOURCE_COLOR:int = 2
  ENV_AMBIENT_SOURCE_SKY:int = 3
class EnvironmentReflectionSource:
  ENV_REFLECTION_SOURCE_BG:int = 0
  ENV_REFLECTION_SOURCE_DISABLED:int = 1
  ENV_REFLECTION_SOURCE_SKY:int = 2
class EnvironmentGlowBlendMode:
  ENV_GLOW_BLEND_MODE_ADDITIVE:int = 0
  ENV_GLOW_BLEND_MODE_SCREEN:int = 1
  ENV_GLOW_BLEND_MODE_SOFTLIGHT:int = 2
  ENV_GLOW_BLEND_MODE_REPLACE:int = 3
  ENV_GLOW_BLEND_MODE_MIX:int = 4
class EnvironmentFogMode:
  ENV_FOG_MODE_EXPONENTIAL:int = 0
  ENV_FOG_MODE_DEPTH:int = 1
class EnvironmentToneMapper:
  ENV_TONE_MAPPER_LINEAR:int = 0
  ENV_TONE_MAPPER_REINHARD:int = 1
  ENV_TONE_MAPPER_FILMIC:int = 2
  ENV_TONE_MAPPER_ACES:int = 3
  ENV_TONE_MAPPER_AGX:int = 4
class EnvironmentSSRRoughnessQuality:
  ENV_SSR_ROUGHNESS_QUALITY_DISABLED:int = 0
  ENV_SSR_ROUGHNESS_QUALITY_LOW:int = 1
  ENV_SSR_ROUGHNESS_QUALITY_MEDIUM:int = 2
  ENV_SSR_ROUGHNESS_QUALITY_HIGH:int = 3
class EnvironmentSSAOQuality:
  ENV_SSAO_QUALITY_VERY_LOW:int = 0
  ENV_SSAO_QUALITY_LOW:int = 1
  ENV_SSAO_QUALITY_MEDIUM:int = 2
  ENV_SSAO_QUALITY_HIGH:int = 3
  ENV_SSAO_QUALITY_ULTRA:int = 4
class EnvironmentSSILQuality:
  ENV_SSIL_QUALITY_VERY_LOW:int = 0
  ENV_SSIL_QUALITY_LOW:int = 1
  ENV_SSIL_QUALITY_MEDIUM:int = 2
  ENV_SSIL_QUALITY_HIGH:int = 3
  ENV_SSIL_QUALITY_ULTRA:int = 4
class EnvironmentSDFGIYScale:
  ENV_SDFGI_Y_SCALE_50_PERCENT:int = 0
  ENV_SDFGI_Y_SCALE_75_PERCENT:int = 1
  ENV_SDFGI_Y_SCALE_100_PERCENT:int = 2
class EnvironmentSDFGIRayCount:
  ENV_SDFGI_RAY_COUNT_4:int = 0
  ENV_SDFGI_RAY_COUNT_8:int = 1
  ENV_SDFGI_RAY_COUNT_16:int = 2
  ENV_SDFGI_RAY_COUNT_32:int = 3
  ENV_SDFGI_RAY_COUNT_64:int = 4
  ENV_SDFGI_RAY_COUNT_96:int = 5
  ENV_SDFGI_RAY_COUNT_128:int = 6
  ENV_SDFGI_RAY_COUNT_MAX:int = 7
class EnvironmentSDFGIFramesToConverge:
  ENV_SDFGI_CONVERGE_IN_5_FRAMES:int = 0
  ENV_SDFGI_CONVERGE_IN_10_FRAMES:int = 1
  ENV_SDFGI_CONVERGE_IN_15_FRAMES:int = 2
  ENV_SDFGI_CONVERGE_IN_20_FRAMES:int = 3
  ENV_SDFGI_CONVERGE_IN_25_FRAMES:int = 4
  ENV_SDFGI_CONVERGE_IN_30_FRAMES:int = 5
  ENV_SDFGI_CONVERGE_MAX:int = 6
class EnvironmentSDFGIFramesToUpdateLight:
  ENV_SDFGI_UPDATE_LIGHT_IN_1_FRAME:int = 0
  ENV_SDFGI_UPDATE_LIGHT_IN_2_FRAMES:int = 1
  ENV_SDFGI_UPDATE_LIGHT_IN_4_FRAMES:int = 2
  ENV_SDFGI_UPDATE_LIGHT_IN_8_FRAMES:int = 3
  ENV_SDFGI_UPDATE_LIGHT_IN_16_FRAMES:int = 4
  ENV_SDFGI_UPDATE_LIGHT_MAX:int = 5
class SubSurfaceScatteringQuality:
  SUB_SURFACE_SCATTERING_QUALITY_DISABLED:int = 0
  SUB_SURFACE_SCATTERING_QUALITY_LOW:int = 1
  SUB_SURFACE_SCATTERING_QUALITY_MEDIUM:int = 2
  SUB_SURFACE_SCATTERING_QUALITY_HIGH:int = 3
class DOFBokehShape:
  DOF_BOKEH_BOX:int = 0
  DOF_BOKEH_HEXAGON:int = 1
  DOF_BOKEH_CIRCLE:int = 2
class DOFBlurQuality:
  DOF_BLUR_QUALITY_VERY_LOW:int = 0
  DOF_BLUR_QUALITY_LOW:int = 1
  DOF_BLUR_QUALITY_MEDIUM:int = 2
  DOF_BLUR_QUALITY_HIGH:int = 3
class InstanceType:
  INSTANCE_NONE:int = 0
  INSTANCE_MESH:int = 1
  INSTANCE_MULTIMESH:int = 2
  INSTANCE_PARTICLES:int = 3
  INSTANCE_PARTICLES_COLLISION:int = 4
  INSTANCE_LIGHT:int = 5
  INSTANCE_REFLECTION_PROBE:int = 6
  INSTANCE_DECAL:int = 7
  INSTANCE_VOXEL_GI:int = 8
  INSTANCE_LIGHTMAP:int = 9
  INSTANCE_OCCLUDER:int = 10
  INSTANCE_VISIBLITY_NOTIFIER:int = 11
  INSTANCE_FOG_VOLUME:int = 12
  INSTANCE_MAX:int = 13
  INSTANCE_GEOMETRY_MASK:int = 14
class InstanceFlags:
  INSTANCE_FLAG_USE_BAKED_LIGHT:int = 0
  INSTANCE_FLAG_USE_DYNAMIC_GI:int = 1
  INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE:int = 2
  INSTANCE_FLAG_IGNORE_OCCLUSION_CULLING:int = 3
  INSTANCE_FLAG_MAX:int = 4
class ShadowCastingSetting:
  SHADOW_CASTING_SETTING_OFF:int = 0
  SHADOW_CASTING_SETTING_ON:int = 1
  SHADOW_CASTING_SETTING_DOUBLE_SIDED:int = 2
  SHADOW_CASTING_SETTING_SHADOWS_ONLY:int = 3
class VisibilityRangeFadeMode:
  VISIBILITY_RANGE_FADE_DISABLED:int = 0
  VISIBILITY_RANGE_FADE_SELF:int = 1
  VISIBILITY_RANGE_FADE_DEPENDENCIES:int = 2
class BakeChannels:
  BAKE_CHANNEL_ALBEDO_ALPHA:int = 0
  BAKE_CHANNEL_NORMAL:int = 1
  BAKE_CHANNEL_ORM:int = 2
  BAKE_CHANNEL_EMISSION:int = 3
class CanvasTextureChannel:
  CANVAS_TEXTURE_CHANNEL_DIFFUSE:int = 0
  CANVAS_TEXTURE_CHANNEL_NORMAL:int = 1
  CANVAS_TEXTURE_CHANNEL_SPECULAR:int = 2
class NinePatchAxisMode:
  NINE_PATCH_STRETCH:int = 0
  NINE_PATCH_TILE:int = 1
  NINE_PATCH_TILE_FIT:int = 2
class CanvasItemTextureFilter:
  CANVAS_ITEM_TEXTURE_FILTER_DEFAULT:int = 0
  CANVAS_ITEM_TEXTURE_FILTER_NEAREST:int = 1
  CANVAS_ITEM_TEXTURE_FILTER_LINEAR:int = 2
  CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS:int = 3
  CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS:int = 4
  CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC:int = 5
  CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC:int = 6
  CANVAS_ITEM_TEXTURE_FILTER_MAX:int = 7
class CanvasItemTextureRepeat:
  CANVAS_ITEM_TEXTURE_REPEAT_DEFAULT:int = 0
  CANVAS_ITEM_TEXTURE_REPEAT_DISABLED:int = 1
  CANVAS_ITEM_TEXTURE_REPEAT_ENABLED:int = 2
  CANVAS_ITEM_TEXTURE_REPEAT_MIRROR:int = 3
  CANVAS_ITEM_TEXTURE_REPEAT_MAX:int = 4
class CanvasGroupMode:
  CANVAS_GROUP_MODE_DISABLED:int = 0
  CANVAS_GROUP_MODE_CLIP_ONLY:int = 1
  CANVAS_GROUP_MODE_CLIP_AND_DRAW:int = 2
  CANVAS_GROUP_MODE_TRANSPARENT:int = 3
class CanvasLightMode:
  CANVAS_LIGHT_MODE_POINT:int = 0
  CANVAS_LIGHT_MODE_DIRECTIONAL:int = 1
class CanvasLightBlendMode:
  CANVAS_LIGHT_BLEND_MODE_ADD:int = 0
  CANVAS_LIGHT_BLEND_MODE_SUB:int = 1
  CANVAS_LIGHT_BLEND_MODE_MIX:int = 2
class CanvasLightShadowFilter:
  CANVAS_LIGHT_FILTER_NONE:int = 0
  CANVAS_LIGHT_FILTER_PCF5:int = 1
  CANVAS_LIGHT_FILTER_PCF13:int = 2
  CANVAS_LIGHT_FILTER_MAX:int = 3
class CanvasOccluderPolygonCullMode:
  CANVAS_OCCLUDER_POLYGON_CULL_DISABLED:int = 0
  CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE:int = 1
  CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE:int = 2
class GlobalShaderParameterType:
  GLOBAL_VAR_KIND_BOOL:int = 0
  GLOBAL_VAR_KIND_BVEC2:int = 1
  GLOBAL_VAR_KIND_BVEC3:int = 2
  GLOBAL_VAR_KIND_BVEC4:int = 3
  GLOBAL_VAR_KIND_INT:int = 4
  GLOBAL_VAR_KIND_IVEC2:int = 5
  GLOBAL_VAR_KIND_IVEC3:int = 6
  GLOBAL_VAR_KIND_IVEC4:int = 7
  GLOBAL_VAR_KIND_RECT2I:int = 8
  GLOBAL_VAR_KIND_UINT:int = 9
  GLOBAL_VAR_KIND_UVEC2:int = 10
  GLOBAL_VAR_KIND_UVEC3:int = 11
  GLOBAL_VAR_KIND_UVEC4:int = 12
  GLOBAL_VAR_KIND_FLOAT:int = 13
  GLOBAL_VAR_KIND_VEC2:int = 14
  GLOBAL_VAR_KIND_VEC3:int = 15
  GLOBAL_VAR_KIND_VEC4:int = 16
  GLOBAL_VAR_KIND_COLOR:int = 17
  GLOBAL_VAR_KIND_RECT2:int = 18
  GLOBAL_VAR_KIND_MAT2:int = 19
  GLOBAL_VAR_KIND_MAT3:int = 20
  GLOBAL_VAR_KIND_MAT4:int = 21
  GLOBAL_VAR_KIND_TRANSFORM_2D:int = 22
  GLOBAL_VAR_KIND_TRANSFORM:int = 23
  GLOBAL_VAR_KIND_SAMPLER2D:int = 24
  GLOBAL_VAR_KIND_SAMPLER2DARRAY:int = 25
  GLOBAL_VAR_KIND_SAMPLER3D:int = 26
  GLOBAL_VAR_KIND_SAMPLERCUBE:int = 27
  GLOBAL_VAR_KIND_SAMPLEREXT:int = 28
  GLOBAL_VAR_KIND_MAX:int = 29
class RenderingInfo:
  RENDERING_INFO_TOTAL_OBJECTS_IN_FRAME:int = 0
  RENDERING_INFO_TOTAL_PRIMITIVES_IN_FRAME:int = 1
  RENDERING_INFO_TOTAL_DRAW_CALLS_IN_FRAME:int = 2
  RENDERING_INFO_TEXTURE_MEM_USED:int = 3
  RENDERING_INFO_BUFFER_MEM_USED:int = 4
  RENDERING_INFO_VIDEO_MEM_USED:int = 5
  RENDERING_INFO_PIPELINE_COMPILATIONS_CANVAS:int = 6
  RENDERING_INFO_PIPELINE_COMPILATIONS_MESH:int = 7
  RENDERING_INFO_PIPELINE_COMPILATIONS_SURFACE:int = 8
  RENDERING_INFO_PIPELINE_COMPILATIONS_DRAW:int = 9
  RENDERING_INFO_PIPELINE_COMPILATIONS_SPECIALIZATION:int = 10
class PipelineSource:
  PIPELINE_SOURCE_CANVAS:int = 0
  PIPELINE_SOURCE_MESH:int = 1
  PIPELINE_SOURCE_SURFACE:int = 2
  PIPELINE_SOURCE_DRAW:int = 3
  PIPELINE_SOURCE_SPECIALIZATION:int = 4
  PIPELINE_SOURCE_MAX:int = 5
class Features:
  FEATURE_SHADERS:int = 0
  FEATURE_MULTITHREADED:int = 1


class RenderingServer(__object__.Object):
  frame_pre_draw: BuiltinSignal
  frame_post_draw: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->RenderingServer:pass

  @staticmethod
  def instance()->RenderingServer:pass

  @property
  def render_loop_enabled(self)->bool: pass
  @render_loop_enabled.setter
  def render_loop_enabled(self,  value:bool)->None: pass
  def texture_2d_create(self, image:__image__.Image)->__core__.RID: pass

  def texture_2d_layered_create(self, layers:__core__.Array, layered_type:int )->__core__.RID: pass

  def texture_3d_create(self, format:int , width:int, height:int, depth:int, mipmaps:bool, data:__core__.Array)->__core__.RID: pass

  def texture_proxy_create(self, base:__core__.RID)->__core__.RID: pass

  def texture_create_from_native_handle(self, type:int , format:int , native_handle:int, width:int, height:int, depth:int, layers:int=1, layered_type:int =0)->__core__.RID: pass

  def texture_2d_update(self, texture:__core__.RID, image:__image__.Image, layer:int)->None: pass

  def texture_3d_update(self, texture:__core__.RID, data:__core__.Array)->None: pass

  def texture_proxy_update(self, texture:__core__.RID, proxy_to:__core__.RID)->None: pass

  def texture_2d_placeholder_create(self)->__core__.RID: pass

  def texture_2d_layered_placeholder_create(self, layered_type:int )->__core__.RID: pass

  def texture_3d_placeholder_create(self)->__core__.RID: pass

  def texture_2d_get(self, texture:__core__.RID)->__image__.Image: pass

  def texture_2d_layer_get(self, texture:__core__.RID, layer:int)->__image__.Image: pass

  def texture_3d_get(self, texture:__core__.RID)->typedarray::Image: pass

  def texture_replace(self, texture:__core__.RID, by_texture:__core__.RID)->None: pass

  def texture_set_size_override(self, texture:__core__.RID, width:int, height:int)->None: pass

  def texture_set_path(self, texture:__core__.RID, path:str)->None: pass

  def texture_get_path(self, texture:__core__.RID)->str: pass

  def texture_get_format(self, texture:__core__.RID)->int: pass

  def texture_set_force_redraw_if_visible(self, texture:__core__.RID, enable:bool)->None: pass

  def texture_rd_create(self, rd_texture:__core__.RID, layer_type:int =0)->__core__.RID: pass

  def texture_get_rd_texture(self, texture:__core__.RID, srgb:bool=False)->__core__.RID: pass

  def texture_get_native_handle(self, texture:__core__.RID, srgb:bool=False)->int: pass

  def shader_create(self)->__core__.RID: pass

  def shader_set_code(self, shader:__core__.RID, code:str)->None: pass

  def shader_set_path_hint(self, shader:__core__.RID, path:str)->None: pass

  def shader_get_code(self, shader:__core__.RID)->str: pass

  def get_shader_parameter_list(self, shader:__core__.RID)->typedarray::Dictionary: pass

  def shader_get_parameter_default(self, shader:__core__.RID, name:__core__.StringName|str)->object: pass

  def shader_set_default_texture_parameter(self, shader:__core__.RID, name:__core__.StringName|str, texture:__core__.RID, index:int=0)->None: pass

  def shader_get_default_texture_parameter(self, shader:__core__.RID, name:__core__.StringName|str, index:int=0)->__core__.RID: pass

  def material_create(self)->__core__.RID: pass

  def material_set_shader(self, shader_material:__core__.RID, shader:__core__.RID)->None: pass

  def material_set_param(self, material:__core__.RID, parameter:__core__.StringName|str, value:object)->None: pass

  def material_get_param(self, material:__core__.RID, parameter:__core__.StringName|str)->object: pass

  def material_set_render_priority(self, material:__core__.RID, priority:int)->None: pass

  def material_set_next_pass(self, material:__core__.RID, next_material:__core__.RID)->None: pass

  def mesh_create_from_surfaces(self, surfaces:__core__.Array, blend_shape_count:int=0)->__core__.RID: pass

  def mesh_create(self)->__core__.RID: pass

  def mesh_surface_get_format_offset(self, format:int, vertex_count:int, array_index:int)->int: pass

  def mesh_surface_get_format_vertex_stride(self, format:int, vertex_count:int)->int: pass

  def mesh_surface_get_format_normal_tangent_stride(self, format:int, vertex_count:int)->int: pass

  def mesh_surface_get_format_attribute_stride(self, format:int, vertex_count:int)->int: pass

  def mesh_surface_get_format_skin_stride(self, format:int, vertex_count:int)->int: pass

  def mesh_add_surface(self, mesh:__core__.RID, surface:__core__.Dictionary)->None: pass

  def mesh_add_surface_from_arrays(self, mesh:__core__.RID, primitive:int , arrays:__core__.Array, blend_shapes:__core__.Array= __core__.Array.new0(), lods:__core__.Dictionary= __core__.Dictionary.new0(), compress_format:int=0)->None: pass

  def mesh_get_blend_shape_count(self, mesh:__core__.RID)->int: pass

  def mesh_set_blend_shape_mode(self, mesh:__core__.RID, mode:int )->None: pass

  def mesh_get_blend_shape_mode(self, mesh:__core__.RID)->int: pass

  def mesh_surface_set_material(self, mesh:__core__.RID, surface:int, material:__core__.RID)->None: pass

  def mesh_surface_get_material(self, mesh:__core__.RID, surface:int)->__core__.RID: pass

  def mesh_get_surface(self, mesh:__core__.RID, surface:int)->__core__.Dictionary: pass

  def mesh_surface_get_arrays(self, mesh:__core__.RID, surface:int)->__core__.Array: pass

  def mesh_surface_get_blend_shape_arrays(self, mesh:__core__.RID, surface:int)->typedarray::Array: pass

  def mesh_get_surface_count(self, mesh:__core__.RID)->int: pass

  def mesh_set_custom_aabb(self, mesh:__core__.RID, aabb:__core__.AABB)->None: pass

  def mesh_get_custom_aabb(self, mesh:__core__.RID)->__core__.AABB: pass

  def mesh_surface_remove(self, mesh:__core__.RID, surface:int)->None: pass

  def mesh_clear(self, mesh:__core__.RID)->None: pass

  def mesh_surface_update_vertex_region(self, mesh:__core__.RID, surface:int, offset:int, data:__core__.PackedByteArray)->None: pass

  def mesh_surface_update_attribute_region(self, mesh:__core__.RID, surface:int, offset:int, data:__core__.PackedByteArray)->None: pass

  def mesh_surface_update_skin_region(self, mesh:__core__.RID, surface:int, offset:int, data:__core__.PackedByteArray)->None: pass

  def mesh_set_shadow_mesh(self, mesh:__core__.RID, shadow_mesh:__core__.RID)->None: pass

  def multimesh_create(self)->__core__.RID: pass

  def multimesh_allocate_data(self, multimesh:__core__.RID, instances:int, transform_format:int , color_format:bool=False, custom_data_format:bool=False, use_indirect:bool=False)->None: pass

  def multimesh_get_instance_count(self, multimesh:__core__.RID)->int: pass

  def multimesh_set_mesh(self, multimesh:__core__.RID, mesh:__core__.RID)->None: pass

  def multimesh_instance_set_transform(self, multimesh:__core__.RID, index:int, transform:__core__.Transform3D)->None: pass

  def multimesh_instance_set_transform_2d(self, multimesh:__core__.RID, index:int, transform:__core__.Transform2D)->None: pass

  def multimesh_instance_set_color(self, multimesh:__core__.RID, index:int, color:__core__.Color)->None: pass

  def multimesh_instance_set_custom_data(self, multimesh:__core__.RID, index:int, custom_data:__core__.Color)->None: pass

  def multimesh_get_mesh(self, multimesh:__core__.RID)->__core__.RID: pass

  def multimesh_get_aabb(self, multimesh:__core__.RID)->__core__.AABB: pass

  def multimesh_set_custom_aabb(self, multimesh:__core__.RID, aabb:__core__.AABB)->None: pass

  def multimesh_get_custom_aabb(self, multimesh:__core__.RID)->__core__.AABB: pass

  def multimesh_instance_get_transform(self, multimesh:__core__.RID, index:int)->__core__.Transform3D: pass

  def multimesh_instance_get_transform_2d(self, multimesh:__core__.RID, index:int)->__core__.Transform2D: pass

  def multimesh_instance_get_color(self, multimesh:__core__.RID, index:int)->__core__.Color: pass

  def multimesh_instance_get_custom_data(self, multimesh:__core__.RID, index:int)->__core__.Color: pass

  def multimesh_set_visible_instances(self, multimesh:__core__.RID, visible:int)->None: pass

  def multimesh_get_visible_instances(self, multimesh:__core__.RID)->int: pass

  def multimesh_set_buffer(self, multimesh:__core__.RID, buffer:__core__.PackedFloat32Array)->None: pass

  def multimesh_get_command_buffer_rd_rid(self, multimesh:__core__.RID)->__core__.RID: pass

  def multimesh_get_buffer_rd_rid(self, multimesh:__core__.RID)->__core__.RID: pass

  def multimesh_get_buffer(self, multimesh:__core__.RID)->__core__.PackedFloat32Array: pass

  def multimesh_set_buffer_interpolated(self, multimesh:__core__.RID, buffer:__core__.PackedFloat32Array, buffer_previous:__core__.PackedFloat32Array)->None: pass

  def multimesh_set_physics_interpolated(self, multimesh:__core__.RID, interpolated:bool)->None: pass

  def multimesh_set_physics_interpolation_quality(self, multimesh:__core__.RID, quality:int )->None: pass

  def multimesh_instance_reset_physics_interpolation(self, multimesh:__core__.RID, index:int)->None: pass

  def skeleton_create(self)->__core__.RID: pass

  def skeleton_allocate_data(self, skeleton:__core__.RID, bones:int, is_2d_skeleton:bool=False)->None: pass

  def skeleton_get_bone_count(self, skeleton:__core__.RID)->int: pass

  def skeleton_bone_set_transform(self, skeleton:__core__.RID, bone:int, transform:__core__.Transform3D)->None: pass

  def skeleton_bone_get_transform(self, skeleton:__core__.RID, bone:int)->__core__.Transform3D: pass

  def skeleton_bone_set_transform_2d(self, skeleton:__core__.RID, bone:int, transform:__core__.Transform2D)->None: pass

  def skeleton_bone_get_transform_2d(self, skeleton:__core__.RID, bone:int)->__core__.Transform2D: pass

  def skeleton_set_base_transform_2d(self, skeleton:__core__.RID, base_transform:__core__.Transform2D)->None: pass

  def directional_light_create(self)->__core__.RID: pass

  def omni_light_create(self)->__core__.RID: pass

  def spot_light_create(self)->__core__.RID: pass

  def light_set_color(self, light:__core__.RID, color:__core__.Color)->None: pass

  def light_set_param(self, light:__core__.RID, param:int , value:float)->None: pass

  def light_set_shadow(self, light:__core__.RID, enabled:bool)->None: pass

  def light_set_projector(self, light:__core__.RID, texture:__core__.RID)->None: pass

  def light_set_negative(self, light:__core__.RID, enable:bool)->None: pass

  def light_set_cull_mask(self, light:__core__.RID, mask:int)->None: pass

  def light_set_distance_fade(self, decal:__core__.RID, enabled:bool, begin:float, shadow:float, length:float)->None: pass

  def light_set_reverse_cull_face_mode(self, light:__core__.RID, enabled:bool)->None: pass

  def light_set_shadow_caster_mask(self, light:__core__.RID, mask:int)->None: pass

  def light_set_bake_mode(self, light:__core__.RID, bake_mode:int )->None: pass

  def light_set_max_sdfgi_cascade(self, light:__core__.RID, cascade:int)->None: pass

  def light_omni_set_shadow_mode(self, light:__core__.RID, mode:int )->None: pass

  def light_directional_set_shadow_mode(self, light:__core__.RID, mode:int )->None: pass

  def light_directional_set_blend_splits(self, light:__core__.RID, enable:bool)->None: pass

  def light_directional_set_sky_mode(self, light:__core__.RID, mode:int )->None: pass

  def light_projectors_set_filter(self, filter:int )->None: pass

  def lightmaps_set_bicubic_filter(self, enable:bool)->None: pass

  def positional_soft_shadow_filter_set_quality(self, quality:int )->None: pass

  def directional_soft_shadow_filter_set_quality(self, quality:int )->None: pass

  def directional_shadow_atlas_set_size(self, size:int, is_16bits:bool)->None: pass

  def reflection_probe_create(self)->__core__.RID: pass

  def reflection_probe_set_update_mode(self, probe:__core__.RID, mode:int )->None: pass

  def reflection_probe_set_intensity(self, probe:__core__.RID, intensity:float)->None: pass

  def reflection_probe_set_blend_distance(self, probe:__core__.RID, blend_distance:float)->None: pass

  def reflection_probe_set_ambient_mode(self, probe:__core__.RID, mode:int )->None: pass

  def reflection_probe_set_ambient_color(self, probe:__core__.RID, color:__core__.Color)->None: pass

  def reflection_probe_set_ambient_energy(self, probe:__core__.RID, energy:float)->None: pass

  def reflection_probe_set_max_distance(self, probe:__core__.RID, distance:float)->None: pass

  def reflection_probe_set_size(self, probe:__core__.RID, size:__core__.Vector3)->None: pass

  def reflection_probe_set_origin_offset(self, probe:__core__.RID, offset:__core__.Vector3)->None: pass

  def reflection_probe_set_as_interior(self, probe:__core__.RID, enable:bool)->None: pass

  def reflection_probe_set_enable_box_projection(self, probe:__core__.RID, enable:bool)->None: pass

  def reflection_probe_set_enable_shadows(self, probe:__core__.RID, enable:bool)->None: pass

  def reflection_probe_set_cull_mask(self, probe:__core__.RID, layers:int)->None: pass

  def reflection_probe_set_reflection_mask(self, probe:__core__.RID, layers:int)->None: pass

  def reflection_probe_set_resolution(self, probe:__core__.RID, resolution:int)->None: pass

  def reflection_probe_set_mesh_lod_threshold(self, probe:__core__.RID, pixels:float)->None: pass

  def decal_create(self)->__core__.RID: pass

  def decal_set_size(self, decal:__core__.RID, size:__core__.Vector3)->None: pass

  def decal_set_texture(self, decal:__core__.RID, type:int , texture:__core__.RID)->None: pass

  def decal_set_emission_energy(self, decal:__core__.RID, energy:float)->None: pass

  def decal_set_albedo_mix(self, decal:__core__.RID, albedo_mix:float)->None: pass

  def decal_set_modulate(self, decal:__core__.RID, color:__core__.Color)->None: pass

  def decal_set_cull_mask(self, decal:__core__.RID, mask:int)->None: pass

  def decal_set_distance_fade(self, decal:__core__.RID, enabled:bool, begin:float, length:float)->None: pass

  def decal_set_fade(self, decal:__core__.RID, above:float, below:float)->None: pass

  def decal_set_normal_fade(self, decal:__core__.RID, fade:float)->None: pass

  def decals_set_filter(self, filter:int )->None: pass

  def gi_set_use_half_resolution(self, half_resolution:bool)->None: pass

  def voxel_gi_create(self)->__core__.RID: pass

  def voxel_gi_allocate_data(self, voxel_gi:__core__.RID, to_cell_xform:__core__.Transform3D, aabb:__core__.AABB, octree_size:__core__.Vector3i, octree_cells:__core__.PackedByteArray, data_cells:__core__.PackedByteArray, distance_field:__core__.PackedByteArray, level_counts:__core__.PackedInt32Array)->None: pass

  def voxel_gi_get_octree_size(self, voxel_gi:__core__.RID)->__core__.Vector3i: pass

  def voxel_gi_get_octree_cells(self, voxel_gi:__core__.RID)->__core__.PackedByteArray: pass

  def voxel_gi_get_data_cells(self, voxel_gi:__core__.RID)->__core__.PackedByteArray: pass

  def voxel_gi_get_distance_field(self, voxel_gi:__core__.RID)->__core__.PackedByteArray: pass

  def voxel_gi_get_level_counts(self, voxel_gi:__core__.RID)->__core__.PackedInt32Array: pass

  def voxel_gi_get_to_cell_xform(self, voxel_gi:__core__.RID)->__core__.Transform3D: pass

  def voxel_gi_set_dynamic_range(self, voxel_gi:__core__.RID, range:float)->None: pass

  def voxel_gi_set_propagation(self, voxel_gi:__core__.RID, amount:float)->None: pass

  def voxel_gi_set_energy(self, voxel_gi:__core__.RID, energy:float)->None: pass

  def voxel_gi_set_baked_exposure_normalization(self, voxel_gi:__core__.RID, baked_exposure:float)->None: pass

  def voxel_gi_set_bias(self, voxel_gi:__core__.RID, bias:float)->None: pass

  def voxel_gi_set_normal_bias(self, voxel_gi:__core__.RID, bias:float)->None: pass

  def voxel_gi_set_interior(self, voxel_gi:__core__.RID, enable:bool)->None: pass

  def voxel_gi_set_use_two_bounces(self, voxel_gi:__core__.RID, enable:bool)->None: pass

  def voxel_gi_set_quality(self, quality:int )->None: pass

  def lightmap_create(self)->__core__.RID: pass

  def lightmap_set_textures(self, lightmap:__core__.RID, light:__core__.RID, uses_sh:bool)->None: pass

  def lightmap_set_probe_bounds(self, lightmap:__core__.RID, bounds:__core__.AABB)->None: pass

  def lightmap_set_probe_interior(self, lightmap:__core__.RID, interior:bool)->None: pass

  def lightmap_set_probe_capture_data(self, lightmap:__core__.RID, points:__core__.PackedVector3Array, point_sh:__core__.PackedColorArray, tetrahedra:__core__.PackedInt32Array, bsp_tree:__core__.PackedInt32Array)->None: pass

  def lightmap_get_probe_capture_points(self, lightmap:__core__.RID)->__core__.PackedVector3Array: pass

  def lightmap_get_probe_capture_sh(self, lightmap:__core__.RID)->__core__.PackedColorArray: pass

  def lightmap_get_probe_capture_tetrahedra(self, lightmap:__core__.RID)->__core__.PackedInt32Array: pass

  def lightmap_get_probe_capture_bsp_tree(self, lightmap:__core__.RID)->__core__.PackedInt32Array: pass

  def lightmap_set_baked_exposure_normalization(self, lightmap:__core__.RID, baked_exposure:float)->None: pass

  def lightmap_set_probe_capture_update_speed(self, speed:float)->None: pass

  def particles_create(self)->__core__.RID: pass

  def particles_set_mode(self, particles:__core__.RID, mode:int )->None: pass

  def particles_set_emitting(self, particles:__core__.RID, emitting:bool)->None: pass

  def particles_get_emitting(self, particles:__core__.RID)->bool: pass

  def particles_set_amount(self, particles:__core__.RID, amount:int)->None: pass

  def particles_set_amount_ratio(self, particles:__core__.RID, ratio:float)->None: pass

  def particles_set_lifetime(self, particles:__core__.RID, lifetime:float)->None: pass

  def particles_set_one_shot(self, particles:__core__.RID, one_shot:bool)->None: pass

  def particles_set_pre_process_time(self, particles:__core__.RID, time:float)->None: pass

  def particles_request_process_time(self, particles:__core__.RID, time:float)->None: pass

  def particles_set_explosiveness_ratio(self, particles:__core__.RID, ratio:float)->None: pass

  def particles_set_randomness_ratio(self, particles:__core__.RID, ratio:float)->None: pass

  def particles_set_interp_to_end(self, particles:__core__.RID, factor:float)->None: pass

  def particles_set_emitter_velocity(self, particles:__core__.RID, velocity:__core__.Vector3)->None: pass

  def particles_set_custom_aabb(self, particles:__core__.RID, aabb:__core__.AABB)->None: pass

  def particles_set_speed_scale(self, particles:__core__.RID, scale:float)->None: pass

  def particles_set_use_local_coordinates(self, particles:__core__.RID, enable:bool)->None: pass

  def particles_set_process_material(self, particles:__core__.RID, material:__core__.RID)->None: pass

  def particles_set_fixed_fps(self, particles:__core__.RID, fps:int)->None: pass

  def particles_set_interpolate(self, particles:__core__.RID, enable:bool)->None: pass

  def particles_set_fractional_delta(self, particles:__core__.RID, enable:bool)->None: pass

  def particles_set_collision_base_size(self, particles:__core__.RID, size:float)->None: pass

  def particles_set_transform_align(self, particles:__core__.RID, align:int )->None: pass

  def particles_set_trails(self, particles:__core__.RID, enable:bool, length_sec:float)->None: pass

  def particles_set_trail_bind_poses(self, particles:__core__.RID, bind_poses:__core__.Array)->None: pass

  def particles_is_inactive(self, particles:__core__.RID)->bool: pass

  def particles_request_process(self, particles:__core__.RID)->None: pass

  def particles_restart(self, particles:__core__.RID)->None: pass

  def particles_set_subemitter(self, particles:__core__.RID, subemitter_particles:__core__.RID)->None: pass

  def particles_emit(self, particles:__core__.RID, transform:__core__.Transform3D, velocity:__core__.Vector3, color:__core__.Color, custom:__core__.Color, emit_flags:int)->None: pass

  def particles_set_draw_order(self, particles:__core__.RID, order:int )->None: pass

  def particles_set_draw_passes(self, particles:__core__.RID, count:int)->None: pass

  def particles_set_draw_pass_mesh(self, particles:__core__.RID, pass_:int, mesh:__core__.RID)->None: pass

  def particles_get_current_aabb(self, particles:__core__.RID)->__core__.AABB: pass

  def particles_set_emission_transform(self, particles:__core__.RID, transform:__core__.Transform3D)->None: pass

  def particles_collision_create(self)->__core__.RID: pass

  def particles_collision_set_collision_type(self, particles_collision:__core__.RID, type:int )->None: pass

  def particles_collision_set_cull_mask(self, particles_collision:__core__.RID, mask:int)->None: pass

  def particles_collision_set_sphere_radius(self, particles_collision:__core__.RID, radius:float)->None: pass

  def particles_collision_set_box_extents(self, particles_collision:__core__.RID, extents:__core__.Vector3)->None: pass

  def particles_collision_set_attractor_strength(self, particles_collision:__core__.RID, strength:float)->None: pass

  def particles_collision_set_attractor_directionality(self, particles_collision:__core__.RID, amount:float)->None: pass

  def particles_collision_set_attractor_attenuation(self, particles_collision:__core__.RID, curve:float)->None: pass

  def particles_collision_set_field_texture(self, particles_collision:__core__.RID, texture:__core__.RID)->None: pass

  def particles_collision_height_field_update(self, particles_collision:__core__.RID)->None: pass

  def particles_collision_set_height_field_resolution(self, particles_collision:__core__.RID, resolution:int )->None: pass

  def particles_collision_set_height_field_mask(self, particles_collision:__core__.RID, mask:int)->None: pass

  def fog_volume_create(self)->__core__.RID: pass

  def fog_volume_set_shape(self, fog_volume:__core__.RID, shape:int )->None: pass

  def fog_volume_set_size(self, fog_volume:__core__.RID, size:__core__.Vector3)->None: pass

  def fog_volume_set_material(self, fog_volume:__core__.RID, material:__core__.RID)->None: pass

  def visibility_notifier_create(self)->__core__.RID: pass

  def visibility_notifier_set_aabb(self, notifier:__core__.RID, aabb:__core__.AABB)->None: pass

  def visibility_notifier_set_callbacks(self, notifier:__core__.RID, enter_callable:__core__.Callable, exit_callable:__core__.Callable)->None: pass

  def occluder_create(self)->__core__.RID: pass

  def occluder_set_mesh(self, occluder:__core__.RID, vertices:__core__.PackedVector3Array, indices:__core__.PackedInt32Array)->None: pass

  def camera_create(self)->__core__.RID: pass

  def camera_set_perspective(self, camera:__core__.RID, fovy_degrees:float, z_near:float, z_far:float)->None: pass

  def camera_set_orthogonal(self, camera:__core__.RID, size:float, z_near:float, z_far:float)->None: pass

  def camera_set_frustum(self, camera:__core__.RID, size:float, offset:__core__.Vector2, z_near:float, z_far:float)->None: pass

  def camera_set_transform(self, camera:__core__.RID, transform:__core__.Transform3D)->None: pass

  def camera_set_cull_mask(self, camera:__core__.RID, layers:int)->None: pass

  def camera_set_environment(self, camera:__core__.RID, env:__core__.RID)->None: pass

  def camera_set_camera_attributes(self, camera:__core__.RID, effects:__core__.RID)->None: pass

  def camera_set_compositor(self, camera:__core__.RID, compositor:__core__.RID)->None: pass

  def camera_set_use_vertical_aspect(self, camera:__core__.RID, enable:bool)->None: pass

  def viewport_create(self)->__core__.RID: pass

  def viewport_set_use_xr(self, viewport:__core__.RID, use_xr:bool)->None: pass

  def viewport_set_size(self, viewport:__core__.RID, width:int, height:int)->None: pass

  def viewport_set_active(self, viewport:__core__.RID, active:bool)->None: pass

  def viewport_set_parent_viewport(self, viewport:__core__.RID, parent_viewport:__core__.RID)->None: pass

  def viewport_attach_to_screen(self, viewport:__core__.RID, rect:__core__.Rect2= __core__.Rect2.new0(), screen:int=0)->None: pass

  def viewport_set_render_direct_to_screen(self, viewport:__core__.RID, enabled:bool)->None: pass

  def viewport_set_canvas_cull_mask(self, viewport:__core__.RID, canvas_cull_mask:int)->None: pass

  def viewport_set_scaling_3d_mode(self, viewport:__core__.RID, scaling_3d_mode:int )->None: pass

  def viewport_set_scaling_3d_scale(self, viewport:__core__.RID, scale:float)->None: pass

  def viewport_set_fsr_sharpness(self, viewport:__core__.RID, sharpness:float)->None: pass

  def viewport_set_texture_mipmap_bias(self, viewport:__core__.RID, mipmap_bias:float)->None: pass

  def viewport_set_anisotropic_filtering_level(self, viewport:__core__.RID, anisotropic_filtering_level:int )->None: pass

  def viewport_set_update_mode(self, viewport:__core__.RID, update_mode:int )->None: pass

  def viewport_get_update_mode(self, viewport:__core__.RID)->int: pass

  def viewport_set_clear_mode(self, viewport:__core__.RID, clear_mode:int )->None: pass

  def viewport_get_render_target(self, viewport:__core__.RID)->__core__.RID: pass

  def viewport_get_texture(self, viewport:__core__.RID)->__core__.RID: pass

  def viewport_set_disable_3d(self, viewport:__core__.RID, disable:bool)->None: pass

  def viewport_set_disable_2d(self, viewport:__core__.RID, disable:bool)->None: pass

  def viewport_set_environment_mode(self, viewport:__core__.RID, mode:int )->None: pass

  def viewport_attach_camera(self, viewport:__core__.RID, camera:__core__.RID)->None: pass

  def viewport_set_scenario(self, viewport:__core__.RID, scenario:__core__.RID)->None: pass

  def viewport_attach_canvas(self, viewport:__core__.RID, canvas:__core__.RID)->None: pass

  def viewport_remove_canvas(self, viewport:__core__.RID, canvas:__core__.RID)->None: pass

  def viewport_set_snap_2d_transforms_to_pixel(self, viewport:__core__.RID, enabled:bool)->None: pass

  def viewport_set_snap_2d_vertices_to_pixel(self, viewport:__core__.RID, enabled:bool)->None: pass

  def viewport_set_default_canvas_item_texture_filter(self, viewport:__core__.RID, filter:int )->None: pass

  def viewport_set_default_canvas_item_texture_repeat(self, viewport:__core__.RID, repeat:int )->None: pass

  def viewport_set_canvas_transform(self, viewport:__core__.RID, canvas:__core__.RID, offset:__core__.Transform2D)->None: pass

  def viewport_set_canvas_stacking(self, viewport:__core__.RID, canvas:__core__.RID, layer:int, sublayer:int)->None: pass

  def viewport_set_transparent_background(self, viewport:__core__.RID, enabled:bool)->None: pass

  def viewport_set_global_canvas_transform(self, viewport:__core__.RID, transform:__core__.Transform2D)->None: pass

  def viewport_set_sdf_oversize_and_scale(self, viewport:__core__.RID, oversize:int , scale:int )->None: pass

  def viewport_set_positional_shadow_atlas_size(self, viewport:__core__.RID, size:int, use_16_bits:bool=False)->None: pass

  def viewport_set_positional_shadow_atlas_quadrant_subdivision(self, viewport:__core__.RID, quadrant:int, subdivision:int)->None: pass

  def viewport_set_msaa_3d(self, viewport:__core__.RID, msaa:int )->None: pass

  def viewport_set_msaa_2d(self, viewport:__core__.RID, msaa:int )->None: pass

  def viewport_set_use_hdr_2d(self, viewport:__core__.RID, enabled:bool)->None: pass

  def viewport_set_screen_space_aa(self, viewport:__core__.RID, mode:int )->None: pass

  def viewport_set_use_taa(self, viewport:__core__.RID, enable:bool)->None: pass

  def viewport_set_use_debanding(self, viewport:__core__.RID, enable:bool)->None: pass

  def viewport_set_use_occlusion_culling(self, viewport:__core__.RID, enable:bool)->None: pass

  def viewport_set_occlusion_rays_per_thread(self, rays_per_thread:int)->None: pass

  def viewport_set_occlusion_culling_build_quality(self, quality:int )->None: pass

  def viewport_get_render_info(self, viewport:__core__.RID, type:int , info:int )->int: pass

  def viewport_set_debug_draw(self, viewport:__core__.RID, draw:int )->None: pass

  def viewport_set_measure_render_time(self, viewport:__core__.RID, enable:bool)->None: pass

  def viewport_get_measured_render_time_cpu(self, viewport:__core__.RID)->float: pass

  def viewport_get_measured_render_time_gpu(self, viewport:__core__.RID)->float: pass

  def viewport_set_vrs_mode(self, viewport:__core__.RID, mode:int )->None: pass

  def viewport_set_vrs_update_mode(self, viewport:__core__.RID, mode:int )->None: pass

  def viewport_set_vrs_texture(self, viewport:__core__.RID, texture:__core__.RID)->None: pass

  def sky_create(self)->__core__.RID: pass

  def sky_set_radiance_size(self, sky:__core__.RID, radiance_size:int)->None: pass

  def sky_set_mode(self, sky:__core__.RID, mode:int )->None: pass

  def sky_set_material(self, sky:__core__.RID, material:__core__.RID)->None: pass

  def sky_bake_panorama(self, sky:__core__.RID, energy:float, bake_irradiance:bool, size:__core__.Vector2i)->__image__.Image: pass

  def compositor_effect_create(self)->__core__.RID: pass

  def compositor_effect_set_enabled(self, effect:__core__.RID, enabled:bool)->None: pass

  def compositor_effect_set_callback(self, effect:__core__.RID, callback_type:int , callback:__core__.Callable)->None: pass

  def compositor_effect_set_flag(self, effect:__core__.RID, flag:int , set:bool)->None: pass

  def compositor_create(self)->__core__.RID: pass

  def compositor_set_compositor_effects(self, compositor:__core__.RID, effects:__core__.Array)->None: pass

  def environment_create(self)->__core__.RID: pass

  def environment_set_background(self, env:__core__.RID, bg:int )->None: pass

  def environment_set_camera_id(self, env:__core__.RID, id:int)->None: pass

  def environment_set_sky(self, env:__core__.RID, sky:__core__.RID)->None: pass

  def environment_set_sky_custom_fov(self, env:__core__.RID, scale:float)->None: pass

  def environment_set_sky_orientation(self, env:__core__.RID, orientation:__core__.Basis)->None: pass

  def environment_set_bg_color(self, env:__core__.RID, color:__core__.Color)->None: pass

  def environment_set_bg_energy(self, env:__core__.RID, multiplier:float, exposure_value:float)->None: pass

  def environment_set_canvas_max_layer(self, env:__core__.RID, max_layer:int)->None: pass

  def environment_set_ambient_light(self, env:__core__.RID, color:__core__.Color, ambient:int =0, energy:float=1.0, sky_contribution:float=0.0, reflection_source:int =0)->None: pass

  def environment_set_glow(self, env:__core__.RID, enable:bool, levels:__core__.PackedFloat32Array, intensity:float, strength:float, mix:float, bloom_threshold:float, blend_mode:int , hdr_bleed_threshold:float, hdr_bleed_scale:float, hdr_luminance_cap:float, glow_map_strength:float, glow_map:__core__.RID)->None: pass

  def environment_set_tonemap(self, env:__core__.RID, tone_mapper:int , exposure:float, white:float)->None: pass

  def environment_set_adjustment(self, env:__core__.RID, enable:bool, brightness:float, contrast:float, saturation:float, use_1d_color_correction:bool, color_correction:__core__.RID)->None: pass

  def environment_set_ssr(self, env:__core__.RID, enable:bool, max_steps:int, fade_in:float, fade_out:float, depth_tolerance:float)->None: pass

  def environment_set_ssao(self, env:__core__.RID, enable:bool, radius:float, intensity:float, power:float, detail:float, horizon:float, sharpness:float, light_affect:float, ao_channel_affect:float)->None: pass

  def environment_set_fog(self, env:__core__.RID, enable:bool, light_color:__core__.Color, light_energy:float, sun_scatter:float, density:float, height:float, height_density:float, aerial_perspective:float, sky_affect:float, fog_mode:int =0)->None: pass

  def environment_set_sdfgi(self, env:__core__.RID, enable:bool, cascades:int, min_cell_size:float, y_scale:int , use_occlusion:bool, bounce_feedback:float, read_sky:bool, energy:float, normal_bias:float, probe_bias:float)->None: pass

  def environment_set_volumetric_fog(self, env:__core__.RID, enable:bool, density:float, albedo:__core__.Color, emission:__core__.Color, emission_energy:float, anisotropy:float, length:float, p_detail_spread:float, gi_inject:float, temporal_reprojection:bool, temporal_reprojection_amount:float, ambient_inject:float, sky_affect:float)->None: pass

  def environment_glow_set_use_bicubic_upscale(self, enable:bool)->None: pass

  def environment_set_ssr_roughness_quality(self, quality:int )->None: pass

  def environment_set_ssao_quality(self, quality:int , half_size:bool, adaptive_target:float, blur_passes:int, fadeout_from:float, fadeout_to:float)->None: pass

  def environment_set_ssil_quality(self, quality:int , half_size:bool, adaptive_target:float, blur_passes:int, fadeout_from:float, fadeout_to:float)->None: pass

  def environment_set_sdfgi_ray_count(self, ray_count:int )->None: pass

  def environment_set_sdfgi_frames_to_converge(self, frames:int )->None: pass

  def environment_set_sdfgi_frames_to_update_light(self, frames:int )->None: pass

  def environment_set_volumetric_fog_volume_size(self, size:int, depth:int)->None: pass

  def environment_set_volumetric_fog_filter_active(self, active:bool)->None: pass

  def environment_bake_panorama(self, environment:__core__.RID, bake_irradiance:bool, size:__core__.Vector2i)->__image__.Image: pass

  def screen_space_roughness_limiter_set_active(self, enable:bool, amount:float, limit:float)->None: pass

  def sub_surface_scattering_set_quality(self, quality:int )->None: pass

  def sub_surface_scattering_set_scale(self, scale:float, depth_scale:float)->None: pass

  def camera_attributes_create(self)->__core__.RID: pass

  def camera_attributes_set_dof_blur_quality(self, quality:int , use_jitter:bool)->None: pass

  def camera_attributes_set_dof_blur_bokeh_shape(self, shape:int )->None: pass

  def camera_attributes_set_dof_blur(self, camera_attributes:__core__.RID, far_enable:bool, far_distance:float, far_transition:float, near_enable:bool, near_distance:float, near_transition:float, amount:float)->None: pass

  def camera_attributes_set_exposure(self, camera_attributes:__core__.RID, multiplier:float, normalization:float)->None: pass

  def camera_attributes_set_auto_exposure(self, camera_attributes:__core__.RID, enable:bool, min_sensitivity:float, max_sensitivity:float, speed:float, scale:float)->None: pass

  def scenario_create(self)->__core__.RID: pass

  def scenario_set_environment(self, scenario:__core__.RID, environment:__core__.RID)->None: pass

  def scenario_set_fallback_environment(self, scenario:__core__.RID, environment:__core__.RID)->None: pass

  def scenario_set_camera_attributes(self, scenario:__core__.RID, effects:__core__.RID)->None: pass

  def scenario_set_compositor(self, scenario:__core__.RID, compositor:__core__.RID)->None: pass

  def instance_create2(self, base:__core__.RID, scenario:__core__.RID)->__core__.RID: pass

  def instance_create(self)->__core__.RID: pass

  def instance_set_base(self, instance:__core__.RID, base:__core__.RID)->None: pass

  def instance_set_scenario(self, instance:__core__.RID, scenario:__core__.RID)->None: pass

  def instance_set_layer_mask(self, instance:__core__.RID, mask:int)->None: pass

  def instance_set_pivot_data(self, instance:__core__.RID, sorting_offset:float, use_aabb_center:bool)->None: pass

  def instance_set_transform(self, instance:__core__.RID, transform:__core__.Transform3D)->None: pass

  def instance_set_interpolated(self, instance:__core__.RID, interpolated:bool)->None: pass

  def instance_reset_physics_interpolation(self, instance:__core__.RID)->None: pass

  def instance_attach_object_instance_id(self, instance:__core__.RID, id:int)->None: pass

  def instance_set_blend_shape_weight(self, instance:__core__.RID, shape:int, weight:float)->None: pass

  def instance_set_surface_override_material(self, instance:__core__.RID, surface:int, material:__core__.RID)->None: pass

  def instance_set_visible(self, instance:__core__.RID, visible:bool)->None: pass

  def instance_geometry_set_transparency(self, instance:__core__.RID, transparency:float)->None: pass

  def instance_set_custom_aabb(self, instance:__core__.RID, aabb:__core__.AABB)->None: pass

  def instance_attach_skeleton(self, instance:__core__.RID, skeleton:__core__.RID)->None: pass

  def instance_set_extra_visibility_margin(self, instance:__core__.RID, margin:float)->None: pass

  def instance_set_visibility_parent(self, instance:__core__.RID, parent:__core__.RID)->None: pass

  def instance_set_ignore_culling(self, instance:__core__.RID, enabled:bool)->None: pass

  def instance_geometry_set_flag(self, instance:__core__.RID, flag:int , enabled:bool)->None: pass

  def instance_geometry_set_cast_shadows_setting(self, instance:__core__.RID, shadow_casting_setting:int )->None: pass

  def instance_geometry_set_material_override(self, instance:__core__.RID, material:__core__.RID)->None: pass

  def instance_geometry_set_material_overlay(self, instance:__core__.RID, material:__core__.RID)->None: pass

  def instance_geometry_set_visibility_range(self, instance:__core__.RID, min:float, max:float, min_margin:float, max_margin:float, fade_mode:int )->None: pass

  def instance_geometry_set_lightmap(self, instance:__core__.RID, lightmap:__core__.RID, lightmap_uv_scale:__core__.Rect2, lightmap_slice:int)->None: pass

  def instance_geometry_set_lod_bias(self, instance:__core__.RID, lod_bias:float)->None: pass

  def instance_geometry_set_shader_parameter(self, instance:__core__.RID, parameter:__core__.StringName|str, value:object)->None: pass

  def instance_geometry_get_shader_parameter(self, instance:__core__.RID, parameter:__core__.StringName|str)->object: pass

  def instance_geometry_get_shader_parameter_default_value(self, instance:__core__.RID, parameter:__core__.StringName|str)->object: pass

  def instance_geometry_get_shader_parameter_list(self, instance:__core__.RID)->typedarray::Dictionary: pass

  def instances_cull_aabb(self, aabb:__core__.AABB, scenario:__core__.RID= __core__.RID.new0())->__core__.PackedInt64Array: pass

  def instances_cull_ray(self, from_:__core__.Vector3, to:__core__.Vector3, scenario:__core__.RID= __core__.RID.new0())->__core__.PackedInt64Array: pass

  def instances_cull_convex(self, convex:__core__.Array, scenario:__core__.RID= __core__.RID.new0())->__core__.PackedInt64Array: pass

  def bake_render_uv2(self, base:__core__.RID, material_overrides:__core__.Array, image_size:__core__.Vector2i)->typedarray::Image: pass

  def canvas_create(self)->__core__.RID: pass

  def canvas_set_item_mirroring(self, canvas:__core__.RID, item:__core__.RID, mirroring:__core__.Vector2)->None: pass

  def canvas_set_item_repeat(self, item:__core__.RID, repeat_size:__core__.Vector2, repeat_times:int)->None: pass

  def canvas_set_modulate(self, canvas:__core__.RID, color:__core__.Color)->None: pass

  def canvas_set_disable_scale(self, disable:bool)->None: pass

  def canvas_texture_create(self)->__core__.RID: pass

  def canvas_texture_set_channel(self, canvas_texture:__core__.RID, channel:int , texture:__core__.RID)->None: pass

  def canvas_texture_set_shading_parameters(self, canvas_texture:__core__.RID, base_color:__core__.Color, shininess:float)->None: pass

  def canvas_texture_set_texture_filter(self, canvas_texture:__core__.RID, filter:int )->None: pass

  def canvas_texture_set_texture_repeat(self, canvas_texture:__core__.RID, repeat:int )->None: pass

  def canvas_item_create(self)->__core__.RID: pass

  def canvas_item_set_parent(self, item:__core__.RID, parent:__core__.RID)->None: pass

  def canvas_item_set_default_texture_filter(self, item:__core__.RID, filter:int )->None: pass

  def canvas_item_set_default_texture_repeat(self, item:__core__.RID, repeat:int )->None: pass

  def canvas_item_set_visible(self, item:__core__.RID, visible:bool)->None: pass

  def canvas_item_set_light_mask(self, item:__core__.RID, mask:int)->None: pass

  def canvas_item_set_visibility_layer(self, item:__core__.RID, visibility_layer:int)->None: pass

  def canvas_item_set_transform(self, item:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_item_set_clip(self, item:__core__.RID, clip:bool)->None: pass

  def canvas_item_set_distance_field_mode(self, item:__core__.RID, enabled:bool)->None: pass

  def canvas_item_set_custom_rect(self, item:__core__.RID, use_custom_rect:bool, rect:__core__.Rect2= __core__.Rect2.new0())->None: pass

  def canvas_item_set_modulate(self, item:__core__.RID, color:__core__.Color)->None: pass

  def canvas_item_set_self_modulate(self, item:__core__.RID, color:__core__.Color)->None: pass

  def canvas_item_set_draw_behind_parent(self, item:__core__.RID, enabled:bool)->None: pass

  def canvas_item_set_interpolated(self, item:__core__.RID, interpolated:bool)->None: pass

  def canvas_item_reset_physics_interpolation(self, item:__core__.RID)->None: pass

  def canvas_item_transform_physics_interpolation(self, item:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_item_add_line(self, item:__core__.RID, from_:__core__.Vector2, to:__core__.Vector2, color:__core__.Color, width:float=-1.0, antialiased:bool=False)->None: pass

  def canvas_item_add_polyline(self, item:__core__.RID, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, width:float=-1.0, antialiased:bool=False)->None: pass

  def canvas_item_add_multiline(self, item:__core__.RID, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, width:float=-1.0, antialiased:bool=False)->None: pass

  def canvas_item_add_rect(self, item:__core__.RID, rect:__core__.Rect2, color:__core__.Color, antialiased:bool=False)->None: pass

  def canvas_item_add_circle(self, item:__core__.RID, pos:__core__.Vector2, radius:float, color:__core__.Color, antialiased:bool=False)->None: pass

  def canvas_item_add_texture_rect(self, item:__core__.RID, rect:__core__.Rect2, texture:__core__.RID, tile:bool=False, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False)->None: pass

  def canvas_item_add_msdf_texture_rect_region(self, item:__core__.RID, rect:__core__.Rect2, texture:__core__.RID, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0(), outline_size:int=0, px_range:float=1.0, scale:float=1.0)->None: pass

  def canvas_item_add_lcd_texture_rect_region(self, item:__core__.RID, rect:__core__.Rect2, texture:__core__.RID, src_rect:__core__.Rect2, modulate:__core__.Color)->None: pass

  def canvas_item_add_texture_rect_region(self, item:__core__.RID, rect:__core__.Rect2, texture:__core__.RID, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False, clip_uv:bool=True)->None: pass

  def canvas_item_add_nine_patch(self, item:__core__.RID, rect:__core__.Rect2, source:__core__.Rect2, texture:__core__.RID, topleft:__core__.Vector2, bottomright:__core__.Vector2, x_axis_mode:int =0, y_axis_mode:int =0, draw_center:bool=True, modulate:__core__.Color= __core__.Color.new0())->None: pass

  def canvas_item_add_primitive(self, item:__core__.RID, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array, texture:__core__.RID)->None: pass

  def canvas_item_add_polygon(self, item:__core__.RID, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array= __core__.PackedVector2Array.new0(), texture:__core__.RID= __core__.RID.new0())->None: pass

  def canvas_item_add_triangle_array(self, item:__core__.RID, indices:__core__.PackedInt32Array, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array= __core__.PackedVector2Array.new0(), bones:__core__.PackedInt32Array= __core__.PackedInt32Array.new0(), weights:__core__.PackedFloat32Array= __core__.PackedFloat32Array.new0(), texture:__core__.RID= __core__.RID.new0(), count:int=-1)->None: pass

  def canvas_item_add_mesh(self, item:__core__.RID, mesh:__core__.RID, transform:__core__.Transform2D= __core__.Transform2D.new0(), modulate:__core__.Color= __core__.Color.new0(), texture:__core__.RID= __core__.RID.new0())->None: pass

  def canvas_item_add_multimesh(self, item:__core__.RID, mesh:__core__.RID, texture:__core__.RID= __core__.RID.new0())->None: pass

  def canvas_item_add_particles(self, item:__core__.RID, particles:__core__.RID, texture:__core__.RID)->None: pass

  def canvas_item_add_set_transform(self, item:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_item_add_clip_ignore(self, item:__core__.RID, ignore:bool)->None: pass

  def canvas_item_add_animation_slice(self, item:__core__.RID, animation_length:float, slice_begin:float, slice_end:float, offset:float=0.0)->None: pass

  def canvas_item_set_sort_children_by_y(self, item:__core__.RID, enabled:bool)->None: pass

  def canvas_item_set_z_index(self, item:__core__.RID, z_index:int)->None: pass

  def canvas_item_set_z_as_relative_to_parent(self, item:__core__.RID, enabled:bool)->None: pass

  def canvas_item_set_copy_to_backbuffer(self, item:__core__.RID, enabled:bool, rect:__core__.Rect2)->None: pass

  def canvas_item_attach_skeleton(self, item:__core__.RID, skeleton:__core__.RID)->None: pass

  def canvas_item_clear(self, item:__core__.RID)->None: pass

  def canvas_item_set_draw_index(self, item:__core__.RID, index:int)->None: pass

  def canvas_item_set_material(self, item:__core__.RID, material:__core__.RID)->None: pass

  def canvas_item_set_use_parent_material(self, item:__core__.RID, enabled:bool)->None: pass

  def canvas_item_set_instance_shader_parameter(self, instance:__core__.RID, parameter:__core__.StringName|str, value:object)->None: pass

  def canvas_item_get_instance_shader_parameter(self, instance:__core__.RID, parameter:__core__.StringName|str)->object: pass

  def canvas_item_get_instance_shader_parameter_default_value(self, instance:__core__.RID, parameter:__core__.StringName|str)->object: pass

  def canvas_item_get_instance_shader_parameter_list(self, instance:__core__.RID)->typedarray::Dictionary: pass

  def canvas_item_set_visibility_notifier(self, item:__core__.RID, enable:bool, area:__core__.Rect2, enter_callable:__core__.Callable, exit_callable:__core__.Callable)->None: pass

  def canvas_item_set_canvas_group_mode(self, item:__core__.RID, mode:int , clear_margin:float=5.0, fit_empty:bool=False, fit_margin:float=0.0, blur_mipmaps:bool=False)->None: pass

  def debug_canvas_item_get_rect(self, item:__core__.RID)->__core__.Rect2: pass

  def canvas_light_create(self)->__core__.RID: pass

  def canvas_light_attach_to_canvas(self, light:__core__.RID, canvas:__core__.RID)->None: pass

  def canvas_light_set_enabled(self, light:__core__.RID, enabled:bool)->None: pass

  def canvas_light_set_texture_scale(self, light:__core__.RID, scale:float)->None: pass

  def canvas_light_set_transform(self, light:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_light_set_texture(self, light:__core__.RID, texture:__core__.RID)->None: pass

  def canvas_light_set_texture_offset(self, light:__core__.RID, offset:__core__.Vector2)->None: pass

  def canvas_light_set_color(self, light:__core__.RID, color:__core__.Color)->None: pass

  def canvas_light_set_height(self, light:__core__.RID, height:float)->None: pass

  def canvas_light_set_energy(self, light:__core__.RID, energy:float)->None: pass

  def canvas_light_set_z_range(self, light:__core__.RID, min_z:int, max_z:int)->None: pass

  def canvas_light_set_layer_range(self, light:__core__.RID, min_layer:int, max_layer:int)->None: pass

  def canvas_light_set_item_cull_mask(self, light:__core__.RID, mask:int)->None: pass

  def canvas_light_set_item_shadow_cull_mask(self, light:__core__.RID, mask:int)->None: pass

  def canvas_light_set_mode(self, light:__core__.RID, mode:int )->None: pass

  def canvas_light_set_shadow_enabled(self, light:__core__.RID, enabled:bool)->None: pass

  def canvas_light_set_shadow_filter(self, light:__core__.RID, filter:int )->None: pass

  def canvas_light_set_shadow_color(self, light:__core__.RID, color:__core__.Color)->None: pass

  def canvas_light_set_shadow_smooth(self, light:__core__.RID, smooth:float)->None: pass

  def canvas_light_set_blend_mode(self, light:__core__.RID, mode:int )->None: pass

  def canvas_light_set_interpolated(self, light:__core__.RID, interpolated:bool)->None: pass

  def canvas_light_reset_physics_interpolation(self, light:__core__.RID)->None: pass

  def canvas_light_transform_physics_interpolation(self, light:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_light_occluder_create(self)->__core__.RID: pass

  def canvas_light_occluder_attach_to_canvas(self, occluder:__core__.RID, canvas:__core__.RID)->None: pass

  def canvas_light_occluder_set_enabled(self, occluder:__core__.RID, enabled:bool)->None: pass

  def canvas_light_occluder_set_polygon(self, occluder:__core__.RID, polygon:__core__.RID)->None: pass

  def canvas_light_occluder_set_as_sdf_collision(self, occluder:__core__.RID, enable:bool)->None: pass

  def canvas_light_occluder_set_transform(self, occluder:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_light_occluder_set_light_mask(self, occluder:__core__.RID, mask:int)->None: pass

  def canvas_light_occluder_set_interpolated(self, occluder:__core__.RID, interpolated:bool)->None: pass

  def canvas_light_occluder_reset_physics_interpolation(self, occluder:__core__.RID)->None: pass

  def canvas_light_occluder_transform_physics_interpolation(self, occluder:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_occluder_polygon_create(self)->__core__.RID: pass

  def canvas_occluder_polygon_set_shape(self, occluder_polygon:__core__.RID, shape:__core__.PackedVector2Array, closed:bool)->None: pass

  def canvas_occluder_polygon_set_cull_mode(self, occluder_polygon:__core__.RID, mode:int )->None: pass

  def canvas_set_shadow_texture_size(self, size:int)->None: pass

  def global_shader_parameter_add(self, name:__core__.StringName|str, type:int , default_value:object)->None: pass

  def global_shader_parameter_remove(self, name:__core__.StringName|str)->None: pass

  def global_shader_parameter_get_list(self)->typedarray::StringName: pass

  def global_shader_parameter_set(self, name:__core__.StringName|str, value:object)->None: pass

  def global_shader_parameter_set_override(self, name:__core__.StringName|str, value:object)->None: pass

  def global_shader_parameter_get(self, name:__core__.StringName|str)->object: pass

  def global_shader_parameter_get_type(self, name:__core__.StringName|str)->int: pass

  def free_rid(self, rid:__core__.RID)->None: pass

  def request_frame_drawn_callback(self, callable:__core__.Callable)->None: pass

  def has_changed(self)->bool: pass

  def get_rendering_info(self, info:int )->int: pass

  def get_video_adapter_name(self)->str: pass

  def get_video_adapter_vendor(self)->str: pass

  def get_video_adapter_type(self)->int: pass

  def get_video_adapter_api_version(self)->str: pass

  def get_current_rendering_driver_name(self)->str: pass

  def get_current_rendering_method(self)->str: pass

  def make_sphere_mesh(self, latitudes:int, longitudes:int, radius:float)->__core__.RID: pass

  def get_test_cube(self)->__core__.RID: pass

  def get_test_texture(self)->__core__.RID: pass

  def get_white_texture(self)->__core__.RID: pass

  def set_boot_image(self, image:__image__.Image, color:__core__.Color, scale:bool, use_filter:bool=True)->None: pass

  def get_default_clear_color(self)->__core__.Color: pass

  def set_default_clear_color(self, color:__core__.Color)->None: pass

  def has_os_feature(self, feature:str)->bool: pass

  def set_debug_generate_wireframes(self, generate:bool)->None: pass

  def is_render_loop_enabled(self)->bool: pass

  def set_render_loop_enabled(self, enabled:bool)->None: pass

  def get_frame_setup_time_cpu(self)->float: pass

  def force_sync(self)->None: pass

  def force_draw(self, swap_buffers:bool=True, frame_step:float=0.0)->None: pass

  def get_rendering_device(self)->__renderingdevice__.RenderingDevice: pass

  def create_local_rendering_device(self)->__renderingdevice__.RenderingDevice: pass

  def is_on_render_thread(self)->bool: pass

  def call_on_render_thread(self, callable:__core__.Callable)->None: pass

  def has_feature(self, feature:int )->bool: pass


