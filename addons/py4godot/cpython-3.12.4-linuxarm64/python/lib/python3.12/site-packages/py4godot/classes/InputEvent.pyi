from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.InputEventMouse as __inputeventmouse__
import py4godot.classes.InputEventScreenTouch as __inputeventscreentouch__
import py4godot.classes.Resource as __resource__
import py4godot.classes.InputEventWithModifiers as __inputeventwithmodifiers__
import py4godot.classes.InputEventMouseMotion as __inputeventmousemotion__
import py4godot.classes.InputEventAction as __inputeventaction__
import py4godot.classes.InputEventKey as __inputeventkey__
import py4godot.classes.InputEventScreenDrag as __inputeventscreendrag__
import py4godot.classes.InputEventShortcut as __inputeventshortcut__
import py4godot.classes.InputEventGesture as __inputeventgesture__
import py4godot.classes.InputEventJoypadButton as __inputeventjoypadbutton__
import py4godot.classes.InputEventMouseButton as __inputeventmousebutton__
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.InputEventMIDI as __inputeventmidi__
import py4godot.classes.InputEventMagnifyGesture as __inputeventmagnifygesture__
import py4godot.classes.InputEventFromWindow as __inputeventfromwindow__
import py4godot.classes.InputEventPanGesture as __inputeventpangesture__
import py4godot.classes.InputEventJoypadMotion as __inputeventjoypadmotion__



class InputEvent(__resource__.Resource):

  @staticmethod
  def constructor()->InputEvent:pass



  @staticmethod
  def cast(other:__object__.Object)->InputEvent:pass


  @property
  def device(self)->int: pass
  @device.setter
  def device(self,  value:int)->None: pass
  def set_device(self, device:int)->None: pass

  def get_device(self)->int: pass

  def is_action(self, action:__core__.StringName|str, exact_match:bool=False)->bool: pass

  def is_action_pressed(self, action:__core__.StringName|str, allow_echo:bool=False, exact_match:bool=False)->bool: pass

  def is_action_released(self, action:__core__.StringName|str, exact_match:bool=False)->bool: pass

  def get_action_strength(self, action:__core__.StringName|str, exact_match:bool=False)->float: pass

  def is_canceled(self)->bool: pass

  def is_pressed(self)->bool: pass

  def is_released(self)->bool: pass

  def is_echo(self)->bool: pass

  def as_text(self)->str: pass

  def is_match(self, event:__inputevent__.InputEvent, exact_match:bool=True)->bool: pass

  def is_action_type(self)->bool: pass

  def accumulate(self, with_event:__inputevent__.InputEvent)->bool: pass

  def xformed_by(self, xform:__core__.Transform2D, local_ofs:__core__.Vector2= __core__.Vector2.new0())->__inputeventmouse__.InputEventMouse|__inputeventscreentouch__.InputEventScreenTouch|__inputeventwithmodifiers__.InputEventWithModifiers|__inputeventmousemotion__.InputEventMouseMotion|__inputeventaction__.InputEventAction|__inputeventkey__.InputEventKey|__inputeventscreendrag__.InputEventScreenDrag|__inputeventshortcut__.InputEventShortcut|__inputeventgesture__.InputEventGesture|__inputeventjoypadbutton__.InputEventJoypadButton|__inputeventmousebutton__.InputEventMouseButton|__inputevent__.InputEvent|__inputeventmidi__.InputEventMIDI|__inputeventmagnifygesture__.InputEventMagnifyGesture|__inputeventfromwindow__.InputEventFromWindow|__inputeventpangesture__.InputEventPanGesture|__inputeventjoypadmotion__.InputEventJoypadMotion: pass


