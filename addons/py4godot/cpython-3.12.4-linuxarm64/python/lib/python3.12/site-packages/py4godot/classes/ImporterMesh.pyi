from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.PrismMesh as __prismmesh__
import py4godot.classes.p as __p__
import py4godot.classes.y as __y__
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__
import py4godot.classes.T as __t__
import py4godot.classes.CylinderMesh as __cylindermesh__
import py4godot.classes.e as __e__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.SphereMesh as __spheremesh__
import py4godot.classes.TubeTrailMesh as __tubetrailmesh__
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.Material as __material__
import py4godot.classes.a as __a__
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.d as __d__
import py4godot.classes.ArrayMesh as __arraymesh__
import py4godot.classes.PointMesh as __pointmesh__
import py4godot.classes.Mesh as __mesh__
import py4godot.classes.BoxMesh as __boxmesh__
import py4godot.classes.TorusMesh as __torusmesh__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.ImmediateMesh as __immediatemesh__
import py4godot.classes.TextMesh as __textmesh__
import py4godot.classes.r as __r__
import py4godot.classes.PlaneMesh as __planemesh__
import py4godot.classes.PrimitiveMesh as __primitivemesh__
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.QuadMesh as __quadmesh__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__
import py4godot.classes.RibbonTrailMesh as __ribbontrailmesh__
import py4godot.classes.CapsuleMesh as __capsulemesh__
import py4godot.classes.A as __a__
import py4godot.classes.PlaceholderMesh as __placeholdermesh__



class ImporterMesh(__resource__.Resource):

  @staticmethod
  def constructor()->ImporterMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->ImporterMesh:pass


  def add_blend_shape(self, name:str)->None: pass

  def get_blend_shape_count(self)->int: pass

  def get_blend_shape_name(self, blend_shape_idx:int)->str: pass

  def set_blend_shape_mode(self, mode:int )->None: pass

  def get_blend_shape_mode(self)->int: pass

  def add_surface(self, primitive:int , arrays:__core__.Array, blend_shapes:__core__.Array=Array[Array]([]), lods:__core__.Dictionary= __core__.Dictionary.new0(), material:__material__.Material= __material__.Material.constructor(), name:str= __core__.String.new0(), flags:int=0)->None: pass

  def get_surface_count(self)->int: pass

  def get_surface_primitive_type(self, surface_idx:int)->int: pass

  def get_surface_name(self, surface_idx:int)->str: pass

  def get_surface_arrays(self, surface_idx:int)->__core__.Array: pass

  def get_surface_blend_shape_arrays(self, surface_idx:int, blend_shape_idx:int)->__core__.Array: pass

  def get_surface_lod_count(self, surface_idx:int)->int: pass

  def get_surface_lod_size(self, surface_idx:int, lod_idx:int)->float: pass

  def get_surface_lod_indices(self, surface_idx:int, lod_idx:int)->__core__.PackedInt32Array: pass

  def get_surface_material(self, surface_idx:int)->__particleprocessmaterial__.ParticleProcessMaterial|__placeholdermaterial__.PlaceholderMaterial|__proceduralskymaterial__.ProceduralSkyMaterial|__ormmaterial3d__.ORMMaterial3D|__shadermaterial__.ShaderMaterial|__panoramaskymaterial__.PanoramaSkyMaterial|__physicalskymaterial__.PhysicalSkyMaterial|__basematerial3d__.BaseMaterial3D|__standardmaterial3d__.StandardMaterial3D|__canvasitemmaterial__.CanvasItemMaterial|__fogmaterial__.FogMaterial|__material__.Material: pass

  def get_surface_format(self, surface_idx:int)->int: pass

  def set_surface_name(self, surface_idx:int, name:str)->None: pass

  def set_surface_material(self, surface_idx:int, material:__material__.Material)->None: pass

  def generate_lods(self, normal_merge_angle:float, normal_split_angle:float, bone_transform_array:__core__.Array)->None: pass

  def get_mesh(self, base_mesh:__arraymesh__.ArrayMesh= __arraymesh__.ArrayMesh.constructor())->__arraymesh__.ArrayMesh: pass

  def clear(self)->None: pass

  def set_lightmap_size_hint(self, size:__core__.Vector2i)->None: pass

  def get_lightmap_size_hint(self)->__core__.Vector2i: pass


