from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.CallbackTweener as __callbacktweener__
import py4godot.classes.PropertyTweener as __propertytweener__
import py4godot.classes.SubtweenTweener as __subtweentweener__
import py4godot.classes.Tween as __tween__
import py4godot.classes.Node as __node__
import py4godot.classes.IntervalTweener as __intervaltweener__
import py4godot.classes.Object as __object__
import py4godot.classes.MethodTweener as __methodtweener__


class TweenProcessMode:
  TWEEN_PROCESS_PHYSICS:int = 0
  TWEEN_PROCESS_IDLE:int = 1
class TweenPauseMode:
  TWEEN_PAUSE_BOUND:int = 0
  TWEEN_PAUSE_STOP:int = 1
  TWEEN_PAUSE_PROCESS:int = 2
class TransitionType:
  TRANS_LINEAR:int = 0
  TRANS_SINE:int = 1
  TRANS_QUINT:int = 2
  TRANS_QUART:int = 3
  TRANS_QUAD:int = 4
  TRANS_EXPO:int = 5
  TRANS_ELASTIC:int = 6
  TRANS_CUBIC:int = 7
  TRANS_CIRC:int = 8
  TRANS_BOUNCE:int = 9
  TRANS_BACK:int = 10
  TRANS_SPRING:int = 11
class EaseType:
  EASE_IN:int = 0
  EASE_OUT:int = 1
  EASE_IN_OUT:int = 2
  EASE_OUT_IN:int = 3


class Tween(__refcounted__.RefCounted):
  step_finished: BuiltinSignal
  loop_finished: BuiltinSignal
  finished: BuiltinSignal

  @staticmethod
  def constructor()->Tween:pass



  @staticmethod
  def cast(other:__object__.Object)->Tween:pass


  def tween_property(self, object:__object__.Object, property:__core__.NodePath|str, final_val:object, duration:float)->__propertytweener__.PropertyTweener: pass

  def tween_interval(self, time:float)->__intervaltweener__.IntervalTweener: pass

  def tween_callback(self, callback:__core__.Callable)->__callbacktweener__.CallbackTweener: pass

  def tween_method(self, method:__core__.Callable, from_:object, to:object, duration:float)->__methodtweener__.MethodTweener: pass

  def tween_subtween(self, subtween:__tween__.Tween)->__subtweentweener__.SubtweenTweener: pass

  def custom_step(self, delta:float)->bool: pass

  def stop(self)->None: pass

  def pause(self)->None: pass

  def play(self)->None: pass

  def kill(self)->None: pass

  def get_total_elapsed_time(self)->float: pass

  def is_running(self)->bool: pass

  def is_valid(self)->bool: pass

  def bind_node(self, node:__node__.Node)->__tween__.Tween: pass

  def set_process_mode(self, mode:int )->__tween__.Tween: pass

  def set_pause_mode(self, mode:int )->__tween__.Tween: pass

  def set_ignore_time_scale(self, ignore:bool=True)->__tween__.Tween: pass

  def set_parallel(self, parallel:bool=True)->__tween__.Tween: pass

  def set_loops(self, loops:int=0)->__tween__.Tween: pass

  def get_loops_left(self)->int: pass

  def set_speed_scale(self, speed:float)->__tween__.Tween: pass

  def set_trans(self, trans:int )->__tween__.Tween: pass

  def set_ease(self, ease:int )->__tween__.Tween: pass

  def parallel(self)->__tween__.Tween: pass

  def chain(self)->__tween__.Tween: pass

  @staticmethod
  def interpolate_value(initial_value:object, delta_value:object, elapsed_time:float, duration:float, trans_type:int , ease_type:int )->object: pass


