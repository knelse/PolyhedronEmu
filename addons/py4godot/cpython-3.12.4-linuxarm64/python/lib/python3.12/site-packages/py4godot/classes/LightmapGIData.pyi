from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PlaceholderTexture2DArray as __placeholdertexture2darray__
import py4godot.classes.Resource as __resource__
import py4godot.classes.x as __x__
import py4godot.classes.d as __d__
import py4godot.classes.TextureLayered as __texturelayered__
import py4godot.classes.PlaceholderCubemapArray as __placeholdercubemaparray__
import py4godot.classes.p as __p__
import py4godot.classes.y as __y__
import py4godot.classes.TextureCubemapArrayRD as __texturecubemaparrayrd__
import py4godot.classes.Cubemap as __cubemap__
import py4godot.classes.r as __r__
import py4godot.classes.T as __t__
import py4godot.classes.CubemapArray as __cubemaparray__
import py4godot.classes.CompressedCubemapArray as __compressedcubemaparray__
import py4godot.classes.TextureCubemapRD as __texturecubemaprd__
import py4godot.classes.e as __e__
import py4godot.classes.PlaceholderTextureLayered as __placeholdertexturelayered__
import py4godot.classes.Texture2DArrayRD as __texture2darrayrd__
import py4godot.classes.TextureLayeredRD as __texturelayeredrd__
import py4godot.classes.t as __t__
import py4godot.classes.ImageTextureLayered as __imagetexturelayered__
import py4godot.classes.PlaceholderCubemap as __placeholdercubemap__
import py4godot.classes.u as __u__
import py4godot.classes.L as __l__
import py4godot.classes.CompressedCubemap as __compressedcubemap__
import py4godot.classes.A as __a__
import py4godot.classes.Texture2DArray as __texture2darray__
import py4godot.classes.CompressedTextureLayered as __compressedtexturelayered__
import py4godot.classes.CompressedTexture2DArray as __compressedtexture2darray__
import py4godot.classes.a as __a__


class ShadowmaskMode:
  SHADOWMASK_MODE_NONE:int = 0
  SHADOWMASK_MODE_REPLACE:int = 1
  SHADOWMASK_MODE_OVERLAY:int = 2


class LightmapGIData(__resource__.Resource):

  @staticmethod
  def constructor()->LightmapGIData:pass



  @staticmethod
  def cast(other:__object__.Object)->LightmapGIData:pass


  @property
  def lightmap_textures(self)->typedarray::TextureLayered: pass
  @lightmap_textures.setter
  def lightmap_textures(self,  value:__core__.Array)->None: pass
  @property
  def shadowmask_textures(self)->typedarray::TextureLayered: pass
  @shadowmask_textures.setter
  def shadowmask_textures(self,  value:__core__.Array)->None: pass
  @property
  def uses_spherical_harmonics(self)->bool: pass
  @uses_spherical_harmonics.setter
  def uses_spherical_harmonics(self,  value:bool)->None: pass
  @property
  def user_data(self)->__core__.Array: pass
  @user_data.setter
  def user_data(self,  value:__core__.Array)->None: pass
  @property
  def probe_data(self)->__core__.Dictionary: pass
  @probe_data.setter
  def probe_data(self,  value:__core__.Dictionary)->None: pass
  @property
  def light_texture(self)->__placeholdertexture2darray__.PlaceholderTexture2DArray|__texturelayered__.TextureLayered|__placeholdercubemaparray__.PlaceholderCubemapArray|__texturecubemaparrayrd__.TextureCubemapArrayRD|__cubemap__.Cubemap|__cubemaparray__.CubemapArray|__compressedcubemaparray__.CompressedCubemapArray|__texturecubemaprd__.TextureCubemapRD|__placeholdertexturelayered__.PlaceholderTextureLayered|__texturelayeredrd__.TextureLayeredRD|__imagetexturelayered__.ImageTextureLayered|__placeholdercubemap__.PlaceholderCubemap|__compressedcubemap__.CompressedCubemap|__texture2darray__.Texture2DArray|__texture2darrayrd__.Texture2DArrayRD|__compressedtexturelayered__.CompressedTextureLayered|__compressedtexture2darray__.CompressedTexture2DArray: pass
  @light_texture.setter
  def light_texture(self,  value:__texturelayered__.TextureLayered)->None: pass
  @property
  def light_textures(self)->__core__.Array: pass
  @light_textures.setter
  def light_textures(self,  value:__core__.Array)->None: pass
  def set_lightmap_textures(self, light_textures:__core__.Array)->None: pass

  def get_lightmap_textures(self)->typedarray::TextureLayered: pass

  def set_shadowmask_textures(self, shadowmask_textures:__core__.Array)->None: pass

  def get_shadowmask_textures(self)->typedarray::TextureLayered: pass

  def set_uses_spherical_harmonics(self, uses_spherical_harmonics:bool)->None: pass

  def is_using_spherical_harmonics(self)->bool: pass

  def add_user(self, path:__core__.NodePath|str, uv_scale:__core__.Rect2, slice_index:int, sub_instance:int)->None: pass

  def get_user_count(self)->int: pass

  def get_user_path(self, user_idx:int)->__core__.NodePath: pass

  def clear_users(self)->None: pass

  def set_light_texture(self, light_texture:__texturelayered__.TextureLayered)->None: pass

  def get_light_texture(self)->__placeholdertexture2darray__.PlaceholderTexture2DArray|__texturelayered__.TextureLayered|__placeholdercubemaparray__.PlaceholderCubemapArray|__texturecubemaparrayrd__.TextureCubemapArrayRD|__cubemap__.Cubemap|__cubemaparray__.CubemapArray|__compressedcubemaparray__.CompressedCubemapArray|__texturecubemaprd__.TextureCubemapRD|__placeholdertexturelayered__.PlaceholderTextureLayered|__texturelayeredrd__.TextureLayeredRD|__imagetexturelayered__.ImageTextureLayered|__placeholdercubemap__.PlaceholderCubemap|__compressedcubemap__.CompressedCubemap|__texture2darray__.Texture2DArray|__texture2darrayrd__.Texture2DArrayRD|__compressedtexturelayered__.CompressedTextureLayered|__compressedtexture2darray__.CompressedTexture2DArray: pass


