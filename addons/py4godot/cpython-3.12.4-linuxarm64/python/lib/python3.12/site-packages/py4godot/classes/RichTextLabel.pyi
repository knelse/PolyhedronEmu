from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.RichTextEffect as __richtexteffect__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.Font as __font__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.TextServerExtension as __textserverextension__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.TextServerAdvanced as __textserveradvanced__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.Container as __container__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.Panel as __panel__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.Label as __label__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.Control as __control__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.GridContainer as __gridcontainer__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.Slider as __slider__
import py4godot.classes.Separator as __separator__
import py4godot.classes.Tree as __tree__
import py4godot.classes.Range as __range__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.TextServerDummy as __textserverdummy__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.Button as __button__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.BoxContainer as __boxcontainer__


class ListType:
  LIST_NUMBERS:int = 0
  LIST_LETTERS:int = 1
  LIST_ROMAN:int = 2
  LIST_DOTS:int = 3
class MenuItems:
  MENU_COPY:int = 0
  MENU_SELECT_ALL:int = 1
  MENU_MAX:int = 2
class MetaUnderline:
  META_UNDERLINE_NEVER:int = 0
  META_UNDERLINE_ALWAYS:int = 1
  META_UNDERLINE_ON_HOVER:int = 2
class ImageUpdateMask:
  UPDATE_TEXTURE:int = 1
  UPDATE_SIZE:int = 2
  UPDATE_COLOR:int = 4
  UPDATE_ALIGNMENT:int = 8
  UPDATE_REGION:int = 16
  UPDATE_PAD:int = 32
  UPDATE_TOOLTIP:int = 64
  UPDATE_WIDTH_IN_PERCENT:int = 128


class RichTextLabel(__control__.Control):
  meta_clicked: BuiltinSignal
  meta_hover_started: BuiltinSignal
  meta_hover_ended: BuiltinSignal
  finished: BuiltinSignal

  @staticmethod
  def constructor()->RichTextLabel:pass



  @staticmethod
  def cast(other:__object__.Object)->RichTextLabel:pass


  @property
  def bbcode_enabled(self)->bool: pass
  @bbcode_enabled.setter
  def bbcode_enabled(self,  value:bool)->None: pass
  @property
  def text(self)->str: pass
  @text.setter
  def text(self,  value:str)->None: pass
  @property
  def fit_content(self)->bool: pass
  @fit_content.setter
  def fit_content(self,  value:bool)->None: pass
  @property
  def scroll_active(self)->bool: pass
  @scroll_active.setter
  def scroll_active(self,  value:bool)->None: pass
  @property
  def scroll_following(self)->bool: pass
  @scroll_following.setter
  def scroll_following(self,  value:bool)->None: pass
  @property
  def autowrap_mode(self)->int: pass
  @autowrap_mode.setter
  def autowrap_mode(self,  value:int)->None: pass
  @property
  def tab_size(self)->int: pass
  @tab_size.setter
  def tab_size(self,  value:int)->None: pass
  @property
  def context_menu_enabled(self)->bool: pass
  @context_menu_enabled.setter
  def context_menu_enabled(self,  value:bool)->None: pass
  @property
  def shortcut_keys_enabled(self)->bool: pass
  @shortcut_keys_enabled.setter
  def shortcut_keys_enabled(self,  value:bool)->None: pass
  @property
  def horizontal_alignment(self)->int: pass
  @horizontal_alignment.setter
  def horizontal_alignment(self,  value:int)->None: pass
  @property
  def vertical_alignment(self)->int: pass
  @vertical_alignment.setter
  def vertical_alignment(self,  value:int)->None: pass
  @property
  def justification_flags(self)->int: pass
  @justification_flags.setter
  def justification_flags(self,  value:int)->None: pass
  @property
  def tab_stops(self)->__core__.PackedFloat32Array: pass
  @tab_stops.setter
  def tab_stops(self,  value:__core__.PackedFloat32Array)->None: pass
  @property
  def custom_effects(self)->typedarray::24/17:RichTextEffect: pass
  @custom_effects.setter
  def custom_effects(self,  value:__core__.Array)->None: pass
  @property
  def meta_underlined(self)->bool: pass
  @meta_underlined.setter
  def meta_underlined(self,  value:bool)->None: pass
  @property
  def hint_underlined(self)->bool: pass
  @hint_underlined.setter
  def hint_underlined(self,  value:bool)->None: pass
  @property
  def threaded(self)->bool: pass
  @threaded.setter
  def threaded(self,  value:bool)->None: pass
  @property
  def progress_bar_delay(self)->int: pass
  @progress_bar_delay.setter
  def progress_bar_delay(self,  value:int)->None: pass
  @property
  def selection_enabled(self)->bool: pass
  @selection_enabled.setter
  def selection_enabled(self,  value:bool)->None: pass
  @property
  def deselect_on_focus_loss_enabled(self)->bool: pass
  @deselect_on_focus_loss_enabled.setter
  def deselect_on_focus_loss_enabled(self,  value:bool)->None: pass
  @property
  def drag_and_drop_selection_enabled(self)->bool: pass
  @drag_and_drop_selection_enabled.setter
  def drag_and_drop_selection_enabled(self,  value:bool)->None: pass
  @property
  def visible_characters(self)->int: pass
  @visible_characters.setter
  def visible_characters(self,  value:int)->None: pass
  @property
  def visible_characters_behavior(self)->int: pass
  @visible_characters_behavior.setter
  def visible_characters_behavior(self,  value:int)->None: pass
  @property
  def visible_ratio(self)->float: pass
  @visible_ratio.setter
  def visible_ratio(self,  value:float)->None: pass
  @property
  def text_direction(self)->int: pass
  @text_direction.setter
  def text_direction(self,  value:int)->None: pass
  @property
  def language(self)->str: pass
  @language.setter
  def language(self,  value:str)->None: pass
  @property
  def structured_text_bidi_override(self)->int: pass
  @structured_text_bidi_override.setter
  def structured_text_bidi_override(self,  value:int)->None: pass
  @property
  def structured_text_bidi_override_options(self)->__core__.Array: pass
  @structured_text_bidi_override_options.setter
  def structured_text_bidi_override_options(self,  value:__core__.Array)->None: pass
  def get_parsed_text(self)->str: pass

  def add_text(self, text:str)->None: pass

  def set_text(self, text:str)->None: pass

  def add_image(self, image:__texture2d__.Texture2D, width:int=0, height:int=0, color:__core__.Color= __core__.Color.new0(), inline_align:int =5, region:__core__.Rect2= __core__.Rect2.new0(), key:object=None, pad:bool=False, tooltip:str= __core__.String.new0(), size_in_percent:bool=False)->None: pass

  def update_image(self, key:object, mask:int, image:__texture2d__.Texture2D, width:int=0, height:int=0, color:__core__.Color= __core__.Color.new0(), inline_align:int =5, region:__core__.Rect2= __core__.Rect2.new0(), pad:bool=False, tooltip:str= __core__.String.new0(), size_in_percent:bool=False)->None: pass

  def newline(self)->None: pass

  def remove_paragraph(self, paragraph:int, no_invalidate:bool=False)->bool: pass

  def invalidate_paragraph(self, paragraph:int)->bool: pass

  def push_font(self, font:__font__.Font, font_size:int=0)->None: pass

  def push_font_size(self, font_size:int)->None: pass

  def push_normal(self)->None: pass

  def push_bold(self)->None: pass

  def push_bold_italics(self)->None: pass

  def push_italics(self)->None: pass

  def push_mono(self)->None: pass

  def push_color(self, color:__core__.Color)->None: pass

  def push_outline_size(self, outline_size:int)->None: pass

  def push_outline_color(self, color:__core__.Color)->None: pass

  def push_paragraph(self, alignment:int , base_direction:int =0, language:str= __core__.String.new0(), st_parser:int =0, justification_flags:int=163, tab_stops:__core__.PackedFloat32Array= __core__.PackedFloat32Array.new0())->None: pass

  def push_indent(self, level:int)->None: pass

  def push_list(self, level:int, type:int , capitalize:bool, bullet:str= __core__.String.new0())->None: pass

  def push_meta(self, data:object, underline_mode:int =1, tooltip:str= __core__.String.new0())->None: pass

  def push_hint(self, description:str)->None: pass

  def push_language(self, language:str)->None: pass

  def push_underline(self)->None: pass

  def push_strikethrough(self)->None: pass

  def push_table(self, columns:int, inline_align:int =0, align_to_row:int=-1)->None: pass

  def push_dropcap(self, string:str, font:__font__.Font, size:int, dropcap_margins:__core__.Rect2= __core__.Rect2.new0(), color:__core__.Color= __core__.Color.new0(), outline_size:int=0, outline_color:__core__.Color= __core__.Color.new0())->None: pass

  def set_table_column_expand(self, column:int, expand:bool, ratio:int=1, shrink:bool=True)->None: pass

  def set_cell_row_background_color(self, odd_row_bg:__core__.Color, even_row_bg:__core__.Color)->None: pass

  def set_cell_border_color(self, color:__core__.Color)->None: pass

  def set_cell_size_override(self, min_size:__core__.Vector2, max_size:__core__.Vector2)->None: pass

  def set_cell_padding(self, padding:__core__.Rect2)->None: pass

  def push_cell(self)->None: pass

  def push_fgcolor(self, fgcolor:__core__.Color)->None: pass

  def push_bgcolor(self, bgcolor:__core__.Color)->None: pass

  def push_customfx(self, effect:__richtexteffect__.RichTextEffect, env:__core__.Dictionary)->None: pass

  def push_context(self)->None: pass

  def pop_context(self)->None: pass

  def pop(self)->None: pass

  def pop_all(self)->None: pass

  def clear(self)->None: pass

  def set_structured_text_bidi_override(self, parser:int )->None: pass

  def get_structured_text_bidi_override(self)->int: pass

  def set_structured_text_bidi_override_options(self, args:__core__.Array)->None: pass

  def get_structured_text_bidi_override_options(self)->__core__.Array: pass

  def set_text_direction(self, direction:int )->None: pass

  def get_text_direction(self)->int: pass

  def set_language(self, language:str)->None: pass

  def get_language(self)->str: pass

  def set_horizontal_alignment(self, alignment:int )->None: pass

  def get_horizontal_alignment(self)->int: pass

  def set_vertical_alignment(self, alignment:int )->None: pass

  def get_vertical_alignment(self)->int: pass

  def set_justification_flags(self, justification_flags:int)->None: pass

  def get_justification_flags(self)->int: pass

  def set_tab_stops(self, tab_stops:__core__.PackedFloat32Array)->None: pass

  def get_tab_stops(self)->__core__.PackedFloat32Array: pass

  def set_autowrap_mode(self, autowrap_mode:int )->None: pass

  def get_autowrap_mode(self)->int: pass

  def set_meta_underline(self, enable:bool)->None: pass

  def is_meta_underlined(self)->bool: pass

  def set_hint_underline(self, enable:bool)->None: pass

  def is_hint_underlined(self)->bool: pass

  def set_scroll_active(self, active:bool)->None: pass

  def is_scroll_active(self)->bool: pass

  def set_scroll_follow(self, follow:bool)->None: pass

  def is_scroll_following(self)->bool: pass

  def get_v_scroll_bar(self)->__vscrollbar__.VScrollBar: pass

  def scroll_to_line(self, line:int)->None: pass

  def scroll_to_paragraph(self, paragraph:int)->None: pass

  def scroll_to_selection(self)->None: pass

  def set_tab_size(self, spaces:int)->None: pass

  def get_tab_size(self)->int: pass

  def set_fit_content(self, enabled:bool)->None: pass

  def is_fit_content_enabled(self)->bool: pass

  def set_selection_enabled(self, enabled:bool)->None: pass

  def is_selection_enabled(self)->bool: pass

  def set_context_menu_enabled(self, enabled:bool)->None: pass

  def is_context_menu_enabled(self)->bool: pass

  def set_shortcut_keys_enabled(self, enabled:bool)->None: pass

  def is_shortcut_keys_enabled(self)->bool: pass

  def set_deselect_on_focus_loss_enabled(self, enable:bool)->None: pass

  def is_deselect_on_focus_loss_enabled(self)->bool: pass

  def set_drag_and_drop_selection_enabled(self, enable:bool)->None: pass

  def is_drag_and_drop_selection_enabled(self)->bool: pass

  def get_selection_from(self)->int: pass

  def get_selection_to(self)->int: pass

  def get_selection_line_offset(self)->float: pass

  def select_all(self)->None: pass

  def get_selected_text(self)->str: pass

  def deselect(self)->None: pass

  def parse_bbcode(self, bbcode:str)->None: pass

  def append_text(self, bbcode:str)->None: pass

  def get_text(self)->str: pass

  def is_ready(self)->bool: pass

  def is_finished(self)->bool: pass

  def set_threaded(self, threaded:bool)->None: pass

  def is_threaded(self)->bool: pass

  def set_progress_bar_delay(self, delay_ms:int)->None: pass

  def get_progress_bar_delay(self)->int: pass

  def set_visible_characters(self, amount:int)->None: pass

  def get_visible_characters(self)->int: pass

  def get_visible_characters_behavior(self)->int: pass

  def set_visible_characters_behavior(self, behavior:int )->None: pass

  def set_visible_ratio(self, ratio:float)->None: pass

  def get_visible_ratio(self)->float: pass

  def get_character_line(self, character:int)->int: pass

  def get_character_paragraph(self, character:int)->int: pass

  def get_total_character_count(self)->int: pass

  def set_use_bbcode(self, enable:bool)->None: pass

  def is_using_bbcode(self)->bool: pass

  def get_line_count(self)->int: pass

  def get_line_range(self, line:int)->__core__.Vector2i: pass

  def get_visible_line_count(self)->int: pass

  def get_paragraph_count(self)->int: pass

  def get_visible_paragraph_count(self)->int: pass

  def get_content_height(self)->int: pass

  def get_content_width(self)->int: pass

  def get_line_offset(self, line:int)->float: pass

  def get_paragraph_offset(self, paragraph:int)->float: pass

  def parse_expressions_for_values(self, expressions:__core__.PackedStringArray)->__core__.Dictionary: pass

  def set_effects(self, effects:__core__.Array)->None: pass

  def get_effects(self)->__core__.Array: pass

  def install_effect(self, effect:object)->None: pass

  def get_menu(self)->__popupmenu__.PopupMenu: pass

  def is_menu_visible(self)->bool: pass

  def menu_option(self, option:int)->None: pass


