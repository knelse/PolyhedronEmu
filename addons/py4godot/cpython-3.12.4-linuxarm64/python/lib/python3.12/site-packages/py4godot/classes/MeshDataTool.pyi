from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.RefCounted as __refcounted__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.ArrayMesh as __arraymesh__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.Material as __material__



class MeshDataTool(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->MeshDataTool:pass



  @staticmethod
  def cast(other:__object__.Object)->MeshDataTool:pass


  def clear(self)->None: pass

  def create_from_surface(self, mesh:__arraymesh__.ArrayMesh, surface:int)->int: pass

  def commit_to_surface(self, mesh:__arraymesh__.ArrayMesh, compression_flags:int=0)->int: pass

  def get_format(self)->int: pass

  def get_vertex_count(self)->int: pass

  def get_edge_count(self)->int: pass

  def get_face_count(self)->int: pass

  def set_vertex(self, idx:int, vertex:__core__.Vector3)->None: pass

  def get_vertex(self, idx:int)->__core__.Vector3: pass

  def set_vertex_normal(self, idx:int, normal:__core__.Vector3)->None: pass

  def get_vertex_normal(self, idx:int)->__core__.Vector3: pass

  def set_vertex_tangent(self, idx:int, tangent:__core__.Plane)->None: pass

  def get_vertex_tangent(self, idx:int)->__core__.Plane: pass

  def set_vertex_uv(self, idx:int, uv:__core__.Vector2)->None: pass

  def get_vertex_uv(self, idx:int)->__core__.Vector2: pass

  def set_vertex_uv2(self, idx:int, uv2:__core__.Vector2)->None: pass

  def get_vertex_uv2(self, idx:int)->__core__.Vector2: pass

  def set_vertex_color(self, idx:int, color:__core__.Color)->None: pass

  def get_vertex_color(self, idx:int)->__core__.Color: pass

  def set_vertex_bones(self, idx:int, bones:__core__.PackedInt32Array)->None: pass

  def get_vertex_bones(self, idx:int)->__core__.PackedInt32Array: pass

  def set_vertex_weights(self, idx:int, weights:__core__.PackedFloat32Array)->None: pass

  def get_vertex_weights(self, idx:int)->__core__.PackedFloat32Array: pass

  def set_vertex_meta(self, idx:int, meta:object)->None: pass

  def get_vertex_meta(self, idx:int)->object: pass

  def get_vertex_edges(self, idx:int)->__core__.PackedInt32Array: pass

  def get_vertex_faces(self, idx:int)->__core__.PackedInt32Array: pass

  def get_edge_vertex(self, idx:int, vertex:int)->int: pass

  def get_edge_faces(self, idx:int)->__core__.PackedInt32Array: pass

  def set_edge_meta(self, idx:int, meta:object)->None: pass

  def get_edge_meta(self, idx:int)->object: pass

  def get_face_vertex(self, idx:int, vertex:int)->int: pass

  def get_face_edge(self, idx:int, edge:int)->int: pass

  def set_face_meta(self, idx:int, meta:object)->None: pass

  def get_face_meta(self, idx:int)->object: pass

  def get_face_normal(self, idx:int)->__core__.Vector3: pass

  def set_material(self, material:__material__.Material)->None: pass

  def get_material(self)->__particleprocessmaterial__.ParticleProcessMaterial|__placeholdermaterial__.PlaceholderMaterial|__proceduralskymaterial__.ProceduralSkyMaterial|__ormmaterial3d__.ORMMaterial3D|__shadermaterial__.ShaderMaterial|__panoramaskymaterial__.PanoramaSkyMaterial|__physicalskymaterial__.PhysicalSkyMaterial|__basematerial3d__.BaseMaterial3D|__standardmaterial3d__.StandardMaterial3D|__canvasitemmaterial__.CanvasItemMaterial|__fogmaterial__.FogMaterial|__material__.Material: pass


