from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicsDirectBodyState2D as __physicsdirectbodystate2d__
import py4godot.classes.Object as __object__
import py4godot.classes.PhysicsServer2D as __physicsserver2d__
import py4godot.classes.PhysicsDirectSpaceState2DExtension as __physicsdirectspacestate2dextension__
import py4godot.classes.PhysicsTestMotionParameters2D as __physicstestmotionparameters2d__
import py4godot.classes.PhysicsDirectBodyState2DExtension as __physicsdirectbodystate2dextension__
import py4godot.classes.PhysicsTestMotionResult2D as __physicstestmotionresult2d__
import py4godot.classes.PhysicsDirectSpaceState2D as __physicsdirectspacestate2d__
import py4godot.classes.PhysicsServer2DExtension as __physicsserver2dextension__


class SpaceParameter:
  SPACE_PARAM_CONTACT_RECYCLE_RADIUS:int = 0
  SPACE_PARAM_CONTACT_MAX_SEPARATION:int = 1
  SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION:int = 2
  SPACE_PARAM_CONTACT_DEFAULT_BIAS:int = 3
  SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD:int = 4
  SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD:int = 5
  SPACE_PARAM_BODY_TIME_TO_SLEEP:int = 6
  SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS:int = 7
  SPACE_PARAM_SOLVER_ITERATIONS:int = 8
class ShapeType:
  SHAPE_WORLD_BOUNDARY:int = 0
  SHAPE_SEPARATION_RAY:int = 1
  SHAPE_SEGMENT:int = 2
  SHAPE_CIRCLE:int = 3
  SHAPE_RECTANGLE:int = 4
  SHAPE_CAPSULE:int = 5
  SHAPE_CONVEX_POLYGON:int = 6
  SHAPE_CONCAVE_POLYGON:int = 7
  SHAPE_CUSTOM:int = 8
class AreaParameter:
  AREA_PARAM_GRAVITY_OVERRIDE_MODE:int = 0
  AREA_PARAM_GRAVITY:int = 1
  AREA_PARAM_GRAVITY_VECTOR:int = 2
  AREA_PARAM_GRAVITY_IS_POINT:int = 3
  AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE:int = 4
  AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE:int = 5
  AREA_PARAM_LINEAR_DAMP:int = 6
  AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE:int = 7
  AREA_PARAM_ANGULAR_DAMP:int = 8
  AREA_PARAM_PRIORITY:int = 9
class AreaSpaceOverrideMode:
  AREA_SPACE_OVERRIDE_DISABLED:int = 0
  AREA_SPACE_OVERRIDE_COMBINE:int = 1
  AREA_SPACE_OVERRIDE_COMBINE_REPLACE:int = 2
  AREA_SPACE_OVERRIDE_REPLACE:int = 3
  AREA_SPACE_OVERRIDE_REPLACE_COMBINE:int = 4
class BodyMode:
  BODY_MODE_STATIC:int = 0
  BODY_MODE_KINEMATIC:int = 1
  BODY_MODE_RIGID:int = 2
  BODY_MODE_RIGID_LINEAR:int = 3
class BodyParameter:
  BODY_PARAM_BOUNCE:int = 0
  BODY_PARAM_FRICTION:int = 1
  BODY_PARAM_MASS:int = 2
  BODY_PARAM_INERTIA:int = 3
  BODY_PARAM_CENTER_OF_MASS:int = 4
  BODY_PARAM_GRAVITY_SCALE:int = 5
  BODY_PARAM_LINEAR_DAMP_MODE:int = 6
  BODY_PARAM_ANGULAR_DAMP_MODE:int = 7
  BODY_PARAM_LINEAR_DAMP:int = 8
  BODY_PARAM_ANGULAR_DAMP:int = 9
  BODY_PARAM_MAX:int = 10
class BodyDampMode:
  BODY_DAMP_MODE_COMBINE:int = 0
  BODY_DAMP_MODE_REPLACE:int = 1
class BodyState:
  BODY_STATE_TRANSFORM:int = 0
  BODY_STATE_LINEAR_VELOCITY:int = 1
  BODY_STATE_ANGULAR_VELOCITY:int = 2
  BODY_STATE_SLEEPING:int = 3
  BODY_STATE_CAN_SLEEP:int = 4
class JointType:
  JOINT_KIND_PIN:int = 0
  JOINT_KIND_GROOVE:int = 1
  JOINT_KIND_DAMPED_SPRING:int = 2
  JOINT_KIND_MAX:int = 3
class JointParam:
  JOINT_PARAM_BIAS:int = 0
  JOINT_PARAM_MAX_BIAS:int = 1
  JOINT_PARAM_MAX_FORCE:int = 2
class PinJointParam:
  PIN_JOINT_SOFTNESS:int = 0
  PIN_JOINT_LIMIT_UPPER:int = 1
  PIN_JOINT_LIMIT_LOWER:int = 2
  PIN_JOINT_MOTOR_TARGET_VELOCITY:int = 3
class PinJointFlag:
  PIN_JOINT_FLAG_ANGULAR_LIMIT_ENABLED:int = 0
  PIN_JOINT_FLAG_MOTOR_ENABLED:int = 1
class DampedSpringParam:
  DAMPED_SPRING_REST_LENGTH:int = 0
  DAMPED_SPRING_STIFFNESS:int = 1
  DAMPED_SPRING_DAMPING:int = 2
class CCDMode:
  CCD_MODE_DISABLED:int = 0
  CCD_MODE_CAST_RAY:int = 1
  CCD_MODE_CAST_SHAPE:int = 2
class AreaBodyStatus:
  AREA_BODY_ADDED:int = 0
  AREA_BODY_REMOVED:int = 1
class ProcessInfo:
  INFO_ACTIVE_OBJECTS:int = 0
  INFO_COLLISION_PAIRS:int = 1
  INFO_ISLAND_COUNT:int = 2


class PhysicsServer2D(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->PhysicsServer2D:pass

  @staticmethod
  def instance()->PhysicsServer2D:pass

  def world_boundary_shape_create(self)->__core__.RID: pass

  def separation_ray_shape_create(self)->__core__.RID: pass

  def segment_shape_create(self)->__core__.RID: pass

  def circle_shape_create(self)->__core__.RID: pass

  def rectangle_shape_create(self)->__core__.RID: pass

  def capsule_shape_create(self)->__core__.RID: pass

  def convex_polygon_shape_create(self)->__core__.RID: pass

  def concave_polygon_shape_create(self)->__core__.RID: pass

  def shape_set_data(self, shape:__core__.RID, data:object)->None: pass

  def shape_get_type(self, shape:__core__.RID)->int: pass

  def shape_get_data(self, shape:__core__.RID)->object: pass

  def space_create(self)->__core__.RID: pass

  def space_set_active(self, space:__core__.RID, active:bool)->None: pass

  def space_is_active(self, space:__core__.RID)->bool: pass

  def space_set_param(self, space:__core__.RID, param:int , value:float)->None: pass

  def space_get_param(self, space:__core__.RID, param:int )->float: pass

  def space_get_direct_state(self, space:__core__.RID)->__physicsdirectspacestate2d__.PhysicsDirectSpaceState2D|__physicsdirectspacestate2dextension__.PhysicsDirectSpaceState2DExtension: pass

  def area_create(self)->__core__.RID: pass

  def area_set_space(self, area:__core__.RID, space:__core__.RID)->None: pass

  def area_get_space(self, area:__core__.RID)->__core__.RID: pass

  def area_add_shape(self, area:__core__.RID, shape:__core__.RID, transform:__core__.Transform2D= __core__.Transform2D.new0(), disabled:bool=False)->None: pass

  def area_set_shape(self, area:__core__.RID, shape_idx:int, shape:__core__.RID)->None: pass

  def area_set_shape_transform(self, area:__core__.RID, shape_idx:int, transform:__core__.Transform2D)->None: pass

  def area_set_shape_disabled(self, area:__core__.RID, shape_idx:int, disabled:bool)->None: pass

  def area_get_shape_count(self, area:__core__.RID)->int: pass

  def area_get_shape(self, area:__core__.RID, shape_idx:int)->__core__.RID: pass

  def area_get_shape_transform(self, area:__core__.RID, shape_idx:int)->__core__.Transform2D: pass

  def area_remove_shape(self, area:__core__.RID, shape_idx:int)->None: pass

  def area_clear_shapes(self, area:__core__.RID)->None: pass

  def area_set_collision_layer(self, area:__core__.RID, layer:int)->None: pass

  def area_get_collision_layer(self, area:__core__.RID)->int: pass

  def area_set_collision_mask(self, area:__core__.RID, mask:int)->None: pass

  def area_get_collision_mask(self, area:__core__.RID)->int: pass

  def area_set_param(self, area:__core__.RID, param:int , value:object)->None: pass

  def area_set_transform(self, area:__core__.RID, transform:__core__.Transform2D)->None: pass

  def area_get_param(self, area:__core__.RID, param:int )->object: pass

  def area_get_transform(self, area:__core__.RID)->__core__.Transform2D: pass

  def area_attach_object_instance_id(self, area:__core__.RID, id:int)->None: pass

  def area_get_object_instance_id(self, area:__core__.RID)->int: pass

  def area_attach_canvas_instance_id(self, area:__core__.RID, id:int)->None: pass

  def area_get_canvas_instance_id(self, area:__core__.RID)->int: pass

  def area_set_monitor_callback(self, area:__core__.RID, callback:__core__.Callable)->None: pass

  def area_set_area_monitor_callback(self, area:__core__.RID, callback:__core__.Callable)->None: pass

  def area_set_monitorable(self, area:__core__.RID, monitorable:bool)->None: pass

  def body_create(self)->__core__.RID: pass

  def body_set_space(self, body:__core__.RID, space:__core__.RID)->None: pass

  def body_get_space(self, body:__core__.RID)->__core__.RID: pass

  def body_set_mode(self, body:__core__.RID, mode:int )->None: pass

  def body_get_mode(self, body:__core__.RID)->int: pass

  def body_add_shape(self, body:__core__.RID, shape:__core__.RID, transform:__core__.Transform2D= __core__.Transform2D.new0(), disabled:bool=False)->None: pass

  def body_set_shape(self, body:__core__.RID, shape_idx:int, shape:__core__.RID)->None: pass

  def body_set_shape_transform(self, body:__core__.RID, shape_idx:int, transform:__core__.Transform2D)->None: pass

  def body_get_shape_count(self, body:__core__.RID)->int: pass

  def body_get_shape(self, body:__core__.RID, shape_idx:int)->__core__.RID: pass

  def body_get_shape_transform(self, body:__core__.RID, shape_idx:int)->__core__.Transform2D: pass

  def body_remove_shape(self, body:__core__.RID, shape_idx:int)->None: pass

  def body_clear_shapes(self, body:__core__.RID)->None: pass

  def body_set_shape_disabled(self, body:__core__.RID, shape_idx:int, disabled:bool)->None: pass

  def body_set_shape_as_one_way_collision(self, body:__core__.RID, shape_idx:int, enable:bool, margin:float)->None: pass

  def body_attach_object_instance_id(self, body:__core__.RID, id:int)->None: pass

  def body_get_object_instance_id(self, body:__core__.RID)->int: pass

  def body_attach_canvas_instance_id(self, body:__core__.RID, id:int)->None: pass

  def body_get_canvas_instance_id(self, body:__core__.RID)->int: pass

  def body_set_continuous_collision_detection_mode(self, body:__core__.RID, mode:int )->None: pass

  def body_get_continuous_collision_detection_mode(self, body:__core__.RID)->int: pass

  def body_set_collision_layer(self, body:__core__.RID, layer:int)->None: pass

  def body_get_collision_layer(self, body:__core__.RID)->int: pass

  def body_set_collision_mask(self, body:__core__.RID, mask:int)->None: pass

  def body_get_collision_mask(self, body:__core__.RID)->int: pass

  def body_set_collision_priority(self, body:__core__.RID, priority:float)->None: pass

  def body_get_collision_priority(self, body:__core__.RID)->float: pass

  def body_set_param(self, body:__core__.RID, param:int , value:object)->None: pass

  def body_get_param(self, body:__core__.RID, param:int )->object: pass

  def body_reset_mass_properties(self, body:__core__.RID)->None: pass

  def body_set_state(self, body:__core__.RID, state:int , value:object)->None: pass

  def body_get_state(self, body:__core__.RID, state:int )->object: pass

  def body_apply_central_impulse(self, body:__core__.RID, impulse:__core__.Vector2)->None: pass

  def body_apply_torque_impulse(self, body:__core__.RID, impulse:float)->None: pass

  def body_apply_impulse(self, body:__core__.RID, impulse:__core__.Vector2, position:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def body_apply_central_force(self, body:__core__.RID, force:__core__.Vector2)->None: pass

  def body_apply_force(self, body:__core__.RID, force:__core__.Vector2, position:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def body_apply_torque(self, body:__core__.RID, torque:float)->None: pass

  def body_add_constant_central_force(self, body:__core__.RID, force:__core__.Vector2)->None: pass

  def body_add_constant_force(self, body:__core__.RID, force:__core__.Vector2, position:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def body_add_constant_torque(self, body:__core__.RID, torque:float)->None: pass

  def body_set_constant_force(self, body:__core__.RID, force:__core__.Vector2)->None: pass

  def body_get_constant_force(self, body:__core__.RID)->__core__.Vector2: pass

  def body_set_constant_torque(self, body:__core__.RID, torque:float)->None: pass

  def body_get_constant_torque(self, body:__core__.RID)->float: pass

  def body_set_axis_velocity(self, body:__core__.RID, axis_velocity:__core__.Vector2)->None: pass

  def body_add_collision_exception(self, body:__core__.RID, excepted_body:__core__.RID)->None: pass

  def body_remove_collision_exception(self, body:__core__.RID, excepted_body:__core__.RID)->None: pass

  def body_set_max_contacts_reported(self, body:__core__.RID, amount:int)->None: pass

  def body_get_max_contacts_reported(self, body:__core__.RID)->int: pass

  def body_set_omit_force_integration(self, body:__core__.RID, enable:bool)->None: pass

  def body_is_omitting_force_integration(self, body:__core__.RID)->bool: pass

  def body_set_state_sync_callback(self, body:__core__.RID, callable:__core__.Callable)->None: pass

  def body_set_force_integration_callback(self, body:__core__.RID, callable:__core__.Callable, userdata:object=None)->None: pass

  def body_test_motion(self, body:__core__.RID, parameters:__physicstestmotionparameters2d__.PhysicsTestMotionParameters2D, result:__physicstestmotionresult2d__.PhysicsTestMotionResult2D= __physicstestmotionresult2d__.PhysicsTestMotionResult2D.constructor())->bool: pass

  def body_get_direct_state(self, body:__core__.RID)->__physicsdirectbodystate2d__.PhysicsDirectBodyState2D|__physicsdirectbodystate2dextension__.PhysicsDirectBodyState2DExtension: pass

  def joint_create(self)->__core__.RID: pass

  def joint_clear(self, joint:__core__.RID)->None: pass

  def joint_set_param(self, joint:__core__.RID, param:int , value:float)->None: pass

  def joint_get_param(self, joint:__core__.RID, param:int )->float: pass

  def joint_disable_collisions_between_bodies(self, joint:__core__.RID, disable:bool)->None: pass

  def joint_is_disabled_collisions_between_bodies(self, joint:__core__.RID)->bool: pass

  def joint_make_pin(self, joint:__core__.RID, anchor:__core__.Vector2, body_a:__core__.RID, body_b:__core__.RID= __core__.RID.new0())->None: pass

  def joint_make_groove(self, joint:__core__.RID, groove1_a:__core__.Vector2, groove2_a:__core__.Vector2, anchor_b:__core__.Vector2, body_a:__core__.RID= __core__.RID.new0(), body_b:__core__.RID= __core__.RID.new0())->None: pass

  def joint_make_damped_spring(self, joint:__core__.RID, anchor_a:__core__.Vector2, anchor_b:__core__.Vector2, body_a:__core__.RID, body_b:__core__.RID= __core__.RID.new0())->None: pass

  def pin_joint_set_flag(self, joint:__core__.RID, flag:int , enabled:bool)->None: pass

  def pin_joint_get_flag(self, joint:__core__.RID, flag:int )->bool: pass

  def pin_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None: pass

  def pin_joint_get_param(self, joint:__core__.RID, param:int )->float: pass

  def damped_spring_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None: pass

  def damped_spring_joint_get_param(self, joint:__core__.RID, param:int )->float: pass

  def joint_get_type(self, joint:__core__.RID)->int: pass

  def free_rid(self, rid:__core__.RID)->None: pass

  def set_active(self, active:bool)->None: pass

  def get_process_info(self, process_info:int )->int: pass


