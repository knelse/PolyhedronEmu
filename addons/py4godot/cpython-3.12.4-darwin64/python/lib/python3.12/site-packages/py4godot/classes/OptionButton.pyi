from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CameraTexture as __cameratexture__
import py4godot.classes.GradientTexture2D as __gradienttexture2d__
import py4godot.classes.Texture2DRD as __texture2drd__
import py4godot.classes.CurveXYZTexture as __curvexyztexture__
import py4godot.classes.CurveTexture as __curvetexture__
import py4godot.classes.AtlasTexture as __atlastexture__
import py4godot.classes.CanvasTexture as __canvastexture__
import py4godot.classes.Button as __button__
import py4godot.classes.ViewportTexture as __viewporttexture__
import py4godot.classes.ExternalTexture as __externaltexture__
import py4godot.classes.PlaceholderTexture2D as __placeholdertexture2d__
import py4godot.classes.MeshTexture as __meshtexture__
import py4godot.classes.CompressedTexture2D as __compressedtexture2d__
import py4godot.classes.PopupMenu as __popupmenu__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.ImageTexture as __imagetexture__
import py4godot.classes.AnimatedTexture as __animatedtexture__
import py4godot.classes.GradientTexture1D as __gradienttexture1d__
import py4godot.classes.NoiseTexture2D as __noisetexture2d__
import py4godot.classes.PortableCompressedTexture2D as __portablecompressedtexture2d__



class OptionButton(__button__.Button):
  item_selected: BuiltinSignal
  item_focused: BuiltinSignal

  @staticmethod
  def constructor()->OptionButton:pass



  @staticmethod
  def cast(other:__object__.Object)->OptionButton:pass


  @property
  def selected(self)->int: pass
  @selected.setter
  def selected(self,  value:int)->None: pass
  @property
  def fit_to_longest_item(self)->bool: pass
  @fit_to_longest_item.setter
  def fit_to_longest_item(self,  value:bool)->None: pass
  @property
  def allow_reselect(self)->bool: pass
  @allow_reselect.setter
  def allow_reselect(self,  value:bool)->None: pass
  @property
  def item_count(self)->int: pass
  @item_count.setter
  def item_count(self,  value:int)->None: pass
  def add_item(self, label:str, id:int=-1)->None: pass

  def add_icon_item(self, texture:__texture2d__.Texture2D, label:str, id:int=-1)->None: pass

  def set_item_text(self, idx:int, text:str)->None: pass

  def set_item_icon(self, idx:int, texture:__texture2d__.Texture2D)->None: pass

  def set_item_disabled(self, idx:int, disabled:bool)->None: pass

  def set_item_id(self, idx:int, id:int)->None: pass

  def set_item_metadata(self, idx:int, metadata:object)->None: pass

  def set_item_tooltip(self, idx:int, tooltip:str)->None: pass

  def get_item_text(self, idx:int)->str: pass

  def get_item_icon(self, idx:int)->__cameratexture__.CameraTexture|__gradienttexture2d__.GradientTexture2D|__texture2drd__.Texture2DRD|__curvexyztexture__.CurveXYZTexture|__curvetexture__.CurveTexture|__atlastexture__.AtlasTexture|__canvastexture__.CanvasTexture|__viewporttexture__.ViewportTexture|__externaltexture__.ExternalTexture|__placeholdertexture2d__.PlaceholderTexture2D|__meshtexture__.MeshTexture|__compressedtexture2d__.CompressedTexture2D|__texture2d__.Texture2D|__imagetexture__.ImageTexture|__animatedtexture__.AnimatedTexture|__gradienttexture1d__.GradientTexture1D|__noisetexture2d__.NoiseTexture2D|__portablecompressedtexture2d__.PortableCompressedTexture2D: pass

  def get_item_id(self, idx:int)->int: pass

  def get_item_index(self, id:int)->int: pass

  def get_item_metadata(self, idx:int)->object: pass

  def get_item_tooltip(self, idx:int)->str: pass

  def is_item_disabled(self, idx:int)->bool: pass

  def is_item_separator(self, idx:int)->bool: pass

  def add_separator(self, text:str= __core__.String.new0())->None: pass

  def clear(self)->None: pass

  def select(self, idx:int)->None: pass

  def get_selected(self)->int: pass

  def get_selected_id(self)->int: pass

  def get_selected_metadata(self)->object: pass

  def remove_item(self, idx:int)->None: pass

  def get_popup(self)->__popupmenu__.PopupMenu: pass

  def show_popup(self)->None: pass

  def set_item_count(self, count:int)->None: pass

  def get_item_count(self)->int: pass

  def has_selectable_items(self)->bool: pass

  def get_selectable_item(self, from_last:bool=False)->int: pass

  def set_fit_to_longest_item(self, fit:bool)->None: pass

  def is_fit_to_longest_item(self)->bool: pass

  def set_allow_reselect(self, allow:bool)->None: pass

  def get_allow_reselect(self)->bool: pass

  def set_disable_shortcuts(self, disabled:bool)->None: pass


