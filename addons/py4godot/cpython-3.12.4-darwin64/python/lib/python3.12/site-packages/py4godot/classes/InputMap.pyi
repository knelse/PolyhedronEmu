from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.d as __d__
import py4godot.classes.I as __i__
import py4godot.classes.g as __g__
import py4godot.classes.Object as __object__
import py4godot.classes.E as __e__
import py4godot.classes.S as __s__
import py4godot.classes.n as __n__
import py4godot.classes.y as __y__
import py4godot.classes.t as __t__
import py4godot.classes.N as __n__
import py4godot.classes.A as __a__
import py4godot.classes.r as __r__
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.m as __m__
import py4godot.classes.e as __e__
import py4godot.classes.p as __p__
import py4godot.classes.u as __u__
import py4godot.classes.i as __i__
import py4godot.classes.a as __a__
import py4godot.classes.T as __t__
import py4godot.classes.v as __v__



class InputMap(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->InputMap:pass

  @staticmethod
  def instance()->InputMap:pass

  def has_action(self, action:__core__.StringName|str)->bool: pass

  def get_actions(self)->typedarray::StringName: pass

  def add_action(self, action:__core__.StringName|str, deadzone:float=0.2)->None: pass

  def erase_action(self, action:__core__.StringName|str)->None: pass

  def action_set_deadzone(self, action:__core__.StringName|str, deadzone:float)->None: pass

  def action_get_deadzone(self, action:__core__.StringName|str)->float: pass

  def action_add_event(self, action:__core__.StringName|str, event:__inputevent__.InputEvent)->None: pass

  def action_has_event(self, action:__core__.StringName|str, event:__inputevent__.InputEvent)->bool: pass

  def action_erase_event(self, action:__core__.StringName|str, event:__inputevent__.InputEvent)->None: pass

  def action_erase_events(self, action:__core__.StringName|str)->None: pass

  def action_get_events(self, action:__core__.StringName|str)->typedarray::InputEvent: pass

  def event_is_action(self, event:__inputevent__.InputEvent, action:__core__.StringName|str, exact_match:bool=False)->bool: pass

  def load_from_project_settings(self)->None: pass


