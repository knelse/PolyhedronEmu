from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.e as __e__
import py4godot.classes.d as __d__
import py4godot.classes.i as __i__
import py4godot.classes.c as __c__
import py4godot.classes.o as __o__
import py4godot.classes.a as __a__
import py4godot.classes.Object as __object__
import py4godot.classes.p as __p__
import py4godot.classes.IP as __ip__
import py4godot.classes.n as __n__
import py4godot.classes.y as __y__
import py4godot.classes.t as __t__
import py4godot.classes.A as __a__
import py4godot.classes.T as __t__
import py4godot.classes.r as __r__
import py4godot.classes.D as __d__


class ResolverStatus:
  RESOLVER_STATUS_NONE:int = 0
  RESOLVER_STATUS_WAITING:int = 1
  RESOLVER_STATUS_DONE:int = 2
  RESOLVER_STATUS_ERROR:int = 3
class Type:
  KIND_NONE:int = 0
  KIND_IPV4:int = 1
  KIND_IPV6:int = 2
  KIND_ANY:int = 3


class IP(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->IP:pass

  @staticmethod
  def instance()->IP:pass

  def resolve_hostname(self, host:str, ip_type:int =3)->str: pass

  def resolve_hostname_addresses(self, host:str, ip_type:int =3)->__core__.PackedStringArray: pass

  def resolve_hostname_queue_item(self, host:str, ip_type:int =3)->int: pass

  def get_resolve_item_status(self, id:int)->int: pass

  def get_resolve_item_address(self, id:int)->str: pass

  def get_resolve_item_addresses(self, id:int)->__core__.Array: pass

  def erase_resolve_item(self, id:int)->None: pass

  def get_local_addresses(self)->__core__.PackedStringArray: pass

  def get_local_interfaces(self)->typedarray::Dictionary: pass

  def clear_cache(self, hostname:str= __core__.String.new0())->None: pass


