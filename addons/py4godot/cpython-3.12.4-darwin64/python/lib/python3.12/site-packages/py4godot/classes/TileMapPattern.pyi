from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.e as __e__
import py4godot.classes.d as __d__
import py4godot.classes.Resource as __resource__
import py4godot.classes.2 as __2__
import py4godot.classes.i as __i__
import py4godot.classes.c as __c__
import py4godot.classes.V as __v__
import py4godot.classes.o as __o__
import py4godot.classes.a as __a__
import py4godot.classes.p as __p__
import py4godot.classes.y as __y__
import py4godot.classes.t as __t__
import py4godot.classes.A as __a__
import py4godot.classes.T as __t__
import py4godot.classes.r as __r__



class TileMapPattern(__resource__.Resource):

  @staticmethod
  def constructor()->TileMapPattern:pass



  @staticmethod
  def cast(other:__object__.Object)->TileMapPattern:pass


  def set_cell(self, coords:__core__.Vector2i, source_id:int=-1, atlas_coords:__core__.Vector2i= __core__.Vector2i.new0(), alternative_tile:int=-1)->None: pass

  def has_cell(self, coords:__core__.Vector2i)->bool: pass

  def remove_cell(self, coords:__core__.Vector2i, update_size:bool)->None: pass

  def get_cell_source_id(self, coords:__core__.Vector2i)->int: pass

  def get_cell_atlas_coords(self, coords:__core__.Vector2i)->__core__.Vector2i: pass

  def get_cell_alternative_tile(self, coords:__core__.Vector2i)->int: pass

  def get_used_cells(self)->typedarray::Vector2i: pass

  def get_size(self)->__core__.Vector2i: pass

  def set_size(self, size:__core__.Vector2i)->None: pass

  def is_empty(self)->bool: pass


