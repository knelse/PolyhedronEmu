from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationNodeBlend3 as __animationnodeblend3__
import py4godot.classes.AnimationNodeExtension as __animationnodeextension__
import py4godot.classes.AnimationNodeTimeSeek as __animationnodetimeseek__
import py4godot.classes.AnimationNodeAnimation as __animationnodeanimation__
import py4godot.classes.AnimationNodeAdd2 as __animationnodeadd2__
import py4godot.classes.AnimationNodeBlendSpace2D as __animationnodeblendspace2d__
import py4godot.classes.AnimationNode as __animationnode__
import py4godot.classes.AnimationNodeTransition as __animationnodetransition__
import py4godot.classes.AnimationNodeStateMachine as __animationnodestatemachine__
import py4godot.classes.AnimationRootNode as __animationrootnode__
import py4godot.classes.AnimationNodeBlend2 as __animationnodeblend2__
import py4godot.classes.AnimationNodeOneShot as __animationnodeoneshot__
import py4godot.classes.AnimationNodeOutput as __animationnodeoutput__
import py4godot.classes.AnimationNodeBlendSpace1D as __animationnodeblendspace1d__
import py4godot.classes.AnimationNodeAdd3 as __animationnodeadd3__
import py4godot.classes.AnimationNodeTimeScale as __animationnodetimescale__
import py4godot.classes.AnimationNodeSync as __animationnodesync__
import py4godot.classes.AnimationNodeBlendTree as __animationnodeblendtree__
import py4godot.classes.AnimationNodeSub2 as __animationnodesub2__



class AnimationNodeBlendTree(__animationrootnode__.AnimationRootNode):
  node_changed: BuiltinSignal

  @staticmethod
  def constructor()->AnimationNodeBlendTree:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNodeBlendTree:pass


  @property
  def graph_offset(self)->__core__.Vector2: pass
  @graph_offset.setter
  def graph_offset(self,  value:__core__.Vector2)->None: pass
  def add_node(self, name:__core__.StringName|str, node:__animationnode__.AnimationNode, position:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def get_node(self, name:__core__.StringName|str)->__animationnodeblend3__.AnimationNodeBlend3|__animationnodeextension__.AnimationNodeExtension|__animationnodetimeseek__.AnimationNodeTimeSeek|__animationnodeanimation__.AnimationNodeAnimation|__animationnodeadd2__.AnimationNodeAdd2|__animationnodeblendspace2d__.AnimationNodeBlendSpace2D|__animationnode__.AnimationNode|__animationnodetransition__.AnimationNodeTransition|__animationnodestatemachine__.AnimationNodeStateMachine|__animationrootnode__.AnimationRootNode|__animationnodeblend2__.AnimationNodeBlend2|__animationnodeoneshot__.AnimationNodeOneShot|__animationnodeoutput__.AnimationNodeOutput|__animationnodeblendspace1d__.AnimationNodeBlendSpace1D|__animationnodeadd3__.AnimationNodeAdd3|__animationnodetimescale__.AnimationNodeTimeScale|__animationnodesync__.AnimationNodeSync|__animationnodeblendtree__.AnimationNodeBlendTree|__animationnodesub2__.AnimationNodeSub2: pass

  def remove_node(self, name:__core__.StringName|str)->None: pass

  def rename_node(self, name:__core__.StringName|str, new_name:__core__.StringName|str)->None: pass

  def has_node(self, name:__core__.StringName|str)->bool: pass

  def connect_node(self, input_node:__core__.StringName|str, input_index:int, output_node:__core__.StringName|str)->None: pass

  def disconnect_node(self, input_node:__core__.StringName|str, input_index:int)->None: pass

  def set_node_position(self, name:__core__.StringName|str, position:__core__.Vector2)->None: pass

  def get_node_position(self, name:__core__.StringName|str)->__core__.Vector2: pass

  def set_graph_offset(self, offset:__core__.Vector2)->None: pass

  def get_graph_offset(self)->__core__.Vector2: pass


