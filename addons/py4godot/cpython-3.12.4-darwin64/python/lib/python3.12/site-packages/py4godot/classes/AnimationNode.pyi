from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationNodeBlend3 as __animationnodeblend3__
import py4godot.classes.AnimationNodeExtension as __animationnodeextension__
import py4godot.classes.AnimationNodeTimeSeek as __animationnodetimeseek__
import py4godot.classes.AnimationNodeAnimation as __animationnodeanimation__
import py4godot.classes.AnimationNodeAdd2 as __animationnodeadd2__
import py4godot.classes.AnimationNodeBlendSpace2D as __animationnodeblendspace2d__
import py4godot.classes.AnimationNode as __animationnode__
import py4godot.classes.AnimationNodeTransition as __animationnodetransition__
import py4godot.classes.AnimationNodeStateMachine as __animationnodestatemachine__
import py4godot.classes.AnimationRootNode as __animationrootnode__
import py4godot.classes.AnimationNodeBlend2 as __animationnodeblend2__
import py4godot.classes.Resource as __resource__
import py4godot.classes.AnimationNodeOneShot as __animationnodeoneshot__
import py4godot.classes.AnimationNodeOutput as __animationnodeoutput__
import py4godot.classes.AnimationNodeBlendSpace1D as __animationnodeblendspace1d__
import py4godot.classes.Animation as __animation__
import py4godot.classes.AnimationNodeAdd3 as __animationnodeadd3__
import py4godot.classes.AnimationNodeTimeScale as __animationnodetimescale__
import py4godot.classes.AnimationNodeSync as __animationnodesync__
import py4godot.classes.AnimationNodeBlendTree as __animationnodeblendtree__
import py4godot.classes.AnimationNodeSub2 as __animationnodesub2__


class FilterAction:
  FILTER_IGNORE:int = 0
  FILTER_PASS:int = 1
  FILTER_STOP:int = 2
  FILTER_BLEND:int = 3


class AnimationNode(__resource__.Resource):
  tree_changed: BuiltinSignal
  animation_node_renamed: BuiltinSignal
  animation_node_removed: BuiltinSignal

  @staticmethod
  def constructor()->AnimationNode:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNode:pass


  @property
  def filter_enabled(self)->bool: pass
  @filter_enabled.setter
  def filter_enabled(self,  value:bool)->None: pass
  @property
  def filters(self)->__core__.Array: pass
  @filters.setter
  def filters(self,  value:__core__.Array)->None: pass
  def _get_child_nodes(self)->__core__.Dictionary: pass

  def _get_parameter_list(self)->__core__.Array: pass

  def _get_child_by_name(self, name:__core__.StringName|str)->__animationnodeblend3__.AnimationNodeBlend3|__animationnodeextension__.AnimationNodeExtension|__animationnodetimeseek__.AnimationNodeTimeSeek|__animationnodeanimation__.AnimationNodeAnimation|__animationnodeadd2__.AnimationNodeAdd2|__animationnodeblendspace2d__.AnimationNodeBlendSpace2D|__animationnode__.AnimationNode|__animationnodetransition__.AnimationNodeTransition|__animationnodestatemachine__.AnimationNodeStateMachine|__animationrootnode__.AnimationRootNode|__animationnodeblend2__.AnimationNodeBlend2|__animationnodeoneshot__.AnimationNodeOneShot|__animationnodeoutput__.AnimationNodeOutput|__animationnodeblendspace1d__.AnimationNodeBlendSpace1D|__animationnodeadd3__.AnimationNodeAdd3|__animationnodetimescale__.AnimationNodeTimeScale|__animationnodesync__.AnimationNodeSync|__animationnodeblendtree__.AnimationNodeBlendTree|__animationnodesub2__.AnimationNodeSub2: pass

  def _get_parameter_default_value(self, parameter:__core__.StringName|str)->object: pass

  def _is_parameter_read_only(self, parameter:__core__.StringName|str)->bool: pass

  def _process(self, time:float, seek:bool, is_external_seeking:bool, test_only:bool)->float: pass

  def _get_caption(self)->str: pass

  def _has_filter(self)->bool: pass

  def add_input(self, name:str)->bool: pass

  def remove_input(self, index:int)->None: pass

  def set_input_name(self, input:int, name:str)->bool: pass

  def get_input_name(self, input:int)->str: pass

  def get_input_count(self)->int: pass

  def find_input(self, name:str)->int: pass

  def set_filter_path(self, path:__core__.NodePath|str, enable:bool)->None: pass

  def is_path_filtered(self, path:__core__.NodePath|str)->bool: pass

  def set_filter_enabled(self, enable:bool)->None: pass

  def is_filter_enabled(self)->bool: pass

  def get_processing_animation_tree_instance_id(self)->int: pass

  def is_process_testing(self)->bool: pass

  def blend_animation(self, animation:__core__.StringName|str, time:float, delta:float, seeked:bool, is_external_seeking:bool, blend:float, looped_flag:int =0)->None: pass

  def blend_node(self, name:__core__.StringName|str, node:__animationnode__.AnimationNode, time:float, seek:bool, is_external_seeking:bool, blend:float, filter:int =0, sync:bool=True, test_only:bool=False)->float: pass

  def blend_input(self, input_index:int, time:float, seek:bool, is_external_seeking:bool, blend:float, filter:int =0, sync:bool=True, test_only:bool=False)->float: pass

  def set_parameter(self, name:__core__.StringName|str, value:object)->None: pass

  def get_parameter(self, name:__core__.StringName|str)->object: pass


