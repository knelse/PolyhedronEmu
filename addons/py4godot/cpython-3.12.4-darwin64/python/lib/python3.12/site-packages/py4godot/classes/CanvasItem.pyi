from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NavigationRegion2D as __navigationregion2d__
import py4godot.classes.LinkButton as __linkbutton__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.VSplitContainer as __vsplitcontainer__
import py4godot.classes.MenuButton as __menubutton__
import py4godot.classes.VideoStreamPlayer as __videostreamplayer__
import py4godot.classes.Joint2D as __joint2d__
import py4godot.classes.CanvasModulate as __canvasmodulate__
import py4godot.classes.CollisionPolygon2D as __collisionpolygon2d__
import py4godot.classes.BackBufferCopy as __backbuffercopy__
import py4godot.classes.ShapeCast2D as __shapecast2d__
import py4godot.classes.ItemList as __itemlist__
import py4godot.classes.Area2D as __area2d__
import py4godot.classes.Button as __button__
import py4godot.classes.GraphFrame as __graphframe__
import py4godot.classes.Bone2D as __bone2d__
import py4godot.classes.RichTextLabel as __richtextlabel__
import py4godot.classes.PathFollow2D as __pathfollow2d__
import py4godot.classes.ScrollBar as __scrollbar__
import py4godot.classes.GPUParticles2D as __gpuparticles2d__
import py4godot.classes.Control as __control__
import py4godot.classes.Skeleton2D as __skeleton2d__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.InputEventScreenDrag as __inputeventscreendrag__
import py4godot.classes.Node as __node__
import py4godot.classes.OpenXRInteractionProfileEditor as __openxrinteractionprofileeditor__
import py4godot.classes.TextureButton as __texturebutton__
import py4godot.classes.TileMap as __tilemap__
import py4godot.classes.TextureRect as __texturerect__
import py4godot.classes.Node2D as __node2d__
import py4godot.classes.HSeparator as __hseparator__
import py4godot.classes.InputEventKey as __inputeventkey__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.Polygon2D as __polygon2d__
import py4godot.classes.InputEventJoypadButton as __inputeventjoypadbutton__
import py4godot.classes.AspectRatioContainer as __aspectratiocontainer__
import py4godot.classes.Separator as __separator__
import py4godot.classes.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.PhysicalBone2D as __physicalbone2d__
import py4godot.classes.CPUParticles2D as __cpuparticles2d__
import py4godot.classes.InputEventScreenTouch as __inputeventscreentouch__
import py4godot.classes.InputEventAction as __inputeventaction__
import py4godot.classes.EditorToaster as __editortoaster__
import py4godot.classes.EditorResourcePicker as __editorresourcepicker__
import py4godot.classes.MeshInstance2D as __meshinstance2d__
import py4godot.classes.Mesh as __mesh__
import py4godot.classes.ScrollContainer as __scrollcontainer__
import py4godot.classes.Sprite2D as __sprite2d__
import py4godot.classes.DirectionalLight2D as __directionallight2d__
import py4godot.classes.MultiMesh as __multimesh__
import py4godot.classes.Path2D as __path2d__
import py4godot.classes.DampedSpringJoint2D as __dampedspringjoint2d__
import py4godot.classes.RigidBody2D as __rigidbody2d__
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.VSlider as __vslider__
import py4godot.classes.ColorPicker as __colorpicker__
import py4godot.classes.ParallaxLayer as __parallaxlayer__
import py4godot.classes.GraphEdit as __graphedit__
import py4godot.classes.SubViewportContainer as __subviewportcontainer__
import py4godot.classes.StyleBox as __stylebox__
import py4godot.classes.EditorScriptPicker as __editorscriptpicker__
import py4godot.classes.AnimatableBody2D as __animatablebody2d__
import py4godot.classes.TouchScreenButton as __touchscreenbutton__
import py4godot.classes.Material as __material__
import py4godot.classes.SpinBox as __spinbox__
import py4godot.classes.AudioListener2D as __audiolistener2d__
import py4godot.classes.InputEvent as __inputevent__
import py4godot.classes.VisibleOnScreenNotifier2D as __visibleonscreennotifier2d__
import py4godot.classes.CheckBox as __checkbox__
import py4godot.classes.Light2D as __light2d__
import py4godot.classes.GrooveJoint2D as __groovejoint2d__
import py4godot.classes.NavigationLink2D as __navigationlink2d__
import py4godot.classes.Panel as __panel__
import py4godot.classes.TextEdit as __textedit__
import py4godot.classes.RayCast2D as __raycast2d__
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.HBoxContainer as __hboxcontainer__
import py4godot.classes.EditorInspector as __editorinspector__
import py4godot.classes.InputEventMIDI as __inputeventmidi__
import py4godot.classes.HSplitContainer as __hsplitcontainer__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__
import py4godot.classes.InputEventPanGesture as __inputeventpangesture__
import py4godot.classes.MenuBar as __menubar__
import py4godot.classes.InputEventMouse as __inputeventmouse__
import py4godot.classes.Range as __range__
import py4godot.classes.FileSystemDock as __filesystemdock__
import py4godot.classes.Marker2D as __marker2d__
import py4godot.classes.Tree as __tree__
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.ProgressBar as __progressbar__
import py4godot.classes.EditorSpinSlider as __editorspinslider__
import py4godot.classes.Container as __container__
import py4godot.classes.HScrollBar as __hscrollbar__
import py4godot.classes.OptionButton as __optionbutton__
import py4godot.classes.RemoteTransform2D as __remotetransform2d__
import py4godot.classes.InputEventMouseButton as __inputeventmousebutton__
import py4godot.classes.InputEventShortcut as __inputeventshortcut__
import py4godot.classes.CodeEdit as __codeedit__
import py4godot.classes.CharacterBody2D as __characterbody2d__
import py4godot.classes.HSlider as __hslider__
import py4godot.classes.ScriptEditor as __scripteditor__
import py4godot.classes.ReferenceRect as __referencerect__
import py4godot.classes.AudioStreamPlayer2D as __audiostreamplayer2d__
import py4godot.classes.CollisionShape2D as __collisionshape2d__
import py4godot.classes.OpenXRBindingModifierEditor as __openxrbindingmodifiereditor__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.ColorRect as __colorrect__
import py4godot.classes.CenterContainer as __centercontainer__
import py4godot.classes.PointLight2D as __pointlight2d__
import py4godot.classes.Label as __label__
import py4godot.classes.CheckButton as __checkbutton__
import py4godot.classes.TabBar as __tabbar__
import py4godot.classes.InputEventGesture as __inputeventgesture__
import py4godot.classes.PinJoint2D as __pinjoint2d__
import py4godot.classes.Parallax2D as __parallax2d__
import py4godot.classes.OpenXRInteractionProfileEditorBase as __openxrinteractionprofileeditorbase__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__
import py4godot.classes.Line2D as __line2d__
import py4godot.classes.ColorPickerButton as __colorpickerbutton__
import py4godot.classes.ParallaxBackground as __parallaxbackground__
import py4godot.classes.VSeparator as __vseparator__
import py4godot.classes.BoxContainer as __boxcontainer__
import py4godot.classes.InputEventMouseMotion as __inputeventmousemotion__
import py4godot.classes.World2D as __world2d__
import py4godot.classes.GraphNode as __graphnode__
import py4godot.classes.GraphElement as __graphelement__
import py4godot.classes.VScrollBar as __vscrollbar__
import py4godot.classes.LineEdit as __lineedit__
import py4godot.classes.MultiMeshInstance2D as __multimeshinstance2d__
import py4godot.classes.GridContainer as __gridcontainer__
import py4godot.classes.NinePatchRect as __ninepatchrect__
import py4godot.classes.CanvasGroup as __canvasgroup__
import py4godot.classes.LightOccluder2D as __lightoccluder2d__
import py4godot.classes.TextServer as __textserver__
import py4godot.classes.TileMapLayer as __tilemaplayer__
import py4godot.classes.BaseButton as __basebutton__
import py4godot.classes.TabContainer as __tabcontainer__
import py4godot.classes.Font as __font__
import py4godot.classes.CanvasLayer as __canvaslayer__
import py4godot.classes.InputEventMagnifyGesture as __inputeventmagnifygesture__
import py4godot.classes.PanelContainer as __panelcontainer__
import py4godot.classes.TextureProgressBar as __textureprogressbar__
import py4godot.classes.VisibleOnScreenEnabler2D as __visibleonscreenenabler2d__
import py4godot.classes.Texture2D as __texture2d__
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.InputEventJoypadMotion as __inputeventjoypadmotion__
import py4godot.classes.NavigationObstacle2D as __navigationobstacle2d__
import py4godot.classes.AnimatedSprite2D as __animatedsprite2d__
import py4godot.classes.CollisionObject2D as __collisionobject2d__
import py4godot.classes.FlowContainer as __flowcontainer__
import py4godot.classes.Camera2D as __camera2d__
import py4godot.classes.EditorProperty as __editorproperty__
import py4godot.classes.PhysicsBody2D as __physicsbody2d__
import py4godot.classes.InputEventFromWindow as __inputeventfromwindow__
import py4godot.classes.VFlowContainer as __vflowcontainer__
import py4godot.classes.SplitContainer as __splitcontainer__
import py4godot.classes.MarginContainer as __margincontainer__
import py4godot.classes.StaticBody2D as __staticbody2d__
import py4godot.classes.InputEventWithModifiers as __inputeventwithmodifiers__
import py4godot.classes.HFlowContainer as __hflowcontainer__
import py4godot.classes.VBoxContainer as __vboxcontainer__
import py4godot.classes.Slider as __slider__
import py4godot.classes.CanvasItem as __canvasitem__


class TextureFilter:
  TEXTURE_FILTER_PARENT_NODE:int = 0
  TEXTURE_FILTER_NEAREST:int = 1
  TEXTURE_FILTER_LINEAR:int = 2
  TEXTURE_FILTER_NEAREST_WITH_MIPMAPS:int = 3
  TEXTURE_FILTER_LINEAR_WITH_MIPMAPS:int = 4
  TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC:int = 5
  TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC:int = 6
  TEXTURE_FILTER_MAX:int = 7
class TextureRepeat:
  TEXTURE_REPEAT_PARENT_NODE:int = 0
  TEXTURE_REPEAT_DISABLED:int = 1
  TEXTURE_REPEAT_ENABLED:int = 2
  TEXTURE_REPEAT_MIRROR:int = 3
  TEXTURE_REPEAT_MAX:int = 4
class ClipChildrenMode:
  CLIP_CHILDREN_DISABLED:int = 0
  CLIP_CHILDREN_ONLY:int = 1
  CLIP_CHILDREN_AND_DRAW:int = 2
  CLIP_CHILDREN_MAX:int = 3


class CanvasItem(__node__.Node):
  draw: BuiltinSignal
  visibility_changed: BuiltinSignal
  hidden: BuiltinSignal
  item_rect_changed: BuiltinSignal

  @staticmethod
  def constructor()->CanvasItem:pass



  @staticmethod
  def cast(other:__object__.Object)->CanvasItem:pass


  @property
  def visible(self)->bool: pass
  @visible.setter
  def visible(self,  value:bool)->None: pass
  @property
  def modulate(self)->__core__.Color: pass
  @modulate.setter
  def modulate(self,  value:__core__.Color)->None: pass
  @property
  def self_modulate(self)->__core__.Color: pass
  @self_modulate.setter
  def self_modulate(self,  value:__core__.Color)->None: pass
  @property
  def show_behind_parent(self)->bool: pass
  @show_behind_parent.setter
  def show_behind_parent(self,  value:bool)->None: pass
  @property
  def top_level(self)->bool: pass
  @top_level.setter
  def top_level(self,  value:bool)->None: pass
  @property
  def clip_children(self)->int: pass
  @clip_children.setter
  def clip_children(self,  value:int)->None: pass
  @property
  def light_mask(self)->int: pass
  @light_mask.setter
  def light_mask(self,  value:int)->None: pass
  @property
  def visibility_layer(self)->int: pass
  @visibility_layer.setter
  def visibility_layer(self,  value:int)->None: pass
  @property
  def z_index(self)->int: pass
  @z_index.setter
  def z_index(self,  value:int)->None: pass
  @property
  def z_as_relative(self)->bool: pass
  @z_as_relative.setter
  def z_as_relative(self,  value:bool)->None: pass
  @property
  def y_sort_enabled(self)->bool: pass
  @y_sort_enabled.setter
  def y_sort_enabled(self,  value:bool)->None: pass
  @property
  def texture_filter(self)->int: pass
  @texture_filter.setter
  def texture_filter(self,  value:int)->None: pass
  @property
  def texture_repeat(self)->int: pass
  @texture_repeat.setter
  def texture_repeat(self,  value:int)->None: pass
  @property
  def material(self)->CanvasItemMaterial,ShaderMaterial: pass
  @material.setter
  def material(self,  value:__canvasitemmaterial__.CanvasItemMaterial)->None: pass
  @property
  def use_parent_material(self)->bool: pass
  @use_parent_material.setter
  def use_parent_material(self,  value:bool)->None: pass
  def _draw(self)->None: pass

  def get_canvas_item(self)->__core__.RID: pass

  def set_visible(self, visible:bool)->None: pass

  def is_visible(self)->bool: pass

  def is_visible_in_tree(self)->bool: pass

  def show(self)->None: pass

  def hide(self)->None: pass

  def queue_redraw(self)->None: pass

  def move_to_front(self)->None: pass

  def set_as_top_level(self, enable:bool)->None: pass

  def is_set_as_top_level(self)->bool: pass

  def set_light_mask(self, light_mask:int)->None: pass

  def get_light_mask(self)->int: pass

  def set_modulate(self, modulate:__core__.Color)->None: pass

  def get_modulate(self)->__core__.Color: pass

  def set_self_modulate(self, self_modulate:__core__.Color)->None: pass

  def get_self_modulate(self)->__core__.Color: pass

  def set_z_index(self, z_index:int)->None: pass

  def get_z_index(self)->int: pass

  def set_z_as_relative(self, enable:bool)->None: pass

  def is_z_relative(self)->bool: pass

  def set_y_sort_enabled(self, enabled:bool)->None: pass

  def is_y_sort_enabled(self)->bool: pass

  def set_draw_behind_parent(self, enable:bool)->None: pass

  def is_draw_behind_parent_enabled(self)->bool: pass

  def draw_line(self, from_:__core__.Vector2, to:__core__.Vector2, color:__core__.Color, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_dashed_line(self, from_:__core__.Vector2, to:__core__.Vector2, color:__core__.Color, width:float=-1.0, dash:float=2.0, aligned:bool=True, antialiased:bool=False)->None: pass

  def draw_polyline(self, points:__core__.PackedVector2Array, color:__core__.Color, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_polyline_colors(self, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_arc(self, center:__core__.Vector2, radius:float, start_angle:float, end_angle:float, point_count:int, color:__core__.Color, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_multiline(self, points:__core__.PackedVector2Array, color:__core__.Color, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_multiline_colors(self, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_rect(self, rect:__core__.Rect2, color:__core__.Color, filled:bool=True, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_circle(self, position:__core__.Vector2, radius:float, color:__core__.Color, filled:bool=True, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_texture(self, texture:__texture2d__.Texture2D, position:__core__.Vector2, modulate:__core__.Color= __core__.Color.new0())->None: pass

  def draw_texture_rect(self, texture:__texture2d__.Texture2D, rect:__core__.Rect2, tile:bool, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False)->None: pass

  def draw_texture_rect_region(self, texture:__texture2d__.Texture2D, rect:__core__.Rect2, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False, clip_uv:bool=True)->None: pass

  def draw_msdf_texture_rect_region(self, texture:__texture2d__.Texture2D, rect:__core__.Rect2, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0(), outline:float=0.0, pixel_range:float=4.0, scale:float=1.0)->None: pass

  def draw_lcd_texture_rect_region(self, texture:__texture2d__.Texture2D, rect:__core__.Rect2, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0())->None: pass

  def draw_style_box(self, style_box:__stylebox__.StyleBox, rect:__core__.Rect2)->None: pass

  def draw_primitive(self, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array, texture:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor())->None: pass

  def draw_polygon(self, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array= __core__.PackedVector2Array.new0(), texture:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor())->None: pass

  def draw_colored_polygon(self, points:__core__.PackedVector2Array, color:__core__.Color, uvs:__core__.PackedVector2Array= __core__.PackedVector2Array.new0(), texture:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor())->None: pass

  def draw_string(self, font:__font__.Font, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, modulate:__core__.Color= __core__.Color.new0(), justification_flags:int=3, direction:int =0, orientation:int =0)->None: pass

  def draw_multiline_string(self, font:__font__.Font, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, max_lines:int=-1, modulate:__core__.Color= __core__.Color.new0(), brk_flags:int=3, justification_flags:int=3, direction:int =0, orientation:int =0)->None: pass

  def draw_string_outline(self, font:__font__.Font, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, size:int=1, modulate:__core__.Color= __core__.Color.new0(), justification_flags:int=3, direction:int =0, orientation:int =0)->None: pass

  def draw_multiline_string_outline(self, font:__font__.Font, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, max_lines:int=-1, size:int=1, modulate:__core__.Color= __core__.Color.new0(), brk_flags:int=3, justification_flags:int=3, direction:int =0, orientation:int =0)->None: pass

  def draw_char(self, font:__font__.Font, pos:__core__.Vector2, char:str, font_size:int=16, modulate:__core__.Color= __core__.Color.new0())->None: pass

  def draw_char_outline(self, font:__font__.Font, pos:__core__.Vector2, char:str, font_size:int=16, size:int=-1, modulate:__core__.Color= __core__.Color.new0())->None: pass

  def draw_mesh(self, mesh:__mesh__.Mesh, texture:__texture2d__.Texture2D, transform:__core__.Transform2D= __core__.Transform2D.new0(), modulate:__core__.Color= __core__.Color.new0())->None: pass

  def draw_multimesh(self, multimesh:__multimesh__.MultiMesh, texture:__texture2d__.Texture2D)->None: pass

  def draw_set_transform(self, position:__core__.Vector2, rotation:float=0.0, scale:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def draw_set_transform_matrix(self, xform:__core__.Transform2D)->None: pass

  def draw_animation_slice(self, animation_length:float, slice_begin:float, slice_end:float, offset:float=0.0)->None: pass

  def draw_end_animation(self)->None: pass

  def get_transform(self)->__core__.Transform2D: pass

  def get_global_transform(self)->__core__.Transform2D: pass

  def get_global_transform_with_canvas(self)->__core__.Transform2D: pass

  def get_viewport_transform(self)->__core__.Transform2D: pass

  def get_viewport_rect(self)->__core__.Rect2: pass

  def get_canvas_transform(self)->__core__.Transform2D: pass

  def get_screen_transform(self)->__core__.Transform2D: pass

  def get_local_mouse_position(self)->__core__.Vector2: pass

  def get_global_mouse_position(self)->__core__.Vector2: pass

  def get_canvas(self)->__core__.RID: pass

  def get_canvas_layer_node(self)->__parallaxbackground__.ParallaxBackground|__canvaslayer__.CanvasLayer: pass

  def get_world_2d(self)->__world2d__.World2D: pass

  def set_material(self, material:__material__.Material)->None: pass

  def get_material(self)->__ormmaterial3d__.ORMMaterial3D|__standardmaterial3d__.StandardMaterial3D|__shadermaterial__.ShaderMaterial|__placeholdermaterial__.PlaceholderMaterial|__material__.Material|__proceduralskymaterial__.ProceduralSkyMaterial|__basematerial3d__.BaseMaterial3D|__canvasitemmaterial__.CanvasItemMaterial|__panoramaskymaterial__.PanoramaSkyMaterial|__physicalskymaterial__.PhysicalSkyMaterial|__fogmaterial__.FogMaterial|__particleprocessmaterial__.ParticleProcessMaterial: pass

  def set_instance_shader_parameter(self, name:__core__.StringName|str, value:object)->None: pass

  def get_instance_shader_parameter(self, name:__core__.StringName|str)->object: pass

  def set_use_parent_material(self, enable:bool)->None: pass

  def get_use_parent_material(self)->bool: pass

  def set_notify_local_transform(self, enable:bool)->None: pass

  def is_local_transform_notification_enabled(self)->bool: pass

  def set_notify_transform(self, enable:bool)->None: pass

  def is_transform_notification_enabled(self)->bool: pass

  def force_update_transform(self)->None: pass

  def make_canvas_position_local(self, viewport_point:__core__.Vector2)->__core__.Vector2: pass

  def make_input_local(self, event:__inputevent__.InputEvent)->__inputeventmouse__.InputEventMouse|__inputeventscreentouch__.InputEventScreenTouch|__inputeventaction__.InputEventAction|__inputeventscreendrag__.InputEventScreenDrag|__inputeventfromwindow__.InputEventFromWindow|__inputeventgesture__.InputEventGesture|__inputeventmagnifygesture__.InputEventMagnifyGesture|__inputeventmidi__.InputEventMIDI|__inputeventkey__.InputEventKey|__inputeventwithmodifiers__.InputEventWithModifiers|__inputeventmousebutton__.InputEventMouseButton|__inputeventshortcut__.InputEventShortcut|__inputeventmousemotion__.InputEventMouseMotion|__inputeventjoypadbutton__.InputEventJoypadButton|__inputeventjoypadmotion__.InputEventJoypadMotion|__inputeventpangesture__.InputEventPanGesture|__inputevent__.InputEvent: pass

  def set_visibility_layer(self, layer:int)->None: pass

  def get_visibility_layer(self)->int: pass

  def set_visibility_layer_bit(self, layer:int, enabled:bool)->None: pass

  def get_visibility_layer_bit(self, layer:int)->bool: pass

  def set_texture_filter(self, mode:int )->None: pass

  def get_texture_filter(self)->int: pass

  def set_texture_repeat(self, mode:int )->None: pass

  def get_texture_repeat(self)->int: pass

  def set_clip_children_mode(self, mode:int )->None: pass

  def get_clip_children_mode(self)->int: pass


