from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted as __refcounted__


class CacheMode:
  CACHE_MODE_IGNORE:int = 0
  CACHE_MODE_REUSE:int = 1
  CACHE_MODE_REPLACE:int = 2
  CACHE_MODE_IGNORE_DEEP:int = 3
  CACHE_MODE_REPLACE_DEEP:int = 4


class ResourceFormatLoader(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->ResourceFormatLoader:pass



  @staticmethod
  def cast(other:__object__.Object)->ResourceFormatLoader:pass


  def _get_recognized_extensions(self)->__core__.PackedStringArray: pass

  def _recognize_path(self, path:str, type:__core__.StringName|str)->bool: pass

  def _handles_type(self, type:__core__.StringName|str)->bool: pass

  def _get_resource_type(self, path:str)->str: pass

  def _get_resource_script_class(self, path:str)->str: pass

  def _get_resource_uid(self, path:str)->int: pass

  def _get_dependencies(self, path:str, add_types:bool)->__core__.PackedStringArray: pass

  def _rename_dependencies(self, path:str, renames:__core__.Dictionary)->int: pass

  def _exists(self, path:str)->bool: pass

  def _get_classes_used(self, path:str)->__core__.PackedStringArray: pass

  def _load(self, path:str, original_path:str, use_sub_threads:bool, cache_mode:int)->object: pass


