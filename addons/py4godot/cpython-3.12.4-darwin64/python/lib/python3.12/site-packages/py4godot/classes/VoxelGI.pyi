from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CameraAttributes as __cameraattributes__
import py4godot.classes.Node as __node__
import py4godot.classes.VoxelGI as __voxelgi__
import py4godot.classes.CameraAttributesPhysical as __cameraattributesphysical__
import py4godot.classes.VisualInstance3D as __visualinstance3d__
import py4godot.classes.VoxelGIData as __voxelgidata__
import py4godot.classes.CameraAttributesPractical as __cameraattributespractical__


class Subdiv:
  SUBDIV_64:int = 0
  SUBDIV_128:int = 1
  SUBDIV_256:int = 2
  SUBDIV_512:int = 3
  SUBDIV_MAX:int = 4


class VoxelGI(__visualinstance3d__.VisualInstance3D):

  @staticmethod
  def constructor()->VoxelGI:pass



  @staticmethod
  def cast(other:__object__.Object)->VoxelGI:pass


  @property
  def subdiv(self)->int: pass
  @subdiv.setter
  def subdiv(self,  value:int)->None: pass
  @property
  def size(self)->__core__.Vector3: pass
  @size.setter
  def size(self,  value:__core__.Vector3)->None: pass
  @property
  def camera_attributes(self)->CameraAttributesPractical,CameraAttributesPhysical: pass
  @camera_attributes.setter
  def camera_attributes(self,  value:__cameraattributespractical__.CameraAttributesPractical)->None: pass
  @property
  def data(self)->__voxelgidata__.VoxelGIData: pass
  @data.setter
  def data(self,  value:__voxelgidata__.VoxelGIData)->None: pass
  def set_probe_data(self, data:__voxelgidata__.VoxelGIData)->None: pass

  def get_probe_data(self)->__voxelgidata__.VoxelGIData: pass

  def set_subdiv(self, subdiv:int )->None: pass

  def get_subdiv(self)->int: pass

  def set_size(self, size:__core__.Vector3)->None: pass

  def get_size(self)->__core__.Vector3: pass

  def set_camera_attributes(self, camera_attributes:__cameraattributes__.CameraAttributes)->None: pass

  def get_camera_attributes(self)->__cameraattributes__.CameraAttributes|__cameraattributesphysical__.CameraAttributesPhysical|__cameraattributespractical__.CameraAttributesPractical: pass

  def bake(self, from_node:__node__.Node= __node__.Node.constructor(), create_visual_debug:bool=False)->None: pass

  def debug_bake(self)->None: pass


