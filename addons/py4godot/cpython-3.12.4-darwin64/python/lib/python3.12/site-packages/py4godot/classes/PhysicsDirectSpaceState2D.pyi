from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.d as __d__
import py4godot.classes.o as __o__
import py4godot.classes.V as __v__
import py4godot.classes.Object as __object__
import py4godot.classes.PhysicsShapeQueryParameters2D as __physicsshapequeryparameters2d__
import py4godot.classes.2 as __2__
import py4godot.classes.c as __c__
import py4godot.classes.n as __n__
import py4godot.classes.y as __y__
import py4godot.classes.t as __t__
import py4godot.classes.A as __a__
import py4godot.classes.r as __r__
import py4godot.classes.D as __d__
import py4godot.classes.e as __e__
import py4godot.classes.PhysicsPointQueryParameters2D as __physicspointqueryparameters2d__
import py4godot.classes.p as __p__
import py4godot.classes.PhysicsRayQueryParameters2D as __physicsrayqueryparameters2d__
import py4godot.classes.i as __i__
import py4godot.classes.a as __a__
import py4godot.classes.T as __t__



class PhysicsDirectSpaceState2D(__object__.Object):

  @staticmethod
  def constructor()->PhysicsDirectSpaceState2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsDirectSpaceState2D:pass


  def intersect_point(self, parameters:__physicspointqueryparameters2d__.PhysicsPointQueryParameters2D, max_results:int=32)->typedarray::Dictionary: pass

  def intersect_ray(self, parameters:__physicsrayqueryparameters2d__.PhysicsRayQueryParameters2D)->__core__.Dictionary: pass

  def intersect_shape(self, parameters:__physicsshapequeryparameters2d__.PhysicsShapeQueryParameters2D, max_results:int=32)->typedarray::Dictionary: pass

  def cast_motion(self, parameters:__physicsshapequeryparameters2d__.PhysicsShapeQueryParameters2D)->__core__.PackedFloat32Array: pass

  def collide_shape(self, parameters:__physicsshapequeryparameters2d__.PhysicsShapeQueryParameters2D, max_results:int=32)->typedarray::Vector2: pass

  def get_rest_info(self, parameters:__physicsshapequeryparameters2d__.PhysicsShapeQueryParameters2D)->__core__.Dictionary: pass


