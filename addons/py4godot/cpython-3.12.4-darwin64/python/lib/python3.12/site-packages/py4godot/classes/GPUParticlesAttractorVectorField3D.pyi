from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture3D as __texture3d__
import py4godot.classes.ImageTexture3D as __imagetexture3d__
import py4godot.classes.NoiseTexture3D as __noisetexture3d__
import py4godot.classes.PlaceholderTexture3D as __placeholdertexture3d__
import py4godot.classes.CompressedTexture3D as __compressedtexture3d__
import py4godot.classes.GPUParticlesAttractor3D as __gpuparticlesattractor3d__
import py4godot.classes.Texture3DRD as __texture3drd__



class GPUParticlesAttractorVectorField3D(__gpuparticlesattractor3d__.GPUParticlesAttractor3D):

  @staticmethod
  def constructor()->GPUParticlesAttractorVectorField3D:pass



  @staticmethod
  def cast(other:__object__.Object)->GPUParticlesAttractorVectorField3D:pass


  @property
  def size(self)->__core__.Vector3: pass
  @size.setter
  def size(self,  value:__core__.Vector3)->None: pass
  @property
  def texture(self)->__compressedtexture3d__.CompressedTexture3D|__placeholdertexture3d__.PlaceholderTexture3D|__texture3drd__.Texture3DRD|__imagetexture3d__.ImageTexture3D|__noisetexture3d__.NoiseTexture3D|__texture3d__.Texture3D: pass
  @texture.setter
  def texture(self,  value:__texture3d__.Texture3D)->None: pass
  def set_size(self, size:__core__.Vector3)->None: pass

  def get_size(self)->__core__.Vector3: pass

  def set_texture(self, texture:__texture3d__.Texture3D)->None: pass

  def get_texture(self)->__compressedtexture3d__.CompressedTexture3D|__placeholdertexture3d__.PlaceholderTexture3D|__texture3drd__.Texture3DRD|__imagetexture3d__.ImageTexture3D|__noisetexture3d__.NoiseTexture3D|__texture3d__.Texture3D: pass


