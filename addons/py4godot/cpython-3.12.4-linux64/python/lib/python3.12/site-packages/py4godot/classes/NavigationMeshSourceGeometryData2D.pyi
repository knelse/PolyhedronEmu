from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource as __resource__
import py4godot.classes.P as __p__
import py4godot.classes.o as __o__
import py4godot.classes.d as __d__
import py4godot.classes.p as __p__
import py4godot.classes.A as __a__
import py4godot.classes.T as __t__
import py4godot.classes.2 as __2__
import py4godot.classes.y as __y__
import py4godot.classes.r as __r__
import py4godot.classes.c as __c__
import py4godot.classes.t as __t__
import py4godot.classes.k as __k__
import py4godot.classes.V as __v__
import py4godot.classes.NavigationMeshSourceGeometryData2D as __navigationmeshsourcegeometrydata2d__
import py4godot.classes.e as __e__
import py4godot.classes.a as __a__



class NavigationMeshSourceGeometryData2D(__resource__.Resource):

  @staticmethod
  def constructor()->NavigationMeshSourceGeometryData2D:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationMeshSourceGeometryData2D:pass


  @property
  def traversable_outlines(self)->__core__.Array: pass
  @traversable_outlines.setter
  def traversable_outlines(self,  value:__core__.Array)->None: pass
  @property
  def obstruction_outlines(self)->__core__.Array: pass
  @obstruction_outlines.setter
  def obstruction_outlines(self,  value:__core__.Array)->None: pass
  @property
  def projected_obstructions(self)->__core__.Array: pass
  @projected_obstructions.setter
  def projected_obstructions(self,  value:__core__.Array)->None: pass
  def clear(self)->None: pass

  def has_data(self)->bool: pass

  def set_traversable_outlines(self, traversable_outlines:__core__.Array)->None: pass

  def get_traversable_outlines(self)->typedarray::PackedVector2Array: pass

  def set_obstruction_outlines(self, obstruction_outlines:__core__.Array)->None: pass

  def get_obstruction_outlines(self)->typedarray::PackedVector2Array: pass

  def append_traversable_outlines(self, traversable_outlines:__core__.Array)->None: pass

  def append_obstruction_outlines(self, obstruction_outlines:__core__.Array)->None: pass

  def add_traversable_outline(self, shape_outline:__core__.PackedVector2Array)->None: pass

  def add_obstruction_outline(self, shape_outline:__core__.PackedVector2Array)->None: pass

  def merge(self, other_geometry:__navigationmeshsourcegeometrydata2d__.NavigationMeshSourceGeometryData2D)->None: pass

  def add_projected_obstruction(self, vertices:__core__.PackedVector2Array, carve:bool)->None: pass

  def clear_projected_obstructions(self)->None: pass

  def set_projected_obstructions(self, projected_obstructions:__core__.Array)->None: pass

  def get_projected_obstructions(self)->__core__.Array: pass

  def get_bounds(self)->__core__.Rect2: pass


