from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationNodeBlendSpace1D as __animationnodeblendspace1d__
import py4godot.classes.AnimationNodeStateMachine as __animationnodestatemachine__
import py4godot.classes.AnimationNodeBlendSpace2D as __animationnodeblendspace2d__
import py4godot.classes.AnimationRootNode as __animationrootnode__
import py4godot.classes.AnimationNodeBlendTree as __animationnodeblendtree__
import py4godot.classes.AnimationNodeAnimation as __animationnodeanimation__


class BlendMode:
  BLEND_MODE_INTERPOLATED:int = 0
  BLEND_MODE_DISCRETE:int = 1
  BLEND_MODE_DISCRETE_CARRY:int = 2


class AnimationNodeBlendSpace1D(__animationrootnode__.AnimationRootNode):

  @staticmethod
  def constructor()->AnimationNodeBlendSpace1D:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNodeBlendSpace1D:pass


  @property
  def min_space(self)->float: pass
  @min_space.setter
  def min_space(self,  value:float)->None: pass
  @property
  def max_space(self)->float: pass
  @max_space.setter
  def max_space(self,  value:float)->None: pass
  @property
  def snap(self)->float: pass
  @snap.setter
  def snap(self,  value:float)->None: pass
  @property
  def value_label(self)->str: pass
  @value_label.setter
  def value_label(self,  value:str)->None: pass
  @property
  def blend_mode(self)->int: pass
  @blend_mode.setter
  def blend_mode(self,  value:int)->None: pass
  @property
  def sync(self)->bool: pass
  @sync.setter
  def sync(self,  value:bool)->None: pass
  def add_blend_point(self, node:__animationrootnode__.AnimationRootNode, pos:float, at_index:int=-1)->None: pass

  def set_blend_point_position(self, point:int, pos:float)->None: pass

  def get_blend_point_position(self, point:int)->float: pass

  def set_blend_point_node(self, point:int, node:__animationrootnode__.AnimationRootNode)->None: pass

  def get_blend_point_node(self, point:int)->__animationnodeblendspace1d__.AnimationNodeBlendSpace1D|__animationnodestatemachine__.AnimationNodeStateMachine|__animationnodeblendspace2d__.AnimationNodeBlendSpace2D|__animationrootnode__.AnimationRootNode|__animationnodeblendtree__.AnimationNodeBlendTree|__animationnodeanimation__.AnimationNodeAnimation: pass

  def remove_blend_point(self, point:int)->None: pass

  def get_blend_point_count(self)->int: pass

  def set_min_space(self, min_space:float)->None: pass

  def get_min_space(self)->float: pass

  def set_max_space(self, max_space:float)->None: pass

  def get_max_space(self)->float: pass

  def set_snap(self, snap:float)->None: pass

  def get_snap(self)->float: pass

  def set_value_label(self, text:str)->None: pass

  def get_value_label(self)->str: pass

  def set_blend_mode(self, mode:int )->None: pass

  def get_blend_mode(self)->int: pass

  def set_use_sync(self, enable:bool)->None: pass

  def is_using_sync(self)->bool: pass


