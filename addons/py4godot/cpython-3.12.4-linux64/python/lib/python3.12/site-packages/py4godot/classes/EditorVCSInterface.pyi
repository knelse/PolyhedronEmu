from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.o as __o__
import py4godot.classes.p as __p__
import py4godot.classes.d as __d__
import py4godot.classes.D as __d__
import py4godot.classes.g as __g__
import py4godot.classes.A as __a__
import py4godot.classes.T as __t__
import py4godot.classes.y as __y__
import py4godot.classes.r as __r__
import py4godot.classes.c as __c__
import py4godot.classes.n as __n__
import py4godot.classes.e as __e__
import py4godot.classes.S as __s__
import py4godot.classes.t as __t__
import py4godot.classes.EditorVCSInterface as __editorvcsinterface__
import py4godot.classes.Object as __object__
import py4godot.classes.a as __a__
import py4godot.classes.i as __i__


class ChangeType:
  CHANGE_KIND_NEW:int = 0
  CHANGE_KIND_MODIFIED:int = 1
  CHANGE_KIND_RENAMED:int = 2
  CHANGE_KIND_DELETED:int = 3
  CHANGE_KIND_TYPECHANGE:int = 4
  CHANGE_KIND_UNMERGED:int = 5
class TreeArea:
  TREE_AREA_COMMIT:int = 0
  TREE_AREA_STAGED:int = 1
  TREE_AREA_UNSTAGED:int = 2


class EditorVCSInterface(__object__.Object):

  @staticmethod
  def constructor()->EditorVCSInterface:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorVCSInterface:pass


  def _initialize(self, project_path:str)->bool: pass

  def _set_credentials(self, username:str, password:str, ssh_public_key_path:str, ssh_private_key_path:str, ssh_passphrase:str)->None: pass

  def _get_modified_files_data(self)->typedarray::Dictionary: pass

  def _stage_file(self, file_path:str)->None: pass

  def _unstage_file(self, file_path:str)->None: pass

  def _discard_file(self, file_path:str)->None: pass

  def _commit(self, msg:str)->None: pass

  def _get_diff(self, identifier:str, area:int)->typedarray::Dictionary: pass

  def _shut_down(self)->bool: pass

  def _get_vcs_name(self)->str: pass

  def _get_previous_commits(self, max_commits:int)->typedarray::Dictionary: pass

  def _get_branch_list(self)->typedarray::String: pass

  def _get_remotes(self)->typedarray::String: pass

  def _create_branch(self, branch_name:str)->None: pass

  def _remove_branch(self, branch_name:str)->None: pass

  def _create_remote(self, remote_name:str, remote_url:str)->None: pass

  def _remove_remote(self, remote_name:str)->None: pass

  def _get_current_branch_name(self)->str: pass

  def _checkout_branch(self, branch_name:str)->bool: pass

  def _pull(self, remote:str)->None: pass

  def _push(self, remote:str, force:bool)->None: pass

  def _fetch(self, remote:str)->None: pass

  def _get_line_diff(self, file_path:str, text:str)->typedarray::Dictionary: pass

  def create_diff_line(self, new_line_no:int, old_line_no:int, content:str, status:str)->__core__.Dictionary: pass

  def create_diff_hunk(self, old_start:int, new_start:int, old_lines:int, new_lines:int)->__core__.Dictionary: pass

  def create_diff_file(self, new_file:str, old_file:str)->__core__.Dictionary: pass

  def create_commit(self, msg:str, author:str, id:str, unix_timestamp:int, offset_minutes:int)->__core__.Dictionary: pass

  def create_status_file(self, file_path:str, change_type:int , area:int )->__core__.Dictionary: pass

  def add_diff_hunks_into_diff_file(self, diff_file:__core__.Dictionary, diff_hunks:__core__.Array)->__core__.Dictionary: pass

  def add_line_diffs_into_diff_hunk(self, diff_hunk:__core__.Dictionary, line_diffs:__core__.Array)->__core__.Dictionary: pass

  def popup_error(self, msg:str)->None: pass


