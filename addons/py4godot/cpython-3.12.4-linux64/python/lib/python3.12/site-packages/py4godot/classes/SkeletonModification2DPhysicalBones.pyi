from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModification2D as __skeletonmodification2d__
import py4godot.classes.p as __p__
import py4godot.classes.g as __g__
import py4godot.classes.d as __d__
import py4godot.classes.A as __a__
import py4godot.classes.T as __t__
import py4godot.classes.N as __n__
import py4godot.classes.y as __y__
import py4godot.classes.r as __r__
import py4godot.classes.S as __s__
import py4godot.classes.n as __n__
import py4godot.classes.m as __m__
import py4godot.classes.t as __t__
import py4godot.classes.e as __e__
import py4godot.classes.a as __a__
import py4godot.classes.i as __i__



class SkeletonModification2DPhysicalBones(__skeletonmodification2d__.SkeletonModification2D):

  @staticmethod
  def constructor()->SkeletonModification2DPhysicalBones:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonModification2DPhysicalBones:pass


  @property
  def physical_bone_chain_length(self)->int: pass
  @physical_bone_chain_length.setter
  def physical_bone_chain_length(self,  value:int)->None: pass
  def set_physical_bone_chain_length(self, length:int)->None: pass

  def get_physical_bone_chain_length(self)->int: pass

  def set_physical_bone_node(self, joint_idx:int, physicalbone2d_node:__core__.NodePath|str)->None: pass

  def get_physical_bone_node(self, joint_idx:int)->__core__.NodePath: pass

  def fetch_physical_bones(self)->None: pass

  def start_simulation(self, bones:__core__.Array=[])->None: pass

  def stop_simulation(self, bones:__core__.Array=[])->None: pass


