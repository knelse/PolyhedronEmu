from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PrismMesh as __prismmesh__
import py4godot.classes.TubeTrailMesh as __tubetrailmesh__
import py4godot.classes.CapsuleMesh as __capsulemesh__
import py4godot.classes.ShaderMaterial as __shadermaterial__
import py4godot.classes.CylinderMesh as __cylindermesh__
import py4godot.classes.PhysicalSkyMaterial as __physicalskymaterial__
import py4godot.classes.SphereMesh as __spheremesh__
import py4godot.classes.TextMesh as __textmesh__
import py4godot.classes.PrimitiveMesh as __primitivemesh__
import py4godot.classes.ImmediateMesh as __immediatemesh__
import py4godot.classes.PlaceholderMaterial as __placeholdermaterial__
import py4godot.classes.GeometryInstance3D as __geometryinstance3d__
import py4godot.classes.BaseMaterial3D as __basematerial3d__
import py4godot.classes.ORMMaterial3D as __ormmaterial3d__
import py4godot.classes.Skin as __skin__
import py4godot.classes.FogMaterial as __fogmaterial__
import py4godot.classes.TorusMesh as __torusmesh__
import py4godot.classes.PlaneMesh as __planemesh__
import py4godot.classes.RibbonTrailMesh as __ribbontrailmesh__
import py4godot.classes.PointMesh as __pointmesh__
import py4godot.classes.Material as __material__
import py4godot.classes.ArrayMesh as __arraymesh__
import py4godot.classes.BoxMesh as __boxmesh__
import py4godot.classes.PanoramaSkyMaterial as __panoramaskymaterial__
import py4godot.classes.ParticleProcessMaterial as __particleprocessmaterial__
import py4godot.classes.Mesh as __mesh__
import py4godot.classes.SkinReference as __skinreference__
import py4godot.classes.ProceduralSkyMaterial as __proceduralskymaterial__
import py4godot.classes.QuadMesh as __quadmesh__
import py4godot.classes.StandardMaterial3D as __standardmaterial3d__
import py4godot.classes.CanvasItemMaterial as __canvasitemmaterial__
import py4godot.classes.MeshConvexDecompositionSettings as __meshconvexdecompositionsettings__
import py4godot.classes.PlaceholderMesh as __placeholdermesh__



class MeshInstance3D(__geometryinstance3d__.GeometryInstance3D):

  @staticmethod
  def constructor()->MeshInstance3D:pass



  @staticmethod
  def cast(other:__object__.Object)->MeshInstance3D:pass


  @property
  def mesh(self)->__prismmesh__.PrismMesh|__tubetrailmesh__.TubeTrailMesh|__capsulemesh__.CapsuleMesh|__cylindermesh__.CylinderMesh|__spheremesh__.SphereMesh|__mesh__.Mesh|__textmesh__.TextMesh|__primitivemesh__.PrimitiveMesh|__immediatemesh__.ImmediateMesh|__quadmesh__.QuadMesh|__torusmesh__.TorusMesh|__planemesh__.PlaneMesh|__ribbontrailmesh__.RibbonTrailMesh|__pointmesh__.PointMesh|__placeholdermesh__.PlaceholderMesh|__boxmesh__.BoxMesh|__arraymesh__.ArrayMesh: pass
  @mesh.setter
  def mesh(self,  value:__mesh__.Mesh)->None: pass
  @property
  def skin(self)->__skin__.Skin: pass
  @skin.setter
  def skin(self,  value:__skin__.Skin)->None: pass
  @property
  def skeleton(self)->__core__.NodePath: pass
  @skeleton.setter
  def skeleton(self,  value:__core__.NodePath)->None: pass
  def set_mesh(self, mesh:__mesh__.Mesh)->None: pass

  def get_mesh(self)->__prismmesh__.PrismMesh|__tubetrailmesh__.TubeTrailMesh|__capsulemesh__.CapsuleMesh|__cylindermesh__.CylinderMesh|__spheremesh__.SphereMesh|__mesh__.Mesh|__textmesh__.TextMesh|__primitivemesh__.PrimitiveMesh|__immediatemesh__.ImmediateMesh|__quadmesh__.QuadMesh|__torusmesh__.TorusMesh|__planemesh__.PlaneMesh|__ribbontrailmesh__.RibbonTrailMesh|__pointmesh__.PointMesh|__placeholdermesh__.PlaceholderMesh|__boxmesh__.BoxMesh|__arraymesh__.ArrayMesh: pass

  def set_skeleton_path(self, skeleton_path:__core__.NodePath|str)->None: pass

  def get_skeleton_path(self)->__core__.NodePath: pass

  def set_skin(self, skin:__skin__.Skin)->None: pass

  def get_skin(self)->__skin__.Skin: pass

  def get_skin_reference(self)->__skinreference__.SkinReference: pass

  def get_surface_override_material_count(self)->int: pass

  def set_surface_override_material(self, surface:int, material:__material__.Material)->None: pass

  def get_surface_override_material(self, surface:int)->__panoramaskymaterial__.PanoramaSkyMaterial|__standardmaterial3d__.StandardMaterial3D|__basematerial3d__.BaseMaterial3D|__ormmaterial3d__.ORMMaterial3D|__fogmaterial__.FogMaterial|__particleprocessmaterial__.ParticleProcessMaterial|__shadermaterial__.ShaderMaterial|__canvasitemmaterial__.CanvasItemMaterial|__physicalskymaterial__.PhysicalSkyMaterial|__material__.Material|__placeholdermaterial__.PlaceholderMaterial|__proceduralskymaterial__.ProceduralSkyMaterial: pass

  def get_active_material(self, surface:int)->__panoramaskymaterial__.PanoramaSkyMaterial|__standardmaterial3d__.StandardMaterial3D|__basematerial3d__.BaseMaterial3D|__ormmaterial3d__.ORMMaterial3D|__fogmaterial__.FogMaterial|__particleprocessmaterial__.ParticleProcessMaterial|__shadermaterial__.ShaderMaterial|__canvasitemmaterial__.CanvasItemMaterial|__physicalskymaterial__.PhysicalSkyMaterial|__material__.Material|__placeholdermaterial__.PlaceholderMaterial|__proceduralskymaterial__.ProceduralSkyMaterial: pass

  def create_trimesh_collision(self)->None: pass

  def create_convex_collision(self, clean:bool=True, simplify:bool=False)->None: pass

  def create_multiple_convex_collisions(self, settings:__meshconvexdecompositionsettings__.MeshConvexDecompositionSettings= __meshconvexdecompositionsettings__.MeshConvexDecompositionSettings.constructor())->None: pass

  def get_blend_shape_count(self)->int: pass

  def find_blend_shape_by_name(self, name:__core__.StringName|str)->int: pass

  def get_blend_shape_value(self, blend_shape_idx:int)->float: pass

  def set_blend_shape_value(self, blend_shape_idx:int, value:float)->None: pass

  def create_debug_tangents(self)->None: pass

  def bake_mesh_from_current_blend_shape_mix(self, existing:__arraymesh__.ArrayMesh= __arraymesh__.ArrayMesh.constructor())->__arraymesh__.ArrayMesh: pass

  def bake_mesh_from_current_skeleton_pose(self, existing:__arraymesh__.ArrayMesh= __arraymesh__.ArrayMesh.constructor())->__arraymesh__.ArrayMesh: pass


