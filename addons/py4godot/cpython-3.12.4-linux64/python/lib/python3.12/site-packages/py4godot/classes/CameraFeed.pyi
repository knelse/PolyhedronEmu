from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object as __object__

import py4godot.classes.core as __core__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CameraServer as __cameraserver__
import py4godot.classes.Image as __image__
import py4godot.classes.CameraFeed as __camerafeed__
import py4godot.classes.RefCounted as __refcounted__


class FeedDataType:
  FEED_NOIMAGE:int = 0
  FEED_RGB:int = 1
  FEED_YCBCR:int = 2
  FEED_YCBCR_SEP:int = 3
  FEED_EXTERNAL:int = 4
class FeedPosition:
  FEED_UNSPECIFIED:int = 0
  FEED_FRONT:int = 1
  FEED_BACK:int = 2


class CameraFeed(__refcounted__.RefCounted):
  frame_changed: BuiltinSignal
  format_changed: BuiltinSignal

  @staticmethod
  def constructor()->CameraFeed:pass



  @staticmethod
  def cast(other:__object__.Object)->CameraFeed:pass


  @property
  def feed_is_active(self)->bool: pass
  @feed_is_active.setter
  def feed_is_active(self,  value:bool)->None: pass
  @property
  def feed_transform(self)->__core__.Transform2D: pass
  @feed_transform.setter
  def feed_transform(self,  value:__core__.Transform2D)->None: pass
  @property
  def formats(self)->__core__.Array: pass
  def _activate_feed(self)->bool: pass

  def _deactivate_feed(self)->None: pass

  def get_id(self)->int: pass

  def is_active(self)->bool: pass

  def set_active(self, active:bool)->None: pass

  def get_name(self)->str: pass

  def set_name(self, name:str)->None: pass

  def get_position(self)->int: pass

  def set_position(self, position:int )->None: pass

  def get_transform(self)->__core__.Transform2D: pass

  def set_transform(self, transform:__core__.Transform2D)->None: pass

  def set_rgb_image(self, rgb_image:__image__.Image)->None: pass

  def set_ycbcr_image(self, ycbcr_image:__image__.Image)->None: pass

  def set_external(self, width:int, height:int)->None: pass

  def get_texture_tex_id(self, feed_image_type:int )->int: pass

  def get_datatype(self)->int: pass

  def get_formats(self)->__core__.Array: pass

  def set_format(self, index:int, parameters:__core__.Dictionary)->bool: pass


